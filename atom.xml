<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>不是在改BUG，就是在改BUG的路上</title>
	<link href="https://blog.kiyoko.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.kiyoko.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-04-05T09:30:18+00:00</updated>
	<id>https://blog.kiyoko.io/atom.xml</id>
	<entry xml:lang="en">
		<title>计算机图形学: 变换补充</title>
		<published>2022-04-05T09:30:18+00:00</published>
		<updated>2022-04-05T09:30:18+00:00</updated>
		<link href="https://blog.kiyoko.io/transformation-supplementary/" type="text/html"/>
		<id>https://blog.kiyoko.io/transformation-supplementary/</id>
		<content type="html">&lt;p&gt;在不考虑齐次坐标的情况下，旋转矩阵可以表示为&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;R_\theta
=


\begin{pmatrix}
\cos\theta &amp; -\sin\theta \\
\sin\theta &amp;  \cos\theta
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;p&gt;因此，&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;R_{-\theta}
=

\begin{pmatrix}
\cos(-\theta) &amp; -\sin(-\theta) \\
\sin(-\theta) &amp;  \cos(-\theta)
\end{pmatrix}

=

\begin{pmatrix}
\cos\theta &amp; \sin\theta \\
-\sin\theta &amp;  \cos\theta
\end{pmatrix}
=

R_\theta^T&lt;&#x2F;script&gt;
&lt;p&gt;而旋转 \(\theta\) 与旋转 \(-\theta\) 互为逆变换，所以&lt;&#x2F;p&gt;
&lt;p&gt;$$R_{-\theta}=R_\theta^{-1}=R_\theta^T$$&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>计算机图形学: 变换</title>
		<published>2022-04-04T08:55:32+00:00</published>
		<updated>2022-04-04T08:55:32+00:00</updated>
		<link href="https://blog.kiyoko.io/transformation/" type="text/html"/>
		<id>https://blog.kiyoko.io/transformation/</id>
		<content type="html">&lt;h2 id=&quot;ju-zhen-yu-bian-huan&quot;&gt;矩阵与变换&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;suo-fang&quot;&gt;缩放&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;01.png&quot; alt=&quot;scale&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如图所示，左侧的图形经过了缩放\(S_{0.5}\)变换后得到了右侧图形。&lt;&#x2F;p&gt;
&lt;p&gt;\(S_{0.5}\) 表示将图形的横纵坐标变为原来的 \(\frac 1 2\)。&lt;&#x2F;p&gt;
&lt;p&gt;首先，可以使用如下方程组表示上述的变换关系:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(1)}
\begin{cases}
   x\prime=sx \\
   y\prime=sy
\end{cases}&lt;&#x2F;script&gt;
&lt;p&gt;假设存在一个矩阵，可以将原坐标变换至新的坐标:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{bmatrix}
   x\prime \\
   y\prime
\end{bmatrix}
=

\begin{bmatrix}
   A &amp; B \\
   C &amp; D
\end{bmatrix}
\begin{bmatrix}
   x \\
   y
\end{bmatrix}
=

\begin{bmatrix}
   Ax + By \\
   Cx + Dy
\end{bmatrix}&lt;&#x2F;script&gt;

整理后得到:
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(2)}
\begin{cases}
   x\prime=Ax+By \\
   y\prime=Cx+Dy
\end{cases}&lt;&#x2F;script&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;\((1),(2)\) 可得:
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(3)}
\begin{cases}
   (A-s)x+By=0 \\
   Cx+(D-s)y=0
\end{cases}&lt;&#x2F;script&gt;

&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(4)}
\begin{cases}
   A=D=s \\
   B=C=0
\end{cases}&lt;&#x2F;script&gt;

即
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(5)}
\begin{bmatrix}
   x\prime \\
   y\prime
\end{bmatrix}
=

\begin{bmatrix}
   s &amp; 0 \\
   0 &amp; s
\end{bmatrix}
\begin{bmatrix}
   x \\
   y
\end{bmatrix}&lt;&#x2F;script&gt;
&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fei-yi-zhi-xing-suo-fang&quot;&gt;非一致性缩放&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;02.png&quot; alt=&quot;non-uniform-scale&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上图使用的变换方式为 \(S_{0.5,1.0}\)，此时横纵坐标变换方式不一致。即
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(6)}
\begin{cases}
   x\prime=s_xx \\
   y\prime=s_yy
\end{cases}&lt;&#x2F;script&gt;

使用\((2),(6)\)可得:
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(4)}
\begin{cases}
    A=s_x \\
    B=C=0 \\
    D=s_y
\end{cases}&lt;&#x2F;script&gt;

即矩阵表示为&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(5)}
\begin{bmatrix}
   x\prime \\
   y\prime
\end{bmatrix}
=

\begin{bmatrix}
   s_x &amp; 0 \\
     0 &amp; s_y
\end{bmatrix}
\begin{bmatrix}
   x \\
   y
\end{bmatrix}&lt;&#x2F;script&gt;
&lt;h3 id=&quot;jing-mian-fan-she-bian-huan&quot;&gt;镜面(反射)变换&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;03.png&quot; alt=&quot;reflection-matrix&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;还可以以 \(y\) 轴作为对称轴做变换，即
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(7)}
\begin{cases}
   x\prime=-x \\
   y\prime=y
\end{cases}&lt;&#x2F;script&gt;

使用矩阵可以表示为&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(8)}
\begin{bmatrix}
   x\prime \\
   y\prime
\end{bmatrix}
=

\begin{bmatrix}
    -1 &amp; 0 \\
     0 &amp; 1
\end{bmatrix}
\begin{bmatrix}
   x \\
   y
\end{bmatrix}&lt;&#x2F;script&gt;
&lt;h3 id=&quot;cuo-qie-bian-huan&quot;&gt;错切变换&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;04.png&quot; alt=&quot;shear-matrix&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上图的变换被称作错切变换。&lt;&#x2F;p&gt;
&lt;p&gt;首先可以发现，任意一点的纵坐标都没有发生变换。&lt;&#x2F;p&gt;
&lt;p&gt;而对于横坐标，
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(9)}
\begin{cases}
   x\prime=x  &amp;\text{当 } y=0 \\
   x\prime=x+a&amp;\text{当 } y=1 \\
   x\prime=x+ay &amp;\text{当 } y\in(0,1)
\end{cases}&lt;&#x2F;script&gt;

整理可得:
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(10)}
\begin{cases}
   x\prime=x+ay &amp;\text{当 } y\in(0,1) \\
   y\prime=y
\end{cases}&lt;&#x2F;script&gt;

由\((2),(10)\) 可得:
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(11)}
\begin{cases}
   Ax+By=x+ay   \\
   Cx+Dy=y
\end{cases}&lt;&#x2F;script&gt;

使用矩阵可以表示为&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(12)}
\begin{bmatrix}
   x\prime \\
   y\prime
\end{bmatrix}
=

\begin{bmatrix}
     1 &amp; a \\
     0 &amp; 1
\end{bmatrix}
\begin{bmatrix}
   x \\
   y
\end{bmatrix}&lt;&#x2F;script&gt;
&lt;h3 id=&quot;xuan-zhuan-bian-huan&quot;&gt;旋转变换&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;05.png&quot; alt=&quot;rotate&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;\(R_{45}\)表示以坐标原点为旋转中心，向逆时针方向旋转\(45\degree\)。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;06.png&quot; alt=&quot;rotate2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;选择两个特殊的点，可以得到对应关系:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(13)}
\begin{cases}
   (1, 0) \to ( \cos\theta, \sin\theta) \\
   (0, 1) \to (-\sin\theta, \cos\theta)
\end{cases}&lt;&#x2F;script&gt;
&lt;p&gt;带入 \((2)\) 得到:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{cases}
   \cos\theta = A\cdotp1+B\cdotp0 \\
   \sin\theta = C\cdotp1+D\cdotp0 \\
   -\sin\theta = A\cdotp0+B\cdotp1 \\
   \cos\theta = C\cdotp0+D\cdotp1
\end{cases}&lt;&#x2F;script&gt;

整理后得到:
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(14)}
R_{\theta}=
\begin{bmatrix}
     \cos\theta &amp; -\sin\theta \\
     \sin\theta &amp; \cos\theta
\end{bmatrix}&lt;&#x2F;script&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;使用矩阵可以表示为&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(15)}
\begin{bmatrix}
   x\prime \\
   y\prime
\end{bmatrix}
=

\begin{bmatrix}
     \cos\theta &amp; -\sin\theta \\
     \sin\theta &amp; \cos\theta
\end{bmatrix}
\begin{bmatrix}
   x \\
   y
\end{bmatrix}&lt;&#x2F;script&gt;
&lt;h2 id=&quot;xian-xing-bian-huan&quot;&gt;线性变换&lt;&#x2F;h2&gt;
&lt;p&gt;如果原坐标\((x, y)\)与变换后的坐标\((x\prime, y\prime)\)可以表示为&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag*{(16)}
\begin{cases}
   x\prime = ax+by \\
   y\prime = cx+dy
\end{cases}&lt;&#x2F;script&gt;
&lt;p&gt;矩阵形式表示为&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{bmatrix}
   x\prime \\
   y\prime
\end{bmatrix}
=

\begin{bmatrix}
     a &amp; b \\
     c &amp; d
\end{bmatrix}
\begin{bmatrix}
   x \\
   y
\end{bmatrix}&lt;&#x2F;script&gt;
&lt;p&gt;则称这种变换为&lt;strong&gt;线性变换&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qi-ci-zuo-biao&quot;&gt;齐次坐标&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;te-shu-de-ping-yi-bian-huan&quot;&gt;特殊的平移变换&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;07.png&quot; alt=&quot;translation&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;经过 \(T_{tx,ty}\)变换后的坐标可以表示为:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{cases}
   x\prime = x+t_x \\
   y\prime = y+t_y
\end{cases}&lt;&#x2F;script&gt;
&lt;p&gt;可以发现，这个变换虽然简单，但与公式\((16)\)不兼容，即&lt;strong&gt;不是一个线性变换&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;对应到矩阵形式的表示:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{bmatrix}
   x\prime \\
   y\prime
\end{bmatrix}
=

\begin{bmatrix}
     a &amp; b \\
     c &amp; d
\end{bmatrix}
\begin{bmatrix}
   x \\
   y
\end{bmatrix}
+
\begin{bmatrix}
   t_x \\
   t_y
\end{bmatrix}&lt;&#x2F;script&gt;
&lt;h3 id=&quot;yin-ru-qi-ci-zuo-biao&quot;&gt;引入齐次坐标&lt;&#x2F;h3&gt;
&lt;p&gt;对于二维空间中坐标与向量，增加第三个坐标 \(w\):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;点 = \((x, y, 1)^T\)&lt;&#x2F;li&gt;
&lt;li&gt;向量 = \((x, y, 0)^T\)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;后，平移变换可以表示为:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{pmatrix}
    x\prime \\
    y\prime \\
    w\prime
\end{pmatrix}
=

\begin{pmatrix}
    1 &amp; 0 &amp; t_x \\
    0 &amp; 1 &amp; t_y \\
    0 &amp; 0 &amp; 1
\end{pmatrix}
\begin{pmatrix}
    x \\
    y \\
    1
\end{pmatrix}
=

\begin{pmatrix}
    x + t_x \\
    y + t_y \\
    1
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;h3 id=&quot;qi-ci-zuo-biao-yun-suan&quot;&gt;齐次坐标运算&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;\(向量 + 向量 = 向量\)
&lt;ul&gt;
&lt;li&gt;\((x_a, y_a, 0) + (x_b, y_b, 0) = (x_a + x_b, y_a + y_b, 0)\)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;\(向量 +点 = 点\)
&lt;ul&gt;
&lt;li&gt;\((x_a, y_a, 0) + (x_b, y_b, 1) = (x_a + x_b, y_a + y_b, 1)\)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;\(点 - 点 = 向量\)
&lt;ul&gt;
&lt;li&gt;\((x_a, y_a, 1) - (x_b, y_b, 1) = (x_a - x_b, y_a - y_b, 0)\)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;\(点 + 点 = 中点\)
&lt;ul&gt;
&lt;li&gt;\((x_a, y_a, 1) + (x_b, y_b, 1) = (x_a + x_b, y_a + y_b, 2) = (\frac{x_a - x_b}{2}, \frac{y_a - y_b}{2}, 1)\)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fang-she-bian-huan-affine-transformations&quot;&gt;仿射变换(Affine Transformations)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;放射变换 = 线性变换 + 平移&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag{17}
\begin{pmatrix}
    x\prime \\
    y\prime
\end{pmatrix}
=

\begin{pmatrix}
    a &amp; b \\
    c &amp; d
\end{pmatrix}
\begin{pmatrix}
    x \\
    y
\end{pmatrix}
+

\begin{pmatrix}
    t_x \\
    t_y
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;h3 id=&quot;qi-ci-zuo-biao-bian-huan&quot;&gt;齐次坐标变换&lt;&#x2F;h3&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\tag{18}
\begin{pmatrix}
    x\prime \\
    y\prime \\
    1
\end{pmatrix}
=

\begin{pmatrix}
    a &amp; b &amp; t_x \\
    c &amp; d &amp; t_y \\
    0 &amp; 0 &amp; 1
\end{pmatrix}
\begin{pmatrix}
    x \\
    y \\
    1
\end{pmatrix}
=

\begin{pmatrix}
    ax + by + t_x \\
    cy + dy + t_y \\
    1
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;p&gt;与公式 \((17)\) 是等价的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ci-zuo-biao-suo-fang-bian-huan&quot;&gt;齐次坐标缩放变换&lt;&#x2F;h3&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;S_{(s_x, s_y)}=
\begin{pmatrix}
    s_x &amp;   0 &amp; 0 \\
      0 &amp; s_y &amp; 0 \\
      0 &amp;   0 &amp; 1
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;h3 id=&quot;qi-ci-zuo-biao-xuan-zhuan-bian-huan&quot;&gt;齐次坐标旋转变换&lt;&#x2F;h3&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;R_{\theta}=
\begin{pmatrix}
    \cos\theta &amp; -\sin\theta &amp; 0 \\
    \sin\theta &amp;  \cos\theta &amp; 0 \\
             0 &amp;           0 &amp; 1
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;h3 id=&quot;qi-ci-zuo-biao-ping-yi-bian-huan&quot;&gt;齐次坐标平移变换&lt;&#x2F;h3&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;T_{(t_x, t_y)}=
\begin{pmatrix}
    1 &amp; 0 &amp; t_x \\
    0 &amp; 1 &amp; t_y \\
    0 &amp; 0 &amp;   1
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;h2 id=&quot;ni-bian-huan&quot;&gt;逆变换&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;08.png&quot; alt=&quot;inserse-transform&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;假设初始状态为 &lt;strong&gt;A&lt;&#x2F;strong&gt;, 经过变换 \(M\) 达到状态 &lt;strong&gt;B&lt;&#x2F;strong&gt;, 此时满足从 &lt;strong&gt;B&lt;&#x2F;strong&gt; 到 &lt;strong&gt;A&lt;&#x2F;strong&gt; 的变换 \(M^{-1}\) 称为 \(M\) 的逆变换, 在数学中称 \(M^{-1}\) 是 \(M\) 的逆矩阵。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zu-he-bian-huan&quot;&gt;组合变换&lt;&#x2F;h2&gt;
&lt;p&gt;我们经常会遇到这样的问题，从左侧变换到右侧图形。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;09.png&quot; alt=&quot;compose-transform&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;比如，先平移变换 \(T_{(1, 0)}\)，再旋转变换 \(R_{45}\)，但得到的结果与目标相去甚远，因为旋转是以坐标原点为中心:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;10.png&quot; alt=&quot;compose-transform-1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;将上述变换交换一下，先 \(R_{45}\) 再 \(T_{(1, 0)}\)，所得结果就是目标图形:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;11.png&quot; alt=&quot;compose-transform-2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;同时，通过上述可以发现，将一系列变换交换顺序，得到的结果可能并不相同(事实上，大多数情况都不相同)，同样说明矩阵乘法不允许交换律。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bian-huan-zuo-yong-shun-xu&quot;&gt;变换作用顺序&lt;&#x2F;h3&gt;
&lt;p&gt;遵循从右到左的顺序。&lt;&#x2F;p&gt;
&lt;p&gt;向量写在计算的最后侧，变换矩阵按顺序从右到左一次排列。&lt;&#x2F;p&gt;
&lt;p&gt;因此，可以将变换矩阵看作一个&lt;strong&gt;函数&lt;&#x2F;strong&gt;，向量是这个函数的&lt;strong&gt;参数&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;假设有一系列仿射变换 \(A_1\),\(A_2\),\(A_3\), ...,则计算表达式为:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;A_n(...A_2(A_1(x)))=

\underbrace{
A_n\cdotp\cdotp\cdotp A_2\cdotp\ A_1\cdotp
}_{\text{可以提前计算}}
\begin{pmatrix}
x \\
y \\
1
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;p&gt;而由于矩阵乘法具有结合律的性质，因此可以提前计算 \(\displaystyle\prod_{i=n}^1A_i\) 得到一个可以代表所有变换的矩阵。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qi-ci-zuo-biao-bian-huan-shun-xu&quot;&gt;齐次坐标变换顺序&lt;&#x2F;h4&gt;
&lt;p&gt;根据公式 \((17),(18)\) 可知，使用齐次坐标变换时，先进行线性变换，再进行平移变换。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fen-jie-bian-huan&quot;&gt;分解变换&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;12.png&quot; alt=&quot;decompose-transform-2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如何期望以左下角顶点\(c\)作为旋转中心，将左侧图形旋转至右侧图形，该如何操作呢?&lt;&#x2F;p&gt;
&lt;p&gt;由于旋转默认以坐标原点为旋转中心，因此可以将目标旋转中心移动到坐标原点:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;平移至原点&lt;&#x2F;li&gt;
&lt;li&gt;旋转&lt;&#x2F;li&gt;
&lt;li&gt;平移回去&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;transformation&#x2F;13.png&quot; alt=&quot;decompose-transform-2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;即&lt;&#x2F;p&gt;
&lt;p&gt;$$T(c)\cdotp R(\alpha)\cdotp T(-c)$$&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>计算机图形学: 复习线性代数</title>
		<published>2022-03-28T19:38:32+00:00</published>
		<updated>2022-03-28T19:38:32+00:00</updated>
		<link href="https://blog.kiyoko.io/review-of-linear-algebra/" type="text/html"/>
		<id>https://blog.kiyoko.io/review-of-linear-algebra/</id>
		<content type="html">&lt;h1 id=&quot;xiang-liang&quot;&gt;向量&lt;&#x2F;h1&gt;
&lt;p&gt;数学中称作 &lt;strong&gt;&lt;code&gt;向量&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;，物理学中称作 &lt;strong&gt;&lt;code&gt;矢量&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;常写作 &lt;script type=&quot;math&#x2F;tex&quot;&gt;\vec{a}&lt;&#x2F;script&gt;
 或 &lt;script type=&quot;math&#x2F;tex&quot;&gt;a&lt;&#x2F;script&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;或者使用起始点与结束点表示: &lt;script type=&quot;math&#x2F;tex&quot;&gt;\vec{AB}=B-A&lt;&#x2F;script&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;具有方向和长度&lt;&#x2F;li&gt;
&lt;li&gt;无绝对起始位置(可平移)&lt;&#x2F;li&gt;
&lt;li&gt;默认使用列向量&lt;script type=&quot;math&#x2F;tex&quot;&gt;\begin{pmatrix} a \\ b \end{pmatrix}&lt;&#x2F;script&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;xiang-liang-de-mo-chang&quot;&gt;向量的模长&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;向量的规模(Magnitude)&#x2F;长度(length)写作: &lt;script type=&quot;math&#x2F;tex&quot;&gt;\Vert\vec{a}\Vert&lt;&#x2F;script&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;单位向量
&lt;ul&gt;
&lt;li&gt;规模为 &lt;strong&gt;1&lt;&#x2F;strong&gt; 的向量&lt;&#x2F;li&gt;
&lt;li&gt;单位向量计算方式: &lt;script type=&quot;math&#x2F;tex&quot;&gt;\hat{a}=\vec{a}&#x2F;\Vert\vec{a}\Vert&lt;&#x2F;script&gt;
，读作 &lt;code&gt;a-hat&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;只表示方向&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;xiang-liang-de-jia-fa&quot;&gt;向量的加法&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;几何: 平行四边形法则 &amp;amp; 三角形法则&lt;&#x2F;li&gt;
&lt;li&gt;代数: 对应坐标相加&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;xiang-liang-dian-cheng&quot;&gt;向量点乘&lt;&#x2F;h2&gt;
&lt;p&gt;点(dot)乘，也叫标量(scalar)乘。&lt;&#x2F;p&gt;
&lt;p&gt;$$\vec{a}\cdotp\vec{b}=\Vert\vec{a}\Vert\Vert\vec{b}\Vert\cos\theta$$
$$\cos\theta=\cfrac{\vec{a}\cdotp\vec{b}}{\Vert\vec{a}\Vert\Vert\vec{b}\Vert}$$&lt;&#x2F;p&gt;
&lt;p&gt;对于单位向量，则有
$$\cos\theta=\hat{a}\cdotp\hat{b}$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dian-cheng-xing-zhi&quot;&gt;点乘性质&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;\( \vec{a}\cdotp\vec{b}=\vec{b}\cdotp\vec{a} \)&lt;&#x2F;li&gt;
&lt;li&gt;\( \vec{a}\cdotp(\vec{b}+\vec{c})=\vec{a}\cdotp\vec{b}+\vec{a}\cdotp\vec{c} \)&lt;&#x2F;li&gt;
&lt;li&gt;\( (k\vec{a})\cdotp\vec{b}=\vec{a}\cdotp(k\vec{b})=k(\vec{a}\cdotp\vec{b}) \)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;di-qia-er-zuo-biao-xi-zhong-de-dian-cheng&quot;&gt;笛卡尔坐标系中的点乘&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;2d-kong-jian&quot;&gt;2D 空间&lt;&#x2F;h4&gt;
&lt;p&gt;$$\vec{a}*\vec{b}=\begin{pmatrix} x_a \ y_a \end{pmatrix}\cdotp\begin{pmatrix} x_b \ y_b \end{pmatrix}=x_ax_b+y_ay_b$$&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3d-kong-jian&quot;&gt;3D 空间&lt;&#x2F;h4&gt;
&lt;p&gt;$$\vec{a}*\vec{b}=\begin{pmatrix} x_a \ y_a \ z_a \end{pmatrix}\cdotp\begin{pmatrix} x_b \ y_b \ z_b \end{pmatrix}=x_ax_b+y_ay_b+z_az_b$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dian-cheng-de-ying-yong&quot;&gt;点乘的应用&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;两个向量之间的夹角&lt;&#x2F;li&gt;
&lt;li&gt;一个向量在另一个向量上的投影&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;xiang-liang-tou-ying&quot;&gt;向量投影&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;review-of-linear-algebra&#x2F;01.png&quot; alt=&quot;投影&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如图，\( \vec{b_\perp} \) 就是 \( \vec{b} \) 在 \( \vec{a} \) 方向上的投影。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;\( \vec{b_\perp} \) 的方向一定与 \( \vec{a} \) 相同 (或者说是 \( \hat{a} \))
&lt;ul&gt;
&lt;li&gt;\( \vec{b_\perp}=k\hat{a} \)&lt;&#x2F;li&gt;
&lt;li&gt;\( k=\Vert\vec{b_\perp}\Vert=\Vert\vec{b}\Vert\cos\theta \)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;因此，&lt;&#x2F;p&gt;
&lt;p&gt;$$\vec{b_\perp}=\Vert\vec{b}\Vert\hat{a}\cos\theta$$&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fen-jie-xiang-liang&quot;&gt;分解向量&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;review-of-linear-algebra&#x2F;02.png&quot; alt=&quot;分解&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如图，当计算出 \( \vec{b} \) 在 \( \vec{a} \) 方向的投影 \( \vec{b_\perp} \) 后，就可以通过 &lt;strong&gt;平行四边形法则&lt;&#x2F;strong&gt; 计算出 \( \vec{b} \) 垂直于  \( \vec{a} \) 的分量为  \( \vec{b}-\vec{b_\perp} \)&lt;&#x2F;p&gt;
&lt;h4 id=&quot;pan-duan-qian-hou-fang-xiang&quot;&gt;判断前后方向&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;review-of-linear-algebra&#x2F;03.png&quot; alt=&quot;方向&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;已知基准方向 \( \vec{a} \)，可以通过点乘判断向量 \( \vec{b} \)、向量 \( \vec{c} \) 是向前还是向后的。如图，&lt;&#x2F;p&gt;
&lt;p&gt;$$ \vec{a}\cdotp\vec{b} &amp;gt; 0$$&lt;&#x2F;p&gt;
&lt;p&gt;因此，\(\vec{b}\) 方向向前。&lt;&#x2F;p&gt;
&lt;p&gt;$$ \vec{a}\cdotp\vec{c} &amp;lt; 0$$&lt;&#x2F;p&gt;
&lt;p&gt;因此，\(\vec{c}\) 方向向后。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ji-suan-liang-ge-fang-xiang-jie-jin-cheng-du&quot;&gt;计算两个方向接近程度&lt;&#x2F;h4&gt;
&lt;p&gt;还是使用上图，由于&lt;&#x2F;p&gt;
&lt;p&gt;$$\cos\theta=\hat{a}\cdotp\hat{b}$$&lt;&#x2F;p&gt;
&lt;p&gt;当 \(\theta=0\) 时，
$$\hat{a}\cdotp\hat{b} = 1$$
当 \(\theta=\cfrac{\pi}{2}\) 时，
$$\hat{a}\cdotp\hat{b} = 0$$
当 \(\theta=\pi\) 时，
$$\hat{a}\cdotp\hat{b} = - 1$$&lt;&#x2F;p&gt;
&lt;h5 id=&quot;ying-yong-chang-jing&quot;&gt;应用场景&lt;&#x2F;h5&gt;
&lt;p&gt;一束光照在镜子上发生镜面反射，在看向镜子的时候，可以计算视线与反射光的方向的接近程度显示不同的亮度。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiang-liang-cha-cheng&quot;&gt;向量叉乘&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;review-of-linear-algebra&#x2F;04.png&quot; alt=&quot;叉乘&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;向量 \(\vec{a}\) 与向量 \(\vec{b}\) 的叉乘记作 \(\vec{a}\times\vec{b}\)，其结果为一个向量，假设 \(\vec{a}\) 与 \(\vec{b}\) 之间的夹角为 \(\theta\):
$$\Vert\vec{a}\times\vec{b}\Vert=\Vert\vec{a}\Vert\Vert\vec{b}\Vert\sin\theta$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;\(\vec{a}\times\vec{b}\) 同时垂直于\(\vec{a}\)与\(\vec{b}\)，即 \(\vec{a}\times\vec{b}\) 垂直于 \(\vec{a}\) 与 \(\vec{b}\) 所在的平面&lt;&#x2F;li&gt;
&lt;li&gt;\(\vec{a}\times\vec{b}\) 的方向通过右手(螺旋)定则判断
&lt;ul&gt;
&lt;li&gt;伸开右手，四指沿着向量 \(\vec{a}\) (左操作数)的方向&lt;&#x2F;li&gt;
&lt;li&gt;四指旋转向 \(\vec{b}\) (右操作数)&lt;&#x2F;li&gt;
&lt;li&gt;拇指对应的方向就是 \(\vec{a}\times\vec{b}\) 的方向&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;因此，可知 \(\vec{b}\times\vec{a}\) 的方向与 \(\vec{a}\times\vec{b}\) 的大小相同，方向相反:&lt;&#x2F;p&gt;
&lt;p&gt;$$\vec{a}\times\vec{b}=-\vec{b}\times\vec{a}$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cha-cheng-de-xing-zhi&quot;&gt;叉乘的性质&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;\(\vec{x}\times\vec{y}=+\vec{z}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(\vec{y}\times\vec{x}=-\vec{z}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(\vec{y}\times\vec{z}=+\vec{x}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(\vec{z}\times\vec{y}=-\vec{x}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(\vec{z}\times\vec{x}=+\vec{y}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(\vec{x}\times\vec{z}=-\vec{y}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(\vec{a}\times\vec{b}=-\vec{b}\times\vec{a}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(\vec{a}\times\vec{a}=\vec{0}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(\vec{a}\times(\vec{b}+\vec{c})=\vec{a}\times\vec{b}+\vec{a}\times\vec{c}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(\vec{a}\times(k\vec{b}=k(\vec{a}\times\vec{b})\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;推论&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;如果在一个坐标系中，有&lt;&#x2F;p&gt;
&lt;p&gt;$$\vec{x}\times\vec{y}=+\vec{z}$$&lt;&#x2F;p&gt;
&lt;p&gt;则表示这个坐标是右手系。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dai-shu-ji-suan-fang-shi&quot;&gt;代数计算方式&lt;&#x2F;h3&gt;
&lt;p&gt;在三维坐标系中，有单位向量 \(\vec{x}=(1, 0, 0)\),\(\vec{y}=(0,1,0)\),\(\vec{z}=(0,0,1)\),设
$$\vec{a}=(x_a,y_a,z_a)=x_a\vec{x}+y_a\vec{y}+z_a\vec{z}$$
$$\vec{b}=(x_b,y_b,z_b)=x_b\vec{x}+y_b\vec{y}+z_b\vec{z}$$&lt;&#x2F;p&gt;
&lt;p&gt;则&lt;&#x2F;p&gt;
&lt;p&gt;&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\vec{a}\times\vec{b}=(x_a\vec{x}+y_a\vec{y}+z_a\vec{z})\times(x_b\vec{x}+y_b\vec{y}+z_b\vec{z})&lt;&#x2F;script&gt;

&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;=x_a\vec{x}\times(x_b\vec{x}+y_b\vec{y}+z_b\vec{z})+y_a\vec{y}\times(x_b\vec{x}+y_b\vec{y}+z_b\vec{z})+z_a\vec{z}\times(x_b\vec{x}+y_b\vec{y}+z_b\vec{z})&lt;&#x2F;script&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;=x_ax_b\vec{x}\times\vec{x}+x_ay_b\vec{x}\times\vec{y}+x_az_b\vec{x}\times\vec{z}&lt;&#x2F;script&gt;

&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;+y_ax_b\vec{y}\times\vec{x}+y_ay_b\vec{y}\times\vec{y}+y_az_b\vec{y}\times\vec{z}&lt;&#x2F;script&gt;

&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;+z_ax_b\vec{z}\times\vec{x}+z_ay_b\vec{z}\times\vec{y}+z_az_b\vec{z}\times\vec{z}&lt;&#x2F;script&gt;

&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;=\vec{0}+x_ay_b\vec{z}-x_az_b\vec{y}&lt;&#x2F;script&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;-y_ax_b\vec{z}+\vec{0}+y_az_b\vec{x}&lt;&#x2F;script&gt;

&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;+z_ax_b\vec{y}-z_ay_b\vec{x}+\vec{0}&lt;&#x2F;script&gt;

&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;=(y_az_b-y_bz_a) \vec{x}+(z_ax_b-x_az_b)\vec{y}+(x_ay_b-y_ax_b)\vec{z}&lt;&#x2F;script&gt;
&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;=

\begin{pmatrix} y_az_b - y_bz_a \\
z_ax_b-x_az_b \\
x_ay_b-y_ax_b
 \end{pmatrix}&lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;=

\begin{pmatrix}
    0 &amp; -z_a &amp;  y_a \\
  z_a &amp;    0 &amp; -x_a \\
  -y_a &amp;  x_a &amp;    0
  \end{pmatrix}
  \begin{pmatrix}
  x_b \\
  y_b \\
  z_b
  \end{pmatrix}&lt;&#x2F;script&gt;
&lt;h3 id=&quot;cha-cheng-de-ying-yong&quot;&gt;叉乘的应用&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;pan-ding-zuo-you&quot;&gt;判定左右&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;review-of-linear-algebra&#x2F;05.png&quot; alt=&quot;叉乘判定左右&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;定义逆时针旋转为左，顺时针旋转为右。&lt;&#x2F;p&gt;
&lt;p&gt;如图，\(\vec{a}\) 经过逆时针旋转之后可以与 \(\vec{b}\) 的方向相同，此时 \(\vec{a}\times\vec{b}\) 方向为正，反之，方向为负。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;pan-ding-nei-wai&quot;&gt;判定内外&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;review-of-linear-algebra&#x2F;06.png&quot; alt=&quot;叉乘判定内外&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如图，\(\vec{AB}\times\vec{AP}\) 可知 \(P\) 在 \(\vec{AP}\) 的左侧，同理，可知 \(P\) 也分别位于 \(\vec{BC}\) 和 \(\vec{CA}\) 的左侧。因此，\(P\) 位于 \(\triangle ABC\) 的内部。&lt;&#x2F;p&gt;
&lt;p&gt;推论，当不确定 \(\triangle ABC\) 的顶点顺序时，只需要满足 \(\vec{AB}\times\vec{AP}\)，\(\vec{BC}\times\vec{BP}\)，\(\vec{CA}\times\vec{CP}\) 的方向相同，就可证明 \(P\) 位于 \(\triangle ABC\) 的内部。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;san-wei-xiang-liang-de-tou-ying&quot;&gt;三维向量的投影&lt;&#x2F;h2&gt;
&lt;p&gt;假设在一个三维坐标系中有:&lt;&#x2F;p&gt;
&lt;p&gt;$$\Vert\vec{u}\Vert=\Vert\vec{v}\Vert=\Vert\vec{w}\Vert=1$$
$$\vec{u}\cdotp\vec{v}=\vec{v}\cdotp\vec{w}=\vec{u}\cdotp\vec{w}=1$$
$$\vec{w}=\vec{u}\times\vec{v}$$&lt;&#x2F;p&gt;
&lt;p&gt;则有任意向量
$$\vec{p}=
(\vec{p}\cdotp\vec{u})\vec{u}
+(\vec{p}\cdotp\vec{v})\vec{v}
+(\vec{p}\cdotp\vec{w})\vec{w}
$$&lt;&#x2F;p&gt;
&lt;p&gt;假设 \(\vec{p}\) 与 \(\vec{u}\),\(\vec{v}\),\(\vec{w}\) 的夹角分别是 \(\alpha\),\(\beta\),\(\gamma\),则&lt;&#x2F;p&gt;
&lt;p&gt;$$\vec{p}=
\Vert\vec{p}\Vert\cos\alpha\vec{u}
+\Vert\vec{p}\Vert\cos\beta\vec{v}
+\Vert\vec{p}\Vert\cos\gamma\vec{w}
$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ju-zhen&quot;&gt;矩阵&lt;&#x2F;h2&gt;
&lt;p&gt;一个 \(m \times n\)的阵列(\(m\) 为行，\(n\)为列):&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{pmatrix}
   1 &amp; 3 \\
   5 &amp; 2 \\
   0 &amp; 4
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;h3 id=&quot;ju-zhen-de-cheng-fa&quot;&gt;矩阵的乘法&lt;&#x2F;h3&gt;
&lt;p&gt;矩阵 \(A\) 乘以矩阵 \(B\) 要求，\(A_{col}=B_{row}\)，即
$$(M\times N)(N\times P)=(M\times P)$$&lt;&#x2F;p&gt;
&lt;p&gt;举例:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{pmatrix}
   1 &amp; 3 \\
   5 &amp; 2 \\
   0 &amp; 4
\end{pmatrix}
\begin{pmatrix}
   3 &amp; 6 &amp; 9 &amp; 4 \\
   2 &amp; 7 &amp; 8 &amp; 3
\end{pmatrix}
=

\begin{pmatrix}
    9 &amp;  ? &amp; 33 &amp; 13 \\
   19 &amp; 44 &amp; 61 &amp; 26 \\
    8 &amp; 28 &amp; 32 &amp;  ?
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;p&gt;结果矩阵 \((i, j)\) 的值为，\(A_i\) 与 \(B_j\) 的点乘。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ju-zhen-de-xing-zhi&quot;&gt;矩阵的性质&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不支持交换律: \(AB \neq BA\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;支持结合律和分配律&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;\((AB)C=A(BC)\)&lt;&#x2F;li&gt;
&lt;li&gt;\(A(B+C)=AB+AC\)&lt;&#x2F;li&gt;
&lt;li&gt;\((A+B)C=AC+BC\)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ju-zhen-cheng-yi-xiang-liang&quot;&gt;矩阵乘以向量&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;将向量视为矩阵 \((m\times 1)\)(即列向量)，计算时矩阵在左&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ju-zhen-de-zhuan-zhi-transpose&quot;&gt;矩阵的转置(Transpose)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;将行列互换 \(ij\to ji\)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{pmatrix}
   1 &amp; 2 \\
   3 &amp; 4 \\
   5 &amp; 6
\end{pmatrix}^T
=

\begin{pmatrix}
   1 &amp; 3 &amp; 5 \\
   2 &amp; 4 &amp; 6
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;ul&gt;
&lt;li&gt;性质
$$(AB)^T=B^TA^T$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dan-wei-ju-zhen&quot;&gt;单位矩阵&lt;&#x2F;h3&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;I_{3\times 3}
=

\begin{pmatrix}
1 &amp; 0 &amp; 0 \\
0 &amp; 1 &amp; 0 \\
0 &amp; 0 &amp; 1
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;p&gt;$$AA^{-1}=A^{-1}A=I$$
$$(AB)^{-1}=B^{-1}A^{-1}$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xiang-liang-cheng-fa-de-ju-zhen-biao-shi&quot;&gt;向量乘法的矩阵表示&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;dian-cheng&quot;&gt;点乘&lt;&#x2F;h4&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\vec{a}\cdotp\vec{b}=\vec{a}^T\vec{b}
=(x_a y_a z_a)
\begin{pmatrix}
x_b \\
y_b \\
z_b
\end{pmatrix}
=

(x_ax_b + y_ay_b + z_az_b)&lt;&#x2F;script&gt;
&lt;h4 id=&quot;cha-cheng&quot;&gt;叉乘&lt;&#x2F;h4&gt;
&lt;p&gt;前文已经推导过:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\vec{a}\times\vec{b}=A^\star\vec{b}
=

\begin{pmatrix}
   0 &amp; -z_a &amp;  y_a \\
 z_a &amp;    0 &amp; -x_a \\
-y_a &amp;  x_a &amp;    0
\end{pmatrix}
\begin{pmatrix}
x_b \\
y_b \\
z_b
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;p&gt;其中，\(A^\star\) 是　\(\vec{a}\) 的 &lt;strong&gt;dual matrix&lt;&#x2F;strong&gt;(对偶矩阵)。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>使用 GLEW 绘制三角形</title>
		<published>2022-01-30T15:50:48+00:00</published>
		<updated>2022-01-30T15:50:48+00:00</updated>
		<link href="https://blog.kiyoko.io/opengl-03/" type="text/html"/>
		<id>https://blog.kiyoko.io/opengl-03/</id>
		<content type="html">&lt;p&gt;之前已经使用 &lt;code&gt;GLFW&lt;&#x2F;code&gt; 绘制了一个三角形，直接定义坐标即可，但使用 &lt;code&gt;GLEW&lt;&#x2F;code&gt; 绘制图形要麻烦一些，因为需要自己编写 &lt;code&gt;Shader&lt;&#x2F;code&gt; 程序。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shader-bian-cheng&quot;&gt;Shader 编程&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Shader&lt;&#x2F;code&gt; 的本质是一个运行在 &lt;code&gt;GPU&lt;&#x2F;code&gt; 上面的程序，因为图形的渲染由 &lt;code&gt;GPU&lt;&#x2F;code&gt; 负责，因此需要对 &lt;code&gt;GPU&lt;&#x2F;code&gt; 编程告诉 &lt;code&gt;GPU&lt;&#x2F;code&gt; 如何渲染，这个很好理解，就像使用 &lt;code&gt;c&#x2F;c++&lt;&#x2F;code&gt; 等通用语言对 &lt;code&gt;CPU&lt;&#x2F;code&gt; 编程一样。&lt;&#x2F;p&gt;
&lt;p&gt;因此，编写一个 &lt;code&gt;Shader&lt;&#x2F;code&gt; 程序至少需要 &lt;strong&gt;2&lt;&#x2F;strong&gt; 部分:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;需要被 &lt;code&gt;GPU&lt;&#x2F;code&gt; 渲染的数据&lt;&#x2F;li&gt;
&lt;li&gt;需要被 &lt;code&gt;GPU&lt;&#x2F;code&gt; 执行的程序&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;注&lt;&#x2F;strong&gt;: &lt;em&gt;之后的一切都建立在 &lt;code&gt;GLFW&lt;&#x2F;code&gt; 与 &lt;code&gt;GLEW&lt;&#x2F;code&gt; 初始化成功之后。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;本次内容会涉及到两种不同的 &lt;code&gt;Shader&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VertexShader&lt;&#x2F;code&gt;: 作用于每个 &lt;code&gt;Vertex&lt;&#x2F;code&gt;，通常是处理从世界空间到裁剪空间(屏幕坐标)的坐标转换，后接&lt;code&gt;光栅化&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;FragmentShader&lt;&#x2F;code&gt;: 作用于每个屏幕上的 &lt;code&gt;Fragment&lt;&#x2F;code&gt; (可近似理解为像素)，通常是计算颜色。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shu-ju&quot;&gt;数据&lt;&#x2F;h3&gt;
&lt;p&gt;二维平面上，三角形有 &lt;strong&gt;3&lt;&#x2F;strong&gt; 个顶点，每个点的坐标包含 &lt;code&gt;x&lt;&#x2F;code&gt;, &lt;code&gt;y&lt;&#x2F;code&gt; &lt;strong&gt;2&lt;&#x2F;strong&gt; 个 &lt;code&gt;float&lt;&#x2F;code&gt; 数值。因此，可以使用 &lt;code&gt;c&lt;&#x2F;code&gt; 定义一个数组:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; positions[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;] = {
&lt;&#x2F;span&gt;&lt;span&gt;    -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但这个数组是在内存中，如果要让 &lt;code&gt;GPU&lt;&#x2F;code&gt; 可以访问，需要将内存中的数据同步到显存中。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;glgenbuffers&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glGenBuffers&quot;&gt;GlGenBuffers&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; generate buffer object names
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glGenBuffers&lt;&#x2F;span&gt;&lt;span&gt;(GLsizei  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  GLuint * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buffers&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其作用是生成若干缓冲区名称，这个解释比较晦涩，其实就是创建 &lt;code&gt;n&lt;&#x2F;code&gt; 个缓冲区描述符保存在 &lt;code&gt;buffers&lt;&#x2F;code&gt; 中。可以有如下两种使用方式:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个缓冲区&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; buffer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glGenBuffers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glGenBuffers&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;buffer);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;创建若干(一个或多个)缓冲区&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; buffers[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] = { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glGenBuffers&lt;&#x2F;span&gt;&lt;span&gt;(sizeof(buffers) &#x2F; sizeof(buffers[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]), buffers);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;glbindbuffer&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glBindBuffer&quot;&gt;GlBindBuffer&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;缓冲区无法直接使用，需要将缓冲区与特定目标(target)绑定才可以使用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glBindBuffer&lt;&#x2F;span&gt;&lt;span&gt;(GLenum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  GLuint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;target&lt;&#x2F;code&gt; 从下表中选择&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;buffer&lt;&#x2F;code&gt; 缓冲区的名字
&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;buffer&lt;&#x2F;code&gt; 表示的缓冲区不存在时会自动创建一个。&lt;&#x2F;li&gt;
&lt;li&gt;当目标存在已绑定的缓冲区时，会使用本次的缓冲区替换之前的绑定关系。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Buffer Binding Target&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Purpose&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_ARRAY_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Vertex attributes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_ATOMIC_COUNTER_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Atomic counter storage&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_COPY_READ_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Buffer copy source&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_COPY_WRITE_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Buffer copy destination&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_DISPATCH_INDIRECT_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Indirect compute dispatch commands&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_DRAW_INDIRECT_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Indirect command arguments&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_ELEMENT_ARRAY_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Vertex array indices&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_PIXEL_PACK_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Pixel read target&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_PIXEL_UNPACK_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Texture data source&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_QUERY_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Query result buffer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_SHADER_STORAGE_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Read-write storage for shaders&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_TEXTURE_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Texture data buffer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_TRANSFORM_FEEDBACK_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Transform feedback buffer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;GL_UNIFORM_BUFFER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Uniform block storage&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;glbufferdata&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glBufferData&quot;&gt;GlBufferData&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;有了缓冲区，就可以使用 &lt;code&gt;glBufferData&lt;&#x2F;code&gt; 函数将数据写入到缓冲区中了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glBufferData&lt;&#x2F;span&gt;&lt;span&gt;(GLenum         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  GLsizeiptr     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; GLvoid * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  GLenum         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usage&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;target&lt;&#x2F;code&gt;: 同上&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;size&lt;&#x2F;code&gt;: 写入缓冲区的数据量，单位 &lt;code&gt;byte&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;data&lt;&#x2F;code&gt;: 数据指针&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;usage&lt;&#x2F;code&gt;: 数据用途，由访问频率(frequency of access)与访问性质(nature of access)组成
&lt;ul&gt;
&lt;li&gt;可取值:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GL_STREAM_DRAW&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_STREAM_READ&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_STREAM_COPY&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_STATIC_DRAW&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_STATIC_READ&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_STATIC_COPY&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_DYNAMIC_DRAW&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_DYNAMIC_READ&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_DYNAMIC_COPY&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;频率(frequency of access):
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;STREAM&lt;&#x2F;code&gt;: The data store contents will be modified once and used at most a few times.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;STATIC&lt;&#x2F;code&gt;: The data store contents will be modified once and used many times.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;DYNAMIC&lt;&#x2F;code&gt;: The data store contents will be modified repeatedly and used many times.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;性质(nature of access):
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DRAW&lt;&#x2F;code&gt;: The data store contents are modified by the application, and used as the source for GL drawing and image specification commands.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;READ&lt;&#x2F;code&gt;: The data store contents are modified by reading data from the GL, and used to return that data when queried by the application.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;COPY&lt;&#x2F;code&gt;: The data store contents are modified by reading data from the GL, and used as the source for GL drawing and image specification commands.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;glenablevertexattribarray&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glEnableVertexAttribArray&quot;&gt;GlEnableVertexAttribArray&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;VertexAttribArray&lt;&#x2F;code&gt; 默认为 &lt;code&gt;Disable&lt;&#x2F;code&gt; 状态，必须使用函数显式启用才能使用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glEnableVertexAttribArray&lt;&#x2F;span&gt;&lt;span&gt;(GLuint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;glvertexattribpointer&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glVertexAttribPointer&quot;&gt;GlVertexAttribPointer&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;定义 &lt;code&gt;VertexAttrib&lt;&#x2F;code&gt; 的数据。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glVertexAttribPointer&lt;&#x2F;span&gt;&lt;span&gt;(GLuint         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                           GLint          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                           GLenum         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                           GLboolean      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;normalized&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                           GLsizei        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stride&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; GLvoid * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pointer&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index&lt;&#x2F;code&gt;: 这个目前还不明白，只知道要与 &lt;code&gt;glEnableVertexAttribArray&lt;&#x2F;code&gt; 参数同时为 &lt;code&gt;0&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;size&lt;&#x2F;code&gt;: 每个顶点包含的元素数量，包括 &lt;strong&gt;position(位置)&lt;&#x2F;strong&gt;, &lt;strong&gt;normal(法线)&lt;&#x2F;strong&gt;, &lt;strong&gt;color(颜色)&lt;&#x2F;strong&gt;, 和 &lt;strong&gt;texture coordinates(纹理坐标)&lt;&#x2F;strong&gt;，可取值 &lt;strong&gt;(1,2,3,4)&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;type&lt;&#x2F;code&gt;: 每个元素的数据类型，&lt;code&gt;GL_FLOAT&lt;&#x2F;code&gt; 表示以 &lt;code&gt;float&lt;&#x2F;code&gt; 为单位_&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;normalized&lt;&#x2F;code&gt;: 是否为向量(只有方向无大小)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;stride&lt;&#x2F;code&gt;: 连续的顶点属性之间的字节偏移间隔&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pointer&lt;&#x2F;code&gt;: 数据偏移量&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;shu-ju-bu-fen-wan-zheng-dai-ma&quot;&gt;数据部分完整代码&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; positions[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;] = {
&lt;&#x2F;span&gt;&lt;span&gt;        -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; buffer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glGenBuffers&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;buffer);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glBindBuffer&lt;&#x2F;span&gt;&lt;span&gt;(GL_ARRAY_BUFFER, buffer);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glBufferData&lt;&#x2F;span&gt;&lt;span&gt;(GL_ARRAY_BUFFER, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span&gt;* sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const void&lt;&#x2F;span&gt;&lt;span&gt;*)(&amp;amp;positions), GL_STATIC_DRAW)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glEnableVertexAttribArray&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glVertexAttribPointer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, GL_FLOAT, GL_FALSE, sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shader-yu-program&quot;&gt;&lt;code&gt;Shader&lt;&#x2F;code&gt; 与 &lt;code&gt;Program&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;要得到一个可以被执行的 &lt;code&gt;Shader&lt;&#x2F;code&gt; 程序，需要&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;编写 &lt;code&gt;Shader&lt;&#x2F;code&gt; 代码&lt;&#x2F;li&gt;
&lt;li&gt;编译 &lt;code&gt;Shader&lt;&#x2F;code&gt; 代码&lt;&#x2F;li&gt;
&lt;li&gt;链接到程序&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;shader-dai-ma&quot;&gt;&lt;code&gt;Shader&lt;&#x2F;code&gt; 代码&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Shader&lt;&#x2F;code&gt; 代码使用 &lt;code&gt;GLSL&lt;&#x2F;code&gt; 语言编写，语法结构类似与 &lt;code&gt;c&lt;&#x2F;code&gt; 要求语句以 &lt;code&gt;;&lt;&#x2F;code&gt; 结尾，由换行等。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注: 只考虑 &lt;code&gt;OpenGL&lt;&#x2F;code&gt; 的 &lt;code&gt;Shader&lt;&#x2F;code&gt; 语言，不考虑 &lt;code&gt;NVIDIA&lt;&#x2F;code&gt; 与 &lt;code&gt;MS&lt;&#x2F;code&gt; 等。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;vertexshader&quot;&gt;&lt;code&gt;VertexShader&lt;&#x2F;code&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;在本次示例中，&lt;code&gt;VertexShader&lt;&#x2F;code&gt; 用来控制点的坐标(position):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;std::string vertexShader =
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#version 330 core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;layout(location = 0) in vec4 position;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;void main() {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    gl_Position = position;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;layout(location = 0)&lt;&#x2F;code&gt; 表示使用 &lt;code&gt;glVertexAttribPointer&lt;&#x2F;code&gt; 第一个参数 &lt;code&gt;index=0&lt;&#x2F;code&gt; 对应的数据。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;in vec4 position;&lt;&#x2F;code&gt; 中使用 &lt;code&gt;vec4&lt;&#x2F;code&gt; 是因为后续的 &lt;code&gt;gl_Position&lt;&#x2F;code&gt; 是 &lt;code&gt;vec4&lt;&#x2F;code&gt; 类型，虽然实际每个顶点是 &lt;code&gt;vec2&lt;&#x2F;code&gt;(&lt;code&gt;glVertexAttribPointer&lt;&#x2F;code&gt; 的第二个参数 &lt;code&gt;size=2&lt;&#x2F;code&gt;)类型&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;in vec4 position;&lt;&#x2F;code&gt; 中的 &lt;code&gt;position&lt;&#x2F;code&gt; 表示每一个顶点(VetexAttrib)的 &lt;code&gt;position&lt;&#x2F;code&gt; 属性部分&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;fragmentshader&quot;&gt;&lt;code&gt;FragmentShader&lt;&#x2F;code&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;在本次示例中，&lt;code&gt;FragmentShader&lt;&#x2F;code&gt; 用来控制颜色(color):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;std::string fragmentShader =
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#version 330 core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;layout(location = 0) out vec4 color;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;void main() {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    color = vec4(0.0, 1.0, 0.0, 1.0);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 0: 黑色 1: 白色 范围: 0-1 (类比 0-255) 顺序: rgba
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;bian-yi-shader-dai-ma&quot;&gt;编译 &lt;code&gt;Shader&lt;&#x2F;code&gt; 代码&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;glcreateshader&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glCreateShader&quot;&gt;GlCreateShader&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;编译 &lt;code&gt;Shader&lt;&#x2F;code&gt; 代码之前，需要先创建一个 &lt;code&gt;Shader&lt;&#x2F;code&gt; 对象，函数返回 &lt;code&gt;Shader&lt;&#x2F;code&gt; 描述符在之后所有 &lt;code&gt;Shader&lt;&#x2F;code&gt; 相关操作中使用:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;GLuint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glCreateShader&lt;&#x2F;span&gt;&lt;span&gt;(GLenum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shaderType&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shaderType&lt;&#x2F;code&gt;: &lt;code&gt;Shader&lt;&#x2F;code&gt; 的类型，可取值:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GL_COMPUTE_SHADER&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_VERTEX_SHADER&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_TESS_CONTROL_SHADER&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_TESS_EVALUATION_SHADER&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_GEOMETRY_SHADER&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GL_FRAGMENT_SHADER&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;返回值: &lt;code&gt;Shader&lt;&#x2F;code&gt; 描述符&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;glshadersource&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glShaderSource&quot;&gt;GlShaderSource&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;有了 &lt;code&gt;Shader&lt;&#x2F;code&gt; 之后，需要设置(替换) &lt;code&gt;Shader&lt;&#x2F;code&gt; 中的代码:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glShaderSource&lt;&#x2F;span&gt;&lt;span&gt;(GLuint          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shader&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    GLsizei         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; GLchar ** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; GLint *   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shader&lt;&#x2F;code&gt;: 目标 &lt;code&gt;Shader&lt;&#x2F;code&gt; 描述符&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;count&lt;&#x2F;code&gt;: &lt;code&gt;string&lt;&#x2F;code&gt; 数组与 &lt;code&gt;length&lt;&#x2F;code&gt; 数组的长度&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;string&lt;&#x2F;code&gt;: 加载到 &lt;code&gt;Shader&lt;&#x2F;code&gt; 的字符串数组&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;length&lt;&#x2F;code&gt;: 字符串长度数组，与 &lt;code&gt;string&lt;&#x2F;code&gt; 相对应。如果 &lt;code&gt;length&lt;&#x2F;code&gt; 参数为 &lt;code&gt;NULL&lt;&#x2F;code&gt;，则假设每一个字符串以 &lt;code&gt;null&lt;&#x2F;code&gt; 结束。否则，则认为每一个元素表示相对应字符串的长度，小于 0 同样被认为以 &lt;code&gt;null&lt;&#x2F;code&gt; 结束。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;使用传入的 &lt;code&gt;string&lt;&#x2F;code&gt; 参数设置 &lt;code&gt;Shader&lt;&#x2F;code&gt; 的源代码，原有代码会被完全替换。并且，根据函数可知，一个 &lt;code&gt;Shader&lt;&#x2F;code&gt; 可以设置多份源代码。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;glcompileshader&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glCompileShader&quot;&gt;GlCompileShader&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;与 &lt;code&gt;c&#x2F;c++&lt;&#x2F;code&gt; 编写的程序一样，需要经过编译操作才能被执行，同样 &lt;code&gt;Shader&lt;&#x2F;code&gt; 代码也需要被编译，传入之前创建的 &lt;code&gt;Shader&lt;&#x2F;code&gt; 描述符:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glCompileShader&lt;&#x2F;span&gt;&lt;span&gt;(GLuint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shader&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shader&lt;&#x2F;code&gt;: &lt;code&gt;Shader&lt;&#x2F;code&gt; 描述符&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;bian-yi-bu-fen-wan-zheng-dai-ma&quot;&gt;编译部分完整代码&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static unsigned int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ComplieShader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glCreateShader&lt;&#x2F;span&gt;&lt;span&gt;(type);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char&lt;&#x2F;span&gt;&lt;span&gt;* src = source.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c_str&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glShaderSource&lt;&#x2F;span&gt;&lt;span&gt;(id, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;src, nullptr);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glCompileShader&lt;&#x2F;span&gt;&lt;span&gt;(id);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glGetShaderiv&lt;&#x2F;span&gt;&lt;span&gt;(id, GL_COMPILE_STATUS, &amp;amp;result);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 错误处理
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(GL_FALSE == result) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glGetShaderiv&lt;&#x2F;span&gt;&lt;span&gt;(id, GL_INFO_LOG_LENGTH, &amp;amp;length);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;* message = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;*)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alloca&lt;&#x2F;span&gt;&lt;span&gt;(length * sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glGetShaderInfoLog&lt;&#x2F;span&gt;&lt;span&gt;(id, length, &amp;amp;length, message);
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &amp;lt;&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed compile &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;            ((type == GL_VERTEX_SHADER) ? &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vertex&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fragment&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;lt;&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; shader: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; source &amp;lt;&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; message &amp;lt;&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;            std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glDeleteShader&lt;&#x2F;span&gt;&lt;span&gt;(id);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; id;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;chuang-jian-program&quot;&gt;创建 &lt;code&gt;Program&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;glcreateprogram&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glCreateProgram&quot;&gt;GlCreateProgram&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;首先需要创建一个程序对象，可以类比为一个可执行程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;GLuint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glCreateProgram&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;glattachshader&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glAttachShader&quot;&gt;GlAttachShader&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;一个完整的 &lt;code&gt;Shader&lt;&#x2F;code&gt; 程序可能需要由若干个 &lt;code&gt;Shader&lt;&#x2F;code&gt; 组成，因此需要有一种将他们链接到一起的机制。&lt;code&gt;glAttachShader&lt;&#x2F;code&gt; 函数的作用是在链接之前，将 &lt;code&gt;Shader&lt;&#x2F;code&gt; 添加到 &lt;code&gt;Program&lt;&#x2F;code&gt; 上。可以类比为 &lt;code&gt;Cmake&lt;&#x2F;code&gt; 中的 &lt;code&gt;target_link_libraries&lt;&#x2F;code&gt; 函数，&lt;code&gt;program&lt;&#x2F;code&gt; 是 &lt;code&gt;executable&lt;&#x2F;code&gt;，&lt;code&gt;shader&lt;&#x2F;code&gt; 是 &lt;code&gt;libraries&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glAttachShader&lt;&#x2F;span&gt;&lt;span&gt;(GLuint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;program&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    GLuint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shader&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;program&lt;&#x2F;code&gt;: 程序描述符&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;shader&lt;&#x2F;code&gt;: &lt;code&gt;Shader&lt;&#x2F;code&gt; 描述符&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;gllinkprogram&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glLinkProgram&quot;&gt;GlLinkProgram&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;当所有必要的 &lt;code&gt;Shader&lt;&#x2F;code&gt; 都添加到 &lt;code&gt;program&lt;&#x2F;code&gt; 上之后，就可以将他们链接起来了。类似于 &lt;code&gt;c&#x2F;c++&lt;&#x2F;code&gt; 程序的链接阶段。&lt;&#x2F;p&gt;
&lt;p&gt;将 &lt;code&gt;program&lt;&#x2F;code&gt; 关联的所有 &lt;code&gt;Shader&lt;&#x2F;code&gt; 链接到一起，并根据 &lt;code&gt;Shader&lt;&#x2F;code&gt; 的类型，创建可执行程序交给相应的可编程处理器执行。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glLinkProgram&lt;&#x2F;span&gt;&lt;span&gt;(GLuint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;program&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;lian-jie-jie-duan-wan-zheng-dai-ma&quot;&gt;链接阶段完整代码&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; CreateProgram 输入 Shader 源码，返回相应的 Shader 程序
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static unsigned int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;CreateProgram&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vertexShader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fragmentShader&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; program = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glCreateProgram&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; vs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ComplieShader&lt;&#x2F;span&gt;&lt;span&gt;(GL_VERTEX_SHADER, vertexShader);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; fs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ComplieShader&lt;&#x2F;span&gt;&lt;span&gt;(GL_FRAGMENT_SHADER, fragmentShader);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glAttachShader&lt;&#x2F;span&gt;&lt;span&gt;(program, vs);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glAttachShader&lt;&#x2F;span&gt;&lt;span&gt;(program, fs);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glLinkProgram&lt;&#x2F;span&gt;&lt;span&gt;(program);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glValidateProgram&lt;&#x2F;span&gt;&lt;span&gt;(program);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glDeleteShader&lt;&#x2F;span&gt;&lt;span&gt;(vs);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glDeleteShader&lt;&#x2F;span&gt;&lt;span&gt;(fs);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; program;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;zhi-xing-shader-cheng-xu&quot;&gt;执行 Shader 程序&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;gluseprogram&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;gl4&#x2F;glUseProgram&quot;&gt;GlUseProgram&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;正确链接的程序，需要通过 &lt;code&gt;glUseProgram&lt;&#x2F;code&gt; 函数显式执行才能进行渲染，类似于 &lt;code&gt;c&#x2F;c++&lt;&#x2F;code&gt; 代码编译之后执行 &lt;code&gt;.&#x2F;a.out&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glUseProgram&lt;&#x2F;span&gt;&lt;span&gt;(GLuint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;program&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;需要在进入主渲染循环之前调用该函数。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>使用 GLEW 库开发 OpenGL</title>
		<published>2022-01-30T15:10:06+00:00</published>
		<updated>2022-01-30T15:10:06+00:00</updated>
		<link href="https://blog.kiyoko.io/opengl-02/" type="text/html"/>
		<id>https://blog.kiyoko.io/opengl-02/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;glew.sourceforge.net&#x2F;&quot;&gt;&lt;code&gt;GLEW&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; 是一个跨平台开源的 &lt;code&gt;c&#x2F;c++&lt;&#x2F;code&gt; 扩展加载库。将下载的&lt;a href=&quot;https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;glew&#x2F;files&#x2F;glew&#x2F;2.1.0&#x2F;glew-2.1.0-win32.zip&#x2F;download&quot;&gt;&lt;code&gt;GLEW&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;安装到如下目录:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└─dependencies
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└─glew-2.1.0
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├─bin
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;  └─Release
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;      ├─Win32
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;      └─x64
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├─doc
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├─include
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;  └─GL
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└─lib
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└─Release
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├─Win32
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└─x64
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;pei-zhi-huan-jing&quot;&gt;配置环境&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;Configuration Properties&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;C&#x2F;C++&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;General&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Additional Include Directories&lt;&#x2F;code&gt; 添加 &lt;code&gt;$(SolutionDir)dependencies\glew-2.1.0\include&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;Configuration Properties&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Linker&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;General&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Additional Library Directories&lt;&#x2F;code&gt; 添加 &lt;code&gt;$(SolutionDir)dependencies\glew-2.1.0\lib\Release\Win32&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;Configuration Properties&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Linker&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Input&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Additional Dependencies&lt;&#x2F;code&gt; 添加 &lt;code&gt;glew32s.lib&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;值得注意的是:&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;lib&lt;&#x2F;code&gt; 文件夹下存在两个文件，其使用场景不同:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;glew32.lib&lt;&#x2F;code&gt;: 需要配合 &lt;code&gt;dll&lt;&#x2F;code&gt; 一起作为动态链接库使用&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;glew32s.lib&lt;&#x2F;code&gt;: 用于静态链接&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zhu-yi-shi-xiang&quot;&gt;注意事项&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;tou-wen-jian&quot;&gt;头文件&lt;&#x2F;h3&gt;
&lt;p&gt;在引入 &lt;code&gt;&amp;lt;GL&#x2F;glew.h&amp;gt;&lt;&#x2F;code&gt; 文件时，&lt;code&gt;#include &amp;lt;GL&#x2F;glew.h&amp;gt;&lt;&#x2F;code&gt; 必须写在其他 &lt;code&gt;OpenGL&lt;&#x2F;code&gt; 的引用语句之前，否则会出现错误:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;1&amp;gt;C:\Users\divinerapier\Documents\code\opengl\opengl\dependencies\glew-2.1.0\include\GL\glew.h(85,1): fatal error C1189: #error:  gl.h included before glew.h
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是因为，在 &lt;code&gt;&amp;lt;GL&#x2F;glew.h&amp;gt;&lt;&#x2F;code&gt; 文件中会进行判断:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#if defined&lt;&#x2F;span&gt;&lt;span&gt;(__gl_h_) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defined&lt;&#x2F;span&gt;&lt;span&gt;(__GL_H__) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defined&lt;&#x2F;span&gt;&lt;span&gt;(_GL_H) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defined&lt;&#x2F;span&gt;&lt;span&gt;(__X_GL_H)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gl.h included before glew.h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;要求引入 &lt;code&gt;&amp;lt;GL&#x2F;glew.h&amp;gt;&lt;&#x2F;code&gt; 文件之前，不能有 &lt;code&gt;__gl_h_&lt;&#x2F;code&gt; 等宏定义。因此，应该写作:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GL&#x2F;glew.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GLFW&#x2F;glfw3.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;chu-shi-hua&quot;&gt;初始化&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;GLFW&lt;&#x2F;code&gt; 与 &lt;code&gt;GLEW&lt;&#x2F;code&gt; 都需要初始化，那应该按照什么顺序，谁先谁后? 在 &lt;code&gt;GLEW&lt;&#x2F;code&gt; 的&lt;a href=&quot;http:&#x2F;&#x2F;glew.sourceforge.net&#x2F;basic.html&quot;&gt;官网&lt;&#x2F;a&gt;中有说明:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;First you need to create a valid OpenGL rendering context and call glewInit() to initialize the extension entry points. If glewInit() returns GLEW_OK, the initialization succeeded and you can use the available extensions as well as core OpenGL functionality.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;就是应该先初始化 &lt;code&gt;GLEW&lt;&#x2F;code&gt; 之外的其他库，并创建好有效的渲染窗体(a valid OpenGL rendering context)，之后才能调用 &lt;code&gt;glewInit()&lt;&#x2F;code&gt; 函数。即代码中应该:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    GLFWwindow* window;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Initialize the library *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glfwInit&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Create a windowed mode window and its OpenGL context *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    window = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glfwCreateWindow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;640&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;480&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello World&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!window) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glfwTerminate&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Make the window&amp;#39;s context current *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glfwMakeContextCurrent&lt;&#x2F;span&gt;&lt;span&gt;(window);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glewInit&lt;&#x2F;span&gt;&lt;span&gt;() != GLEW_OK) {
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ohhhhhhhhh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;yu-chu-li-hong-ding-yi&quot;&gt;预处理宏定义&lt;&#x2F;h3&gt;
&lt;p&gt;上述代码在运行的时候会遇到一个链接错误:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;1&amp;gt;Application.obj : error LNK2019: unresolved external symbol __imp__glewInit@0 referenced in function _main&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;即找不到函数 &lt;code&gt;glewInit&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;这个问题只要看一下 &lt;code&gt;glewInit&lt;&#x2F;code&gt; 定义就能明白:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;GLEWAPI GLenum GLEWAPIENTRY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;glewInit &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再跳转到 &lt;code&gt;GLEWAPI&lt;&#x2F;code&gt; 的宏定义:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#ifdef&lt;&#x2F;span&gt;&lt;span&gt; GLEW_STATIC
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#  define &lt;&#x2F;span&gt;&lt;span&gt;GLEWAPI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#  ifdef&lt;&#x2F;span&gt;&lt;span&gt; GLEW_BUILD
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#    define &lt;&#x2F;span&gt;&lt;span&gt;GLEWAPI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern __declspec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;dllexport&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#  else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#    define &lt;&#x2F;span&gt;&lt;span&gt;GLEWAPI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern __declspec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;dllimport&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#  endif
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以发现，由于 &lt;code&gt;GLEW_STATIC&lt;&#x2F;code&gt; 与 &lt;code&gt;GLEW_BUILD&lt;&#x2F;code&gt; 均未定义，因此，会使用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;define GLEWAPI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern __declspec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;dllimport&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;解决办法就是定义 &lt;code&gt;GLEW_STATIC&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;Configuration Properties&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;C&#x2F;C++&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Preprocessor&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Preprocessor Definitions&lt;&#x2F;code&gt; 中添加 &lt;code&gt;GLEW_STATIC&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wen-dang&quot;&gt;文档&lt;&#x2F;h2&gt;
&lt;p&gt;在&lt;a href=&quot;https:&#x2F;&#x2F;docs.gl&#x2F;&quot;&gt;文档&lt;&#x2F;a&gt;上可以直接使用函数名进行搜索。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>搭建 OpenGL 环境环境</title>
		<published>2022-01-30T14:51:20+00:00</published>
		<updated>2022-01-30T14:51:20+00:00</updated>
		<link href="https://blog.kiyoko.io/opengl-01/" type="text/html"/>
		<id>https://blog.kiyoko.io/opengl-01/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;Windows 11&lt;&#x2F;li&gt;
&lt;li&gt;VS 2022&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;glfw&#x2F;glfw&#x2F;releases&#x2F;download&#x2F;3.3.6&#x2F;glfw-3.3.6.zip&quot;&gt;GLFW 3.3.6&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;使用 &lt;code&gt;VS 2022&lt;&#x2F;code&gt; 新建一个 &lt;code&gt;c&#x2F;c++&lt;&#x2F;code&gt; 的空项目，在解决方案目录下创建 &lt;code&gt;dependencies&lt;&#x2F;code&gt; 目录，并以如下目录结构下载 &lt;code&gt;GLFW&lt;&#x2F;code&gt; 依赖库。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└─dependencies
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└─glfw
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├─include
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;  └─GLFW
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└─lib-vc2022
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;huan-jing-pei-zhi&quot;&gt;环境配置&lt;&#x2F;h2&gt;
&lt;p&gt;右键点击项目，进入 &lt;code&gt;properties&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;将 &lt;code&gt;Configuration&lt;&#x2F;code&gt; 设置为 &lt;code&gt;All Configurations&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;Configuration Properties&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;C&#x2F;C++&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;General&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Additional Include Directories&lt;&#x2F;code&gt; 添加 &lt;code&gt;$(SolutionDir)dependencies\glfw\include&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;Configuration Properties&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Linker&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;General&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Additional Library Directories&lt;&#x2F;code&gt; 添加 &lt;code&gt;$(SolutionDir)dependencies\glfw\lib-vc2022&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;Configuration Properties&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Linker&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Input&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Additional Dependencies&lt;&#x2F;code&gt; 添加 &lt;code&gt;glfw3.lib&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dai-ma&quot;&gt;代码&lt;&#x2F;h2&gt;
&lt;p&gt;源码来自 &lt;a href=&quot;https:&#x2F;&#x2F;www.glfw.org&#x2F;documentation.html&quot;&gt;GLFW&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GLFW&#x2F;glfw3.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    GLFWwindow* window;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Initialize the library *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glfwInit&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Create a windowed mode window and its OpenGL context *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    window = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glfwCreateWindow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;640&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;480&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello World&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!window) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glfwTerminate&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Make the window&amp;#39;s context current *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glfwMakeContextCurrent&lt;&#x2F;span&gt;&lt;span&gt;(window);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Loop until the user closes the window *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glfwWindowShouldClose&lt;&#x2F;span&gt;&lt;span&gt;(window)) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Render here *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glClear&lt;&#x2F;span&gt;&lt;span&gt;(GL_COLOR_BUFFER_BIT);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glBegin&lt;&#x2F;span&gt;&lt;span&gt;(GL_TRIANGLES);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glVertex2f&lt;&#x2F;span&gt;&lt;span&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glVertex2f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glVertex2f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glEnd&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Swap front and back buffers *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glfwSwapBuffers&lt;&#x2F;span&gt;&lt;span&gt;(window);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Poll for and process events *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glfwPollEvents&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;glfwTerminate&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;chang-jian-cuo-wu&quot;&gt;常见错误&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;wen-ti-1-application-obj-error-lnk2019-unresolved-external-symbol-imp-glclear-4-referenced-in-function-main&quot;&gt;问题: &lt;code&gt;1&amp;gt;Application.obj : error LNK2019: unresolved external symbol __imp__glClear@4 referenced in function _main&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Configuration Properties&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Linker&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Input&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Additional Dependencies&lt;&#x2F;code&gt; 添加 &lt;code&gt;opengl32.lib&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-ti-1-glfw3-lib-win32-init-obj-error-lnk2019-unresolved-external-symbol-imp-translatemessage-4-referenced-in-function-glfwplatforminit&quot;&gt;问题: &lt;code&gt;1&amp;gt;glfw3.lib(win32_init.obj) : error LNK2019: unresolved external symbol __imp__TranslateMessage@4 referenced in function __glfwPlatformInit&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在 &lt;code&gt;google.com&lt;&#x2F;code&gt; 中搜索 &lt;code&gt;TranslateMessage&lt;&#x2F;code&gt; 进入 &lt;code&gt;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;&lt;&#x2F;code&gt; 的链接，在最下方可以找到 &lt;code&gt;Library User32.lib&lt;&#x2F;code&gt;，将 &lt;code&gt;User32.lib&lt;&#x2F;code&gt; 添加到 &lt;code&gt;Configuration Properties&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Linker&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Input&lt;&#x2F;code&gt; &amp;gt; &lt;code&gt;Additional Dependencies&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>&#x27;ldconfig: &#x2F;usr&#x2F;lib&#x2F;wsl&#x2F;lib&#x2F;libcuda.so.1 is not a symbolic link&#x27;</title>
		<published>2022-01-17T21:27:28+00:00</published>
		<updated>2022-01-17T21:27:28+00:00</updated>
		<link href="https://blog.kiyoko.io/ldconfig-usr-lib-wsl-lib-libcuda-so-1-is-not-a-symbolic-link/" type="text/html"/>
		<id>https://blog.kiyoko.io/ldconfig-usr-lib-wsl-lib-libcuda-so-1-is-not-a-symbolic-link/</id>
		<content type="html">&lt;h3 id=&quot;huan-jing&quot;&gt;环境&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;版本          Windows 11 专业版
&lt;&#x2F;span&gt;&lt;span&gt;版本          21H2
&lt;&#x2F;span&gt;&lt;span&gt;安装日期       2022&#x2F;1&#x2F;13
&lt;&#x2F;span&gt;&lt;span&gt;操作系统版本   22000.466
&lt;&#x2F;span&gt;&lt;span&gt;体验          Windows 功能体验包 1000.22000.466.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; xeon 5.10.16.3-microsoft-standard-WSL2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 GNU&#x2F;Linux
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nvidia-smi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Mon&lt;&#x2F;span&gt;&lt;span&gt; Jan 17 21:32:44 2022
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+-----------------------------------------------------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NVIDIA-SMI&lt;&#x2F;span&gt;&lt;span&gt; 495.53       Driver Version: 497.29       CUDA Version: 11.5     |
&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-------------------------------+----------------------+----------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GPU&lt;&#x2F;span&gt;&lt;span&gt;  Name        Persistence-M| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Bus-Id&lt;&#x2F;span&gt;&lt;span&gt;        Disp.A | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Volatile&lt;&#x2F;span&gt;&lt;span&gt; Uncorr. ECC |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fan&lt;&#x2F;span&gt;&lt;span&gt;  Temp  Perf  Pwr:Usage&#x2F;Cap|         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Memory-Usage &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GPU-Util&lt;&#x2F;span&gt;&lt;span&gt;  Compute M. |
&lt;&#x2F;span&gt;&lt;span&gt;|                               |                      |               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MIG&lt;&#x2F;span&gt;&lt;span&gt; M. |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|===============================+======================+======================&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;|   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;  NVIDIA GeForce ...  On   | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;00000000:01:00.0&lt;&#x2F;span&gt;&lt;span&gt;  On |                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N&#x2F;A &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;%   51C    P0    76W &#x2F; 310W |   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2225MiB&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;  8192MiB |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N&#x2F;A&lt;&#x2F;span&gt;&lt;span&gt;      Default |
&lt;&#x2F;span&gt;&lt;span&gt;|                               |                      |                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N&#x2F;A &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+-------------------------------+----------------------+----------------------+
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+-----------------------------------------------------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Processes:                                                                  &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GPU&lt;&#x2F;span&gt;&lt;span&gt;   GI   CI        PID   Type   Process name                  GPU Memory |
&lt;&#x2F;span&gt;&lt;span&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;   ID                                                   Usage      |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|=============================================================================&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;No&lt;&#x2F;span&gt;&lt;span&gt; running processes found                                                 |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+-----------------------------------------------------------------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;wen-ti&quot;&gt;问题&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo ldconfig
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ldconfig:&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;lib&#x2F;wsl&#x2F;lib&#x2F;libcuda.so.1 is not a symbolic link
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jie-jue-fang-fa&quot;&gt;解决方法&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用管理员权限执行 &lt;code&gt;cmd&lt;&#x2F;code&gt; 命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;c:\Users\david&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; c:\Windows\System32\lxss\lib
&lt;&#x2F;span&gt;&lt;span&gt;c:\Windows\System32\lxss\lib&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;del&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;s &#x2F;q &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;libcuda.so&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;c:\Windows\System32\lxss\lib&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;del&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;s &#x2F;q &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;libcuda.so.1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;c:\Windows\System32\lxss\lib&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mklink&lt;&#x2F;span&gt;&lt;span&gt; libcuda.so libcuda.so.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;c:\Windows\System32\lxss\lib&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mklink&lt;&#x2F;span&gt;&lt;span&gt; libcuda.so.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; libcuda.so.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;wsl&lt;&#x2F;code&gt; 中执行:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ldconfig
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;yuan-yin&quot;&gt;原因&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;nvidia&lt;&#x2F;code&gt; 的驱动程序没有将 &lt;code&gt;so&lt;&#x2F;code&gt; 文件以软连接的形式创建，而通过 &lt;code&gt;man ldconfig&lt;&#x2F;code&gt; 命令可知:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;    Note that ldconfig  will only look at files that are named lib*.so* (for regular shared objects) or ld-*.so* (for the dynamic loader itself).  Other files will be ignored. Also, ldconfig expects a certain pattern to how the symlinks are set up, like this example, where the middle file (libfoo.so.1 here) is the SONAME for the library:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    libfoo.so -&amp;gt; libfoo.so.1 -&amp;gt; libfoo.so.1.12
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;ldconfig&lt;&#x2F;code&gt; 期望的文件是符合一定格式的 &lt;code&gt;symlinks&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;issueexplorer.com&#x2F;issue&#x2F;yuk7&#x2F;ArchWSL&#x2F;248&quot;&gt;https:&#x2F;&#x2F;issueexplorer.com&#x2F;issue&#x2F;yuk7&#x2F;ArchWSL&#x2F;248&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Arch Linux 安装 fakeroot</title>
		<published>2021-07-10T11:47:19+00:00</published>
		<updated>2021-07-10T11:47:19+00:00</updated>
		<link href="https://blog.kiyoko.io/archlinux-base-devel/" type="text/html"/>
		<id>https://blog.kiyoko.io/archlinux-base-devel/</id>
		<content type="html">&lt;p&gt;在安装 &lt;code&gt;kodi-standalone-service&lt;&#x2F;code&gt; 时遇到错误:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yay -S&lt;&#x2F;span&gt;&lt;span&gt; kodi-standalone-service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; ERROR: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cannot&lt;&#x2F;span&gt;&lt;span&gt; find the fakeroot binary.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt; making: kodi-standalone-service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;错误原因为: &lt;strong&gt;Cannot find the fakeroot binary.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有两种方式解决:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; pacman&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -S&lt;&#x2F;span&gt;&lt;span&gt; fakeroot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; pacman&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -S&lt;&#x2F;span&gt;&lt;span&gt; base-devel
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>tokio stream</title>
		<published>2021-05-30T17:15:46+00:00</published>
		<updated>2021-05-30T17:15:46+00:00</updated>
		<link href="https://blog.kiyoko.io/tokio-stream-01/" type="text/html"/>
		<id>https://blog.kiyoko.io/tokio-stream-01/</id>
		<content type="html">&lt;p&gt;如下所示代码，&lt;code&gt;sleep&lt;&#x2F;code&gt; 代替实际可能遇到的其他 &lt;code&gt;async&lt;&#x2F;code&gt; 函数，即希望通过使用 &lt;code&gt;async&lt;&#x2F;code&gt; 配合 &lt;code&gt;adaptor&lt;&#x2F;code&gt; 的组合处理 &lt;code&gt;iterator&lt;&#x2F;code&gt;。显然，如下代码无法通过编译，因为不允许在 &lt;code&gt;non-async&lt;&#x2F;code&gt; 代码块中使用 &lt;code&gt;.await&lt;&#x2F;code&gt;。而且，也不允许传入 &lt;code&gt;async&lt;&#x2F;code&gt; 函数给 &lt;code&gt;fold&lt;&#x2F;code&gt;。可以尝试的一种方法是通过 &lt;code&gt;futures::executor::block_on&lt;&#x2F;code&gt; 将 &lt;code&gt;async&lt;&#x2F;code&gt; 函数转换为 &lt;code&gt;non-async&lt;&#x2F;code&gt; 函数，但这个方法看起来有些蠢笨。好在，在 &lt;code&gt;async&lt;&#x2F;code&gt; 环境中存在 &lt;code&gt;stream&lt;&#x2F;code&gt; 可以使用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::time::Duration;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::StreamExt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::time::sleep;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(flavor = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;multi_thread&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, worker_threads = 2)]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles = vec![];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; index in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; h = tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_micros(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;                a + b * b
&lt;&#x2F;span&gt;&lt;span&gt;            });
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;finish index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; res: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index, res);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(h);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; h in handles {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _res = h.await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;stream&quot;&gt;Stream&lt;&#x2F;h2&gt;
&lt;p&gt;根据&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;stream&#x2F;index.html&quot;&gt;文档&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If futures are asynchronous values, then streams are asynchronous iterators. If you’ve found yourself with an asynchronous collection of some kind, and needed to perform an operation on the elements of said collection, you’ll quickly run into ‘streams’. Streams are heavily used in idiomatic asynchronous Rust code, so it’s worth becoming familiar with them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;核心内容: &lt;code&gt;stream&lt;&#x2F;code&gt; 就是 &lt;code&gt;async&lt;&#x2F;code&gt; 编程中的 &lt;code&gt;iterator&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;iterator-stream&quot;&gt;Iterator -&amp;gt; Stream&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;crate futures&lt;&#x2F;code&gt; 提供的函数 &lt;code&gt;futures::stream::iter&lt;&#x2F;code&gt; 可以将一个 &lt;code&gt;iterator&lt;&#x2F;code&gt; 转换为 &lt;code&gt;stream&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Converts an `Iterator` into a `Stream` which is always ready
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; to yield the next value.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Iterators in Rust don&amp;#39;t express the ability to block, so this adapter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; simply always calls `iter.next()` and returns that.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;I&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;: I) -&amp;gt; Iter&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;I::&lt;&#x2F;span&gt;&lt;span&gt;IntoIter&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    I: IntoIterator,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    assert_stream::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;I::&lt;&#x2F;span&gt;&lt;span&gt;Item, _&amp;gt;(Iter { iter: i.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;() })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;例如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  futures::executor::block_on(async {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::stream::{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, StreamExt};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stream = stream::iter(vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19&lt;&#x2F;span&gt;&lt;span&gt;], stream.collect::&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;().await);
&lt;&#x2F;span&gt;&lt;span&gt;  });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;shi-yong-stream-zhong-gou&quot;&gt;使用 Stream 重构&lt;&#x2F;h2&gt;
&lt;p&gt;整个重构的核心就是 &lt;code&gt;futures::stream::iter&lt;&#x2F;code&gt; 函数。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;main&lt;&#x2F;code&gt; 函数为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::time::Duration;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::StreamExt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::time::sleep;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(flavor = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;multi_thread&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, worker_threads = 2)]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start = std::time::Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; for_loop().await
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; for_each().await;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; map().await;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;elapsed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, start.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_secs_f64&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;各种重构代码分别位于 &lt;code&gt;for_loop&lt;&#x2F;code&gt;, &lt;code&gt;for_each&lt;&#x2F;code&gt;, &lt;code&gt;map&lt;&#x2F;code&gt; 中。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-for-loop&quot;&gt;使用 for-loop&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;for_loop&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles = vec![];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; index in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; h = tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res = futures::stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_nanos(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;                a + b * b
&lt;&#x2F;span&gt;&lt;span&gt;            });
&lt;&#x2F;span&gt;&lt;span&gt;            (index, res)
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(h);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; h in handles {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res = h.await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;. result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span&gt;await)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;start index: 0
&lt;&#x2F;span&gt;&lt;span&gt;start index: 1
&lt;&#x2F;span&gt;&lt;span&gt;start index: 2
&lt;&#x2F;span&gt;&lt;span&gt;start index: 3
&lt;&#x2F;span&gt;&lt;span&gt;start index: 4
&lt;&#x2F;span&gt;&lt;span&gt;start index: 5
&lt;&#x2F;span&gt;&lt;span&gt;start index: 6
&lt;&#x2F;span&gt;&lt;span&gt;start index: 7
&lt;&#x2F;span&gt;&lt;span&gt;start index: 8
&lt;&#x2F;span&gt;&lt;span&gt;start index: 9
&lt;&#x2F;span&gt;&lt;span&gt;start index: 10
&lt;&#x2F;span&gt;&lt;span&gt;start index: 11
&lt;&#x2F;span&gt;&lt;span&gt;start index: 12
&lt;&#x2F;span&gt;&lt;span&gt;start index: 13
&lt;&#x2F;span&gt;&lt;span&gt;start index: 14
&lt;&#x2F;span&gt;&lt;span&gt;start index: 15
&lt;&#x2F;span&gt;&lt;span&gt;index: 0. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 1. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 2. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 3. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 4. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 5. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 6. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 7. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 8. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 9. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 10. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 11. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 12. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 13. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 14. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;index: 15. result: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;elapsed: 20.4097263
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shi-yong-for-each&quot;&gt;使用 for-each&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    futures::stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res = futures::stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_nanos(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;                    a + b * b
&lt;&#x2F;span&gt;&lt;span&gt;                });
&lt;&#x2F;span&gt;&lt;span&gt;                println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;finish index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; res: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index, res.await);
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            .await;
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .await;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;start index: 0
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 0 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 1
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 1 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 2
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 2 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 3
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 3 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 4
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 4 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 5
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 5 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 6
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 6 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 7
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 7 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 8
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 8 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 9
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 9 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 10
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 10 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 11
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 11 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 12
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 12 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 13
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 13 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 14
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 14 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 15
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 15 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;elapsed: 35.0121356
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shi-yong-map&quot;&gt;使用 map&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handles = futures::stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res = futures::stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_nanos(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;                    a + b * b
&lt;&#x2F;span&gt;&lt;span&gt;                });
&lt;&#x2F;span&gt;&lt;span&gt;                println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;finish index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; res: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index, res.await);
&lt;&#x2F;span&gt;&lt;span&gt;            }).await
&lt;&#x2F;span&gt;&lt;span&gt;        }).collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;().await;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    async {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; h in handles {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a = h.await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }.await
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;start index: 0
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 0 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 1
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 1 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 2
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 2 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 3
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 3 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 4
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 4 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 5
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 5 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 6
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 6 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 7
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 7 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 8
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 8 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 9
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 9 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 10
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 10 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 11
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 11 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 12
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 12 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 13
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 13 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 14
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 14 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 15
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 15 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;elapsed: 34.9667163
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handles = futures::stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res = futures::stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_nanos(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;                    a + b * b
&lt;&#x2F;span&gt;&lt;span&gt;                });
&lt;&#x2F;span&gt;&lt;span&gt;                println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;finish index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; res: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index, res.await);
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;        }).collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;().await;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    async {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; h in handles {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a = h.await.await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }.await
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;start index: 0
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 0 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 1
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 1 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 2
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 2 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 3
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 3 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 4
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 4 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 5
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 5 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 6
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 6 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 7
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 7 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 8
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 8 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 9
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 9 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 10
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 10 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 11
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 11 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 12
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 12 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 13
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 13 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 14
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 14 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 15
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 15 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;elapsed: 35.0125656
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handles = futures::stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; h =tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res = futures::stream::iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fold&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(Duration::from_nanos(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;                    a + b * b
&lt;&#x2F;span&gt;&lt;span&gt;                });
&lt;&#x2F;span&gt;&lt;span&gt;                (index, res)
&lt;&#x2F;span&gt;&lt;span&gt;            });
&lt;&#x2F;span&gt;&lt;span&gt;            h
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .await;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    async {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; h in handles {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a = h.await.await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;finish index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; res: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span&gt;await);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    .await
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;start index: 0
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 0 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 1
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 1 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 2
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 2 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 3
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 3 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 4
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 4 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 5
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 5 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 6
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 6 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 7
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 7 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 8
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 8 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 9
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 9 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 10
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 10 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 11
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 11 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 12
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 12 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 13
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 13 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 14
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 14 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;start index: 15
&lt;&#x2F;span&gt;&lt;span&gt;finish index: 15 res: 332833500
&lt;&#x2F;span&gt;&lt;span&gt;elapsed: 35.442368
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;具体的时间差异以后再来分析。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>macro tokio::main</title>
		<published>2021-05-30T11:28:19+00:00</published>
		<updated>2021-05-30T11:28:19+00:00</updated>
		<link href="https://blog.kiyoko.io/tokio-main-macro/" type="text/html"/>
		<id>https://blog.kiyoko.io/tokio-main-macro/</id>
		<content type="html">&lt;p&gt;在各种讲解 &lt;code&gt;async&lt;&#x2F;code&gt; 编程的的文章中，其使用的示例代码基本都类似于:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::net::TcpListener;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::io::{AsyncReadExt, AsyncWriteExt};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; listener = TcpListener::bind(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1:8080&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).await?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; socket, _) = listener.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span&gt;().await?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buf = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; In a loop, read data from the socket and write the data back.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; socket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buf).await {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; socket closed
&lt;&#x2F;span&gt;&lt;span&gt;                    Ok(n) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    Ok(n) =&amp;gt; n,
&lt;&#x2F;span&gt;&lt;span&gt;                    Err(e) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        eprintln!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to read from socket; err = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Write the data back
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Err(e) = socket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;buf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..n]).await {
&lt;&#x2F;span&gt;&lt;span&gt;                    eprintln!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to write to socket; err = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用 &lt;code&gt;#[tokio::main]&lt;&#x2F;code&gt; 宏将 &lt;code&gt;async fn main&lt;&#x2F;code&gt; 函数转换成普通的 &lt;code&gt;fn main&lt;&#x2F;code&gt; 函数。但是却很少有文章说明更多关于 &lt;code&gt;#[tokio::main]&lt;&#x2F;code&gt; 的内容。&lt;&#x2F;p&gt;
&lt;p&gt;以下内容均来自官方&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;1.6.1&#x2F;tokio&#x2F;attr.main.html&quot;&gt;文档&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gai-shu&quot;&gt;概述&lt;&#x2F;h2&gt;
&lt;p&gt;在官方文档中说明了几点:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;方便为被标记的 &lt;code&gt;async&lt;&#x2F;code&gt; 函数创建响应的运行时，而无需开发者直接操作 &lt;code&gt;tokio::runtime::Runtime&lt;&#x2F;code&gt; 或者 &lt;code&gt;tokio::runtime::Builder&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;仅限于面向不需要复杂设置与功能的 &lt;code&gt;async&lt;&#x2F;code&gt; 函数，否则仍建议直接使用 &lt;code&gt;tokio::runtime::Builder&lt;&#x2F;code&gt; 配置。&lt;&#x2F;li&gt;
&lt;li&gt;除用于 &lt;code&gt;async fn main&lt;&#x2F;code&gt; 函数之外，同样可用于其他任何函数(之后称作&lt;strong&gt;一般函数&lt;&#x2F;strong&gt;)。在配合一般函数使用时，每次进行函数调用时均会启动一个&lt;strong&gt;新&lt;&#x2F;strong&gt;的 &lt;code&gt;tokio::runtime::Runtime&lt;&#x2F;code&gt;，且函数的行为等同于同步函数。推荐对于需要被经常调用的函数&lt;strong&gt;复用&lt;&#x2F;strong&gt;由 &lt;code&gt;tokio::runtime::Builder&lt;&#x2F;code&gt; 创建的 &lt;code&gt;tokio::runtime::Runtime&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chang-yong-pei-zhi&quot;&gt;常用配置&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;multi-threaded-runtime&quot;&gt;Multi-threaded runtime&lt;&#x2F;h3&gt;
&lt;p&gt;要使用 &lt;code&gt;Multi-threaded runtime&lt;&#x2F;code&gt; 功能，需要在 &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; 中启用 &lt;code&gt;rt-multi-thread&lt;&#x2F;code&gt; 功能:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.6&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;macros&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rt-multi-thread&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在启用 &lt;code&gt;rt-multi-thread&lt;&#x2F;code&gt; 功能后，默认工作线程数量为系统的 &lt;code&gt;cpu&lt;&#x2F;code&gt; 数量:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;等价于:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    tokio::runtime::Builder::new_multi_thread()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enable_all&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(async {
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也可以通过配置 &lt;code&gt;worker_thread&lt;&#x2F;code&gt; 选项来指定工作线程的数量:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(worker_threads = 2)]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;等价于:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    tokio::runtime::Builder::new_multi_thread()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;worker_threads&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enable_all&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(async {
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;current-thread-runtime&quot;&gt;Current thread runtime&lt;&#x2F;h3&gt;
&lt;p&gt;另一种是只是用单线程的模式:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(flavor = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;current_thread&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;等价于:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    tokio::runtime::Builder::new_current_thread()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enable_all&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(async {
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>在非 async 函数中执行 async 语句块</title>
		<published>2021-05-29T19:53:22+00:00</published>
		<updated>2021-05-29T19:53:22+00:00</updated>
		<link href="https://blog.kiyoko.io/run-async-block-in-non-async-function/" type="text/html"/>
		<id>https://blog.kiyoko.io/run-async-block-in-non-async-function/</id>
		<content type="html">&lt;p&gt;在使用 &lt;code&gt;mongodb&lt;&#x2F;code&gt;，在未启用 &lt;code&gt;#[feature = &amp;quot;sync&amp;quot;]&lt;&#x2F;code&gt; 时，解析 &lt;code&gt;url&lt;&#x2F;code&gt; 的函数是一个 &lt;code&gt;async&lt;&#x2F;code&gt; 函数:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; crate: mongodb::options
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ClientOptions {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;not&lt;&#x2F;span&gt;&lt;span&gt;(feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: impl AsRef&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::parse_uri(s, None).await
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;个人习惯，在业务项目中定义一个专属的配置类型:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ClientOptions {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;database&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;并为该类型实现 &lt;code&gt;From Trait&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;ClientOptions&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;mongodb::options::ClientOptions {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;: ClientOptions) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        todo!()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于，&lt;code&gt;Trait&lt;&#x2F;code&gt; 的函数签名是无法改动的，就导致需要在 &lt;code&gt;non-async&lt;&#x2F;code&gt; 函数中调用 &lt;code&gt;async&lt;&#x2F;code&gt; 函数。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chuang-jian-yi-ge-xin-de-runtime&quot;&gt;创建一个新的 Runtime&lt;&#x2F;h2&gt;
&lt;p&gt;通过查阅&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;1.6.1&#x2F;tokio&#x2F;&quot;&gt;文档&lt;&#x2F;a&gt;，根据关键字 &lt;code&gt;current&lt;&#x2F;code&gt; 查找到 &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;1.6.1&#x2F;tokio&#x2F;runtime&#x2F;struct.Builder.html#method.new_current_thread&quot;&gt;tokio::runtime::Builder::new_current_thread&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Builder {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Returns a new builder with the current thread scheduler selected.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Configuration methods can be chained on the return value.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; To spawn non-`Send` tasks on the resulting runtime, combine it with a
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; [`LocalSet`].
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; [`LocalSet`]: crate::task::LocalSet
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new_current_thread&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Builder {
&lt;&#x2F;span&gt;&lt;span&gt;        Builder::new(Kind::CurrentThread)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用当前线程创建一个调度器，看起来靠谱。由此，&lt;code&gt;from&lt;&#x2F;code&gt; 的实现如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::runtime::Builder as RuntimeBuilder
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;ClientOptions&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;mongodb::options::ClientOptions {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;: ClientOptions) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        RuntimeBuilder::new_current_thread()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(async {
&lt;&#x2F;span&gt;&lt;span&gt;                mongodb::options::ClientOptions::parse(opts.uri.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;                    .await
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但是，在执行时遇到一个错误:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thread &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; panicked at &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cannot start a runtime from within a runtime. This happens because a function (like `block_on`) attempted to block the current thread while the thread is being used to drive asynchronous tasks.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &#x2F;home&#x2F;divinerapier&#x2F;.cargo&#x2F;registry&#x2F;src&#x2F;github.com-1ecc6299db9ec823&#x2F;tokio-1.6.0&#x2F;src&#x2F;runtime&#x2F;enter.rs:39:9
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;提示，不能在 &lt;code&gt;Runtime&lt;&#x2F;code&gt; 中执行另一个 &lt;code&gt;Runtime&lt;&#x2F;code&gt;。这里的第一个 &lt;code&gt;Runtime&lt;&#x2F;code&gt; 应该就是由 &lt;code&gt;#[tokio::main]&lt;&#x2F;code&gt; 自动创建的。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-yong-dang-qian-de-runtime&quot;&gt;使用当前的 Runtime&lt;&#x2F;h2&gt;
&lt;p&gt;在根据关键字 &lt;code&gt;current&lt;&#x2F;code&gt; 查找文档是，还存在另一个结果 &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;1.6.1&#x2F;tokio&#x2F;runtime&#x2F;struct.Handle.html#method.current&quot;&gt;tokio::runtime::Handle::current&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Handle {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Returns a `Handle` view over the currently running `Runtime`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; # Panic
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; This will panic if called outside the context of a Tokio runtime. That means that you must
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; call this on one of the threads **being run by the runtime**. Calling this from within a
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; thread created by `std::thread::spawn` (for example) will cause a panic.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; # Examples
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; This can be used to obtain the handle of the surrounding runtime from an async
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; block or function running on that runtime.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; # use std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; # use tokio::runtime::Runtime;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; # fn dox() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; # let rt = Runtime::new().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; # rt.spawn(async {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; use tokio::runtime::Handle;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; &#x2F;&#x2F; Inside an async block or function.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; let handle = Handle::current();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; handle.spawn(async {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;     println!(&amp;quot;now running in the existing Runtime&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; # let handle =
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; thread::spawn(move || {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;     &#x2F;&#x2F; Notice that the handle is created outside of this thread and then moved in
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;     handle.spawn(async { &#x2F;* ... *&#x2F; })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;     &#x2F;&#x2F; This next line would cause a panic
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;     &#x2F;&#x2F; let handle2 = Handle::current();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; # handle.join().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; # });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; # }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;current&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        context::current().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CONTEXT_MISSING_ERROR&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过 &lt;code&gt;Handle::current&lt;&#x2F;code&gt; 函数可以获得当前的 &lt;code&gt;Runtime&lt;&#x2F;code&gt; 对象。&lt;&#x2F;p&gt;
&lt;p&gt;但是，需要注意，如下方式直接通过 &lt;code&gt;Handle&lt;&#x2F;code&gt; 调用 &lt;code&gt;Handle::block_on&lt;&#x2F;code&gt; 函数同样会遇到上面的错误。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;ClientOptions&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;mongodb::options::ClientOptions {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;: ClientOptions) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle = Handle::current();
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enter&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(async {})
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;应通过 &lt;code&gt;futures::executor::block_on&lt;&#x2F;code&gt; 函数来执行 &lt;code&gt;async&lt;&#x2F;code&gt; 函数。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;ClientOptions&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;mongodb::options::ClientOptions {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;: ClientOptions) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle = Handle::current();
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enter&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        futures::executor::block_on(async {
&lt;&#x2F;span&gt;&lt;span&gt;            mongodb::options::ClientOptions::parse(opts.uri.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;                .await
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;liang&quot;&gt;惊&lt;&#x2F;h3&gt;
&lt;p&gt;通过实验，只需要 &lt;code&gt;futures::executor::block_on&lt;&#x2F;code&gt; 函数就可以完成对 &lt;code&gt;async&lt;&#x2F;code&gt; 函数的调用。&lt;&#x2F;p&gt;
&lt;p&gt;上面就不改了，当做备忘录，避免以后采坑。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tong-guo-xin-de-xian-cheng-zhi-xing-async-han-shu&quot;&gt;通过新的线程执行 async 函数&lt;&#x2F;h2&gt;
&lt;p&gt;上面的一系列想法都是基于 &lt;strong&gt;复用当前线程&lt;&#x2F;strong&gt;，下面来尝试通过创建新的线程解决问题。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::runtime::Builder as RuntimeBuilder;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;ClientOptions&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;mongodb::options::ClientOptions {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;: ClientOptions) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;|| {
&lt;&#x2F;span&gt;&lt;span&gt;            RuntimeBuilder::new_current_thread()
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(async {
&lt;&#x2F;span&gt;&lt;span&gt;                    mongodb::options::ClientOptions::parse(opts.uri.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;                        .await
&lt;&#x2F;span&gt;&lt;span&gt;                        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                })
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;确认同样可以解决问题。&lt;&#x2F;p&gt;
&lt;p&gt;同样地，在新的线程中使用 &lt;code&gt;futures::executor::block_on&lt;&#x2F;code&gt; 同样可以解决问题。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;ClientOptions&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;mongodb::options::ClientOptions {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;: ClientOptions) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;|| {
&lt;&#x2F;span&gt;&lt;span&gt;            futures::executor::block_on(async {
&lt;&#x2F;span&gt;&lt;span&gt;                mongodb::options::ClientOptions::parse(opts.uri.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;                    .await
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;66280983&quot;&gt;how-do-i-await-a-future-inside-a-non-async-method-which-was-called-from-an-async&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>惊群效应问题</title>
		<published>2021-05-09T20:56:24+00:00</published>
		<updated>2021-05-09T20:56:24+00:00</updated>
		<link href="https://blog.kiyoko.io/thundering-herd-problem/" type="text/html"/>
		<id>https://blog.kiyoko.io/thundering-herd-problem/</id>
		<content type="html">&lt;p&gt;当计算机中存在大量的进程或线程被&lt;strong&gt;同一个事件&lt;&#x2F;strong&gt;唤醒，且该事件&lt;strong&gt;能且仅能&lt;&#x2F;strong&gt;被一个进程或线程响应的现象被称作&lt;strong&gt;惊群效应&lt;&#x2F;strong&gt;。此时，系统中相关的进程或线程都将争夺该资源，并大量浪费系统的性能。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;accept-liang-qun&quot;&gt;Accept 惊群&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;accept-liu-cheng&quot;&gt;Accept 流程&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;thndering-herd-problem&#x2F;01-accept.png&quot; alt=&quot;accept&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dai-ma-shi-li&quot;&gt;代码示例&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;arpa&#x2F;inet.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;assert.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;errno.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;netinet&#x2F;in.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;socket.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;types.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;wait.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unistd.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;SERVER_ADDRESS &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.0.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;SERVER_PORT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10086
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;WORKER_COUNT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;worker_process&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;listenfd&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;I am work &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, my pid is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, begin to accept connections &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, i,
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getpid&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; sockaddr_in client_info;
&lt;&#x2F;span&gt;&lt;span&gt;    socklen_t client_info_len = sizeof(client_info);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; connection =
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span&gt;(listenfd, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; sockaddr *)&amp;amp;client_info, &amp;amp;client_info_len);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(connection != -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; accept success&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, i);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ip :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inet_ntoa&lt;&#x2F;span&gt;&lt;span&gt;(client_info.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sin_addr&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;port: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, client_info.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sin_port&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; accept failed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, i);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(connection);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; sockaddr_in address;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bzero&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;address, sizeof(address));
&lt;&#x2F;span&gt;&lt;span&gt;  address.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sin_family &lt;&#x2F;span&gt;&lt;span&gt;= AF_INET;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inet_pton&lt;&#x2F;span&gt;&lt;span&gt;(AF_INET, SERVER_ADDRESS, &amp;amp;address.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sin_addr&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  address.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sin_port &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htons&lt;&#x2F;span&gt;&lt;span&gt;(SERVER_PORT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; listenfd = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span&gt;(PF_INET, SOCK_STREAM, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(listenfd, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; sockaddr *)&amp;amp;address, sizeof(address));
&lt;&#x2F;span&gt;&lt;span&gt;  ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(listenfd, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; WORKER_COUNT; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Create worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    pid_t pid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fork&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*child  process *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(pid == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;worker_process&lt;&#x2F;span&gt;&lt;span&gt;(listenfd, i);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(pid &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fork error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*wait child process*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; status;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;status);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;epoll&quot;&gt;EPOLL&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;nginx&quot;&gt;Nginx&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Thundering_herd_problem&quot;&gt;Wikipedia: Thundering herd problem&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.citi.umich.edu&#x2F;projects&#x2F;linux-scalability&#x2F;reports&#x2F;accept.html&quot;&gt;Linux scalability: Accept() scalability on Linux&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;torvalds&#x2F;linux&#x2F;commit&#x2F;df0108c5da561c66c333bb46bfe3c1fc65905898&quot;&gt;epoll: add EPOLLEXCLUSIVE flag&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;manjusaka.itscoder.com&#x2F;posts&#x2F;2019&#x2F;03&#x2F;28&#x2F;somthing-about-thundering-herd&#x2F;&quot;&gt;聊聊网络事件中的惊群效应&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.csdn.net&#x2F;lyztyycode&#x2F;article&#x2F;details&#x2F;78648798&quot;&gt;Linux惊群效应详解&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pureage.info&#x2F;2015&#x2F;12&#x2F;22&#x2F;thundering-herd.html&quot;&gt;accept 与 epoll 惊群&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>IO 模型</title>
		<published>2021-05-09T16:34:02+00:00</published>
		<updated>2021-05-09T16:34:02+00:00</updated>
		<link href="https://blog.kiyoko.io/io-multiplexing-io-models/" type="text/html"/>
		<id>https://blog.kiyoko.io/io-multiplexing-io-models/</id>
		<content type="html">&lt;p&gt;在 Unix&#x2F;Linux 系统中，存在五中 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 模型:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;阻塞式 I&#x2F;O&lt;&#x2F;li&gt;
&lt;li&gt;非阻塞式 I&#x2F;O&lt;&#x2F;li&gt;
&lt;li&gt;I&#x2F;O 复用 (select&#x2F;poll)&lt;&#x2F;li&gt;
&lt;li&gt;信号驱动式 I&#x2F;O (SIGIO)&lt;&#x2F;li&gt;
&lt;li&gt;异步 I&#x2F;O (aio_系列函数)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;一次输入操作通常会包括两个不同的阶段:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;等待数据准备好&lt;&#x2F;li&gt;
&lt;li&gt;将数据从内核复制到进程&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;而对于一个发生在套接字上的输入操作，第一步是等待数据从网络中到达。当目标分组到达时，数据将被复制到内核中的某个缓冲区。第二步是把数据从内核缓冲区复制到应用进程缓冲区。&lt;&#x2F;p&gt;
&lt;p&gt;在之后的例子中，以 &lt;code&gt;UDP&lt;&#x2F;code&gt; 为例，并将函数 &lt;code&gt;recvfrom&lt;&#x2F;code&gt; 视为系统调用。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zu-sai-shi-i-o-mo-xing&quot;&gt;阻塞式 I&#x2F;O 模型&lt;&#x2F;h2&gt;
&lt;p&gt;最流行，最常用的 I&#x2F;O 模型当属阻塞式 I&#x2F;O (blocking I&#x2F;O) 模型。并且，在默认情况下，所有的套接字都是阻塞式的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;io-multiplexing-io-models&#x2F;01-Blocking-IO-Model.png&quot; alt=&quot;图-Blocking-IO-Model&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fei-zu-sai-shi-i-o-mo-xing&quot;&gt;非阻塞式 I&#x2F;O 模型&lt;&#x2F;h2&gt;
&lt;p&gt;当进程将一个套接字设置成非阻塞式后，如果对其进行的 I&#x2F;O 操作会导致当前进程进入到睡眠状态，内核会直接返回一个错误，避免进程进入到睡眠状态。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;io-multiplexing-io-models&#x2F;02-Nonblocking-IO-Model.png&quot; alt=&quot;图-Blocking-IO-Model&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上图所示，前三次调用 &lt;code&gt;recvfrom&lt;&#x2F;code&gt; 时均没有已就绪的数据，因此内核立刻返回了错误 &lt;code&gt;EWOULDBLOCK&lt;&#x2F;code&gt;。而当第四次调用 &lt;code&gt;recvfrom&lt;&#x2F;code&gt; 时，已有数据准备就绪，内核此时就会将这部分数据返回给进程。&lt;&#x2F;p&gt;
&lt;p&gt;当应用进程如上图所示对一个非阻塞的文件描述符循环调用 &lt;code&gt;recvfrom&lt;&#x2F;code&gt; 时，该过程被称作 &lt;strong&gt;轮询 (polling)&lt;&#x2F;strong&gt;。该过程通常会消耗大量的 &lt;code&gt;CPU&lt;&#x2F;code&gt; 资源。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-o-fu-yong-mo-xing&quot;&gt;I&#x2F;O 复用模型&lt;&#x2F;h2&gt;
&lt;p&gt;目前主流系统系统了一种叫做 &lt;code&gt;I&#x2F;O 多路复用 (I&#x2F;O Multiplexing)&lt;&#x2F;code&gt; 的技术，允许一次监听多个文件描述符。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;io-multiplexing-io-models&#x2F;03-Multiplexing-IO-Model.png&quot; alt=&quot;图-Blocking-IO-Model&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对比 &lt;code&gt;I&#x2F;O 多路复用&lt;&#x2F;code&gt; 的处理过程与 &lt;code&gt;阻塞式 I&#x2F;O&lt;&#x2F;code&gt; 的处理过程，不难发现，阻塞式 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 模型的两个阶段均阻塞在 &lt;code&gt;recvfrom&lt;&#x2F;code&gt; 系统调用上，而 &lt;code&gt;I&#x2F;O 多路复用&lt;&#x2F;code&gt; 模型将第一阶段阻塞在 &lt;code&gt;select&lt;&#x2F;code&gt; 系统调用上，而第二个阶段依然阻塞在 &lt;code&gt;recvfrom&lt;&#x2F;code&gt; 上。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xin-hao-qu-dong-shi-i-o-mo-xing&quot;&gt;信号驱动式 I&#x2F;O 模型&lt;&#x2F;h2&gt;
&lt;p&gt;当内核在文件描述符就绪时发送 &lt;code&gt;SIGIO&lt;&#x2F;code&gt; 信号通知应用进程。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;io-multiplexing-io-models&#x2F;04-Signal-Driven-IO-Model.png&quot; alt=&quot;图-Blocking-IO-Model&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yi-bu-i-o&quot;&gt;异步 I&#x2F;O&lt;&#x2F;h2&gt;
&lt;p&gt;应用进程告知内核启动某个操作，并让内核在完成整个操作(包含两个阶段)后通知应用进程。该模型与信号驱动模型的区别在于: 信号驱动式I&#x2F;O由内核通知应用进程何时可以启动I&#x2F;O操作，而异步I&#x2F;O模型是有内核通知应用进程I&#x2F;O操作何时完成。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;io-multiplexing-io-models&#x2F;05-Asynchronous-IO-Model.png&quot; alt=&quot;图-Blocking-IO-Model&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man2&#x2F;sigaction.2.html&quot;&gt;MAN Page: sigaction&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;tlpi&#x2F;code&#x2F;online&#x2F;dist&#x2F;altio&#x2F;demo_sigio.c.html&quot;&gt;SIGIO demo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>conda</title>
		<published>2021-04-20T11:24:54+00:00</published>
		<updated>2021-04-20T11:24:54+00:00</updated>
		<link href="https://blog.kiyoko.io/conda/" type="text/html"/>
		<id>https://blog.kiyoko.io/conda/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.conda.io&#x2F;en&#x2F;latest&#x2F;miniconda.html#linux-installers&quot;&gt;https:&#x2F;&#x2F;docs.conda.io&#x2F;en&#x2F;latest&#x2F;miniconda.html#linux-installers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;repo.anaconda.com&#x2F;miniconda&#x2F;Miniconda3-py39_4.9.2-Linux-x86_64.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;conda.io&#x2F;projects&#x2F;conda&#x2F;en&#x2F;latest&#x2F;user-guide&#x2F;install&#x2F;linux.html&quot;&gt;https:&#x2F;&#x2F;conda.io&#x2F;projects&#x2F;conda&#x2F;en&#x2F;latest&#x2F;user-guide&#x2F;install&#x2F;linux.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;miniconda3&#x2F;bin&#x2F;conda&lt;&#x2F;span&gt;&lt;span&gt; init
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span&gt;RUN find &#x2F;miniconda3&#x2F;envs&#x2F;pyasr&#x2F;bin&#x2F; -type f -exec sed -i s&#x2F;&#x2F;home&#x2F;local&#x2F;&#x2F;g {} \;
&lt;&#x2F;span&gt;&lt;span&gt;RUN grep &amp;#39;local&amp;#39; -nR &#x2F;miniconda3&#x2F;envs&#x2F;pyasr&#x2F;bin
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 方式一，在一条命令中加载环境并执行命令
&lt;&#x2F;span&gt;&lt;span&gt;RUN . &#x2F;miniconda3&#x2F;etc&#x2F;profile.d&#x2F;conda.sh &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;   conda activate pyasr &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;   which python &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;   python --version &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;   which pip &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;   python -c &amp;quot;import torch&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 方式二，通过设置环境变量
&lt;&#x2F;span&gt;&lt;span&gt;ENV PATH &amp;quot;&#x2F;miniconda3&#x2F;envs&#x2F;pyasr&#x2F;bin:&#x2F;opt&#x2F;kaldi&#x2F;tools&#x2F;openfst&#x2F;bin:$PATH&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>MongoDB Cheat Sheet</title>
		<published>2021-04-09T13:59:07+00:00</published>
		<updated>2021-04-09T13:59:07+00:00</updated>
		<link href="https://blog.kiyoko.io/mongodb-cheat-sheet/" type="text/html"/>
		<id>https://blog.kiyoko.io/mongodb-cheat-sheet/</id>
		<content type="html">&lt;h2 id=&quot;mongorestore&quot;&gt;MongoRestore&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tldr mongorestore
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Local&lt;&#x2F;span&gt;&lt;span&gt; data is older than two weeks, use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --update&lt;&#x2F;span&gt;&lt;span&gt; to update it.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mongorestore
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Utility&lt;&#x2F;span&gt;&lt;span&gt; to import a collection or database from a binary dump into a MongoDB instance.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;More&lt;&#x2F;span&gt;&lt;span&gt; information: &amp;lt;https:&#x2F;&#x2F;docs.mongodb.com&#x2F;manual&#x2F;reference&#x2F;program&#x2F;mongorestore&amp;gt;.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; Import a bson data dump from a directory to a MongoDB database:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mongorestore --db&lt;&#x2F;span&gt;&lt;span&gt; database_name path&#x2F;to&#x2F;directory
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; Import a bson data dump from a directory to a given database in a MongoDB server host, running at a given port, with user authentication (user will be prompted for password)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mongorestore --host&lt;&#x2F;span&gt;&lt;span&gt; database_host:port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --db&lt;&#x2F;span&gt;&lt;span&gt; database_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --username&lt;&#x2F;span&gt;&lt;span&gt; username path&#x2F;to&#x2F;directory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --password
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; Import a collection from a bson file to a MongoDB database:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mongorestore --db&lt;&#x2F;span&gt;&lt;span&gt; database_name path&#x2F;to&#x2F;file
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; Import a collection from a bson file to a given database in a MongoDB server host, running at a given port, with user authentication (user will be prompted for password)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mongorestore --host&lt;&#x2F;span&gt;&lt;span&gt; database_host:port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --db&lt;&#x2F;span&gt;&lt;span&gt; database_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --username&lt;&#x2F;span&gt;&lt;span&gt; username path&#x2F;to&#x2F;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --password
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mongorestore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --host&lt;&#x2F;span&gt;&lt;span&gt; localhost:27017&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --db&lt;&#x2F;span&gt;&lt;span&gt; database&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --username&lt;&#x2F;span&gt;&lt;span&gt; root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --password&lt;&#x2F;span&gt;&lt;span&gt; pass12345 path&#x2F;to&#x2F;bson&#x2F;file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:52:15.562+0800&lt;&#x2F;span&gt;&lt;span&gt;    error connecting to host: could not connect to server: connection() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; auth error: sasl conversation error: unable to authenticate using mechanism &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SCRAM-SHA-1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: (AuthenticationFailed) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Authentication&lt;&#x2F;span&gt;&lt;span&gt; failed.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mongorestore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --host&lt;&#x2F;span&gt;&lt;span&gt; localhost:27017&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --db&lt;&#x2F;span&gt;&lt;span&gt; database&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --authenticationDatabase&lt;&#x2F;span&gt;&lt;span&gt; admin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --username&lt;&#x2F;span&gt;&lt;span&gt; root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --password&lt;&#x2F;span&gt;&lt;span&gt; pass12345 path&#x2F;to&#x2F;bson&#x2F;file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:53:45.918+0800&lt;&#x2F;span&gt;&lt;span&gt;    checking for collection data in path&#x2F;to&#x2F;bson&#x2F;file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:53:45.937+0800&lt;&#x2F;span&gt;&lt;span&gt;    reading metadata for testing.meta from path&#x2F;to&#x2F;bson&#x2F;file.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:53:45.958+0800&lt;&#x2F;span&gt;&lt;span&gt;    restoring testing.meta from path&#x2F;to&#x2F;bson&#x2F;file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:53:48.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;........................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  3.40MB&#x2F;222MB  (1.5%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:53:51.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;........................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  6.95MB&#x2F;222MB  (3.1%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:53:54.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;#.......................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  10.5MB&#x2F;222MB  (4.7%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:53:57.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;#.......................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  14.0MB&#x2F;222MB  (6.3%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:00.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;#.......................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  18.1MB&#x2F;222MB  (8.1%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:03.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;##......................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  22.2MB&#x2F;222MB  (10.0%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:06.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;##......................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  26.0MB&#x2F;222MB  (11.7%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:09.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;###.....................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  29.9MB&#x2F;222MB  (13.5%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:12.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;###.....................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  33.9MB&#x2F;222MB  (15.3%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:15.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;####....................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  38.0MB&#x2F;222MB  (17.1%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:18.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;####....................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  42.0MB&#x2F;222MB  (18.9%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:21.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;####....................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  46.1MB&#x2F;222MB  (20.8%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:24.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;#####...................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  50.2MB&#x2F;222MB  (22.6%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:27.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;#####...................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  54.4MB&#x2F;222MB  (24.5%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:30.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;######..................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  61.2MB&#x2F;222MB  (27.6%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:33.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;#######.................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  68.2MB&#x2F;222MB  (30.7%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:36.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;########................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  75.2MB&#x2F;222MB  (33.9%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:39.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;########................&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  82.3MB&#x2F;222MB  (37.1%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:42.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;#########...............&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  89.3MB&#x2F;222MB  (40.2%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:45.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;##########..............&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  96.1MB&#x2F;222MB  (43.3%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:48.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;###########.............&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  103MB&#x2F;222MB  (46.4%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:51.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;###########.............&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  110MB&#x2F;222MB  (49.5%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:54.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;############............&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  117MB&#x2F;222MB  (52.7%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:54:57.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;#############...........&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  124MB&#x2F;222MB  (55.8%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:00.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;##############..........&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  131MB&#x2F;222MB  (58.9%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:03.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;##############..........&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  138MB&#x2F;222MB  (62.1%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:06.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;###############.........&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  145MB&#x2F;222MB  (65.2%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:09.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;################........&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  152MB&#x2F;222MB  (68.3%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:12.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;#################.......&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  159MB&#x2F;222MB  (71.5%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:15.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;#################.......&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  166MB&#x2F;222MB  (74.7%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:18.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;##################......&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  173MB&#x2F;222MB  (77.9%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:21.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;###################.....&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  180MB&#x2F;222MB  (81.0%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:24.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;####################....&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  187MB&#x2F;222MB  (84.2%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:27.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;####################....&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  194MB&#x2F;222MB  (87.3%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:30.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;#####################...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  201MB&#x2F;222MB  (90.5%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:33.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;######################..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  208MB&#x2F;222MB  (93.6%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:36.908+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;#######################.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  215MB&#x2F;222MB  (96.8%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:39.905+0800    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;########################&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;  testing.meta  222MB&#x2F;222MB  (100.0%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:39.905+0800&lt;&#x2F;span&gt;&lt;span&gt;    no indexes to restore
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:39.907+0800&lt;&#x2F;span&gt;&lt;span&gt;    finished restoring testing.meta (384247 documents, 0 failures)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021-04-09T13:55:39.907+0800&lt;&#x2F;span&gt;&lt;span&gt;    384247 document(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restored&lt;&#x2F;span&gt;&lt;span&gt; successfully. 0 document(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;failed&lt;&#x2F;span&gt;&lt;span&gt; to restore.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Docker container 137 错误码异常退出</title>
		<published>2021-03-19T09:36:32+00:00</published>
		<updated>2021-03-19T09:36:32+00:00</updated>
		<link href="https://blog.kiyoko.io/docker-container-exitcode-137-without-oomkilled-flag-set/" type="text/html"/>
		<id>https://blog.kiyoko.io/docker-container-exitcode-137-without-oomkilled-flag-set/</id>
		<content type="html">&lt;p&gt;又是一次喜闻乐见的容器 &lt;strong&gt;137&lt;&#x2F;strong&gt; 错误码退出事件，事件案发现场如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; ns get pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                 READY   STATUS      RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cassification-xwcc2&lt;&#x2F;span&gt;&lt;span&gt;         0&#x2F;1     Error       0          2d12h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; ns describe pod cassification-xwcc2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name:&lt;&#x2F;span&gt;&lt;span&gt;         cassification-xwcc2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Namespace:&lt;&#x2F;span&gt;&lt;span&gt;    ns
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Priority:&lt;&#x2F;span&gt;&lt;span&gt;     0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Node:&lt;&#x2F;span&gt;&lt;span&gt;         n017.example.com&#x2F;10.100.200.27
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt; Time:   Tue, 16 Mar 2021 20:41:13 +0800
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Labels:&lt;&#x2F;span&gt;&lt;span&gt;       controller-uid=9c5aed2c-895b-4012-8a06-9bb9d44d49b4
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job-name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cassification
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Annotations:  &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;none&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Status:&lt;&#x2F;span&gt;&lt;span&gt;       Failed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IP:&lt;&#x2F;span&gt;&lt;span&gt;           10.216.3.55
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IPs:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IP:&lt;&#x2F;span&gt;&lt;span&gt;           10.216.3.55
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Controlled&lt;&#x2F;span&gt;&lt;span&gt; By:  Job&#x2F;cassification
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Containers:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cassification:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt; ID:  docker:&#x2F;&#x2F;f0c2b1129c1c7ce74e8eff9633b31cc4d564a18b6fc5a1416a305df811420242
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Image:&lt;&#x2F;span&gt;&lt;span&gt;         harbor.exmple.com&#x2F;pytorch:v3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Image&lt;&#x2F;span&gt;&lt;span&gt; ID:      docker-pullable:&#x2F;&#x2F;harbor.exmple.com&#x2F;pytorch@sha256:3197c2b34fb0b525652b5382d3f61c580700d80dd0332796bc1a96149b0853cc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Port:          &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;none&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Host&lt;&#x2F;span&gt;&lt;span&gt; Port:     &amp;lt;none&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Command:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-c
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt; 8000000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;State:&lt;&#x2F;span&gt;&lt;span&gt;          Terminated
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Reason:&lt;&#x2F;span&gt;&lt;span&gt;       Error
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Exit&lt;&#x2F;span&gt;&lt;span&gt; Code:    137
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Started:&lt;&#x2F;span&gt;&lt;span&gt;      Tue, 16 Mar 2021 20:41:15 +0800
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Finished:&lt;&#x2F;span&gt;&lt;span&gt;     Thu, 18 Mar 2021 18:47:45 +0800
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ready:&lt;&#x2F;span&gt;&lt;span&gt;          False
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Restart&lt;&#x2F;span&gt;&lt;span&gt; Count:  0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Limits:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu:&lt;&#x2F;span&gt;&lt;span&gt;             5
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory:&lt;&#x2F;span&gt;&lt;span&gt;          50Gi
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvidia.com&#x2F;gpu:&lt;&#x2F;span&gt;&lt;span&gt;  2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Requests:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu:&lt;&#x2F;span&gt;&lt;span&gt;             5
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory:&lt;&#x2F;span&gt;&lt;span&gt;          50Gi
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvidia.com&#x2F;gpu:&lt;&#x2F;span&gt;&lt;span&gt;  2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Environment:       &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;none&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Conditions:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;              Status
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Initialized&lt;&#x2F;span&gt;&lt;span&gt;       True
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ready&lt;&#x2F;span&gt;&lt;span&gt;             False
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContainersReady&lt;&#x2F;span&gt;&lt;span&gt;   False
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PodScheduled&lt;&#x2F;span&gt;&lt;span&gt;      Trued
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Volumes:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default-token-9rxgg:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type:&lt;&#x2F;span&gt;&lt;span&gt;        Secret (a volume populated by a Secret)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SecretName:&lt;&#x2F;span&gt;&lt;span&gt;  default-token-9rxgg
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Optional:&lt;&#x2F;span&gt;&lt;span&gt;    false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QoS&lt;&#x2F;span&gt;&lt;span&gt; Class:       Guaranteed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Node-Selectors:  &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;none&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tolerations:&lt;&#x2F;span&gt;&lt;span&gt;     node.kubernetes.io&#x2F;not-ready:NoExecute for 300s
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.kubernetes.io&#x2F;unreachable:NoExecute&lt;&#x2F;span&gt;&lt;span&gt; for 300s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Events:          &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;none&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;137&lt;&#x2F;strong&gt; 错误码大部分情况是超出资源被 &lt;code&gt;kill -9&lt;&#x2F;code&gt; 干掉了。但还是本着负责任的态度~~(空口无凭，研发不信)~~找出真相。&lt;&#x2F;p&gt;
&lt;p&gt;根据 &lt;code&gt;Container ID&lt;&#x2F;code&gt; 查看容器信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker inspect f0c2b1129c1c7ce74e8eff9633b31cc4d564a18b6fc5a1416a305df811420242
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;f0c2b1129c1c7ce74e8eff9633b31cc4d564a18b6fc5a1416a305df811420242&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Created&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2021-03-16T12:41:15.010687771Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Args&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; [
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sleep 8000000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Status&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exited&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Running&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Paused&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Restarting&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OOMKilled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Dead&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pid&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: 0,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: 137,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;StartedAt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2021-03-16T12:41:15.553418777Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;FinishedAt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2021-03-18T10:47:45.230995698Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;很遗憾 &lt;code&gt;State.OOMKilled&lt;&#x2F;code&gt; 是 &lt;code&gt;false&lt;&#x2F;code&gt;，没关系，还可以查看 &lt;code&gt;dmesg&lt;&#x2F;code&gt; 信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; dmesg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -T &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; killed | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; f0c2b1129c1c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[四&lt;&#x2F;span&gt;&lt;span&gt; 3月 18 18:47:12 2021] Task in &#x2F;kubepods&#x2F;pod3759885e-2d2e-45f6-a100-a1230831cbac&#x2F;f0c2b1129c1c7ce74e8eff9633b31cc4d564a18b6fc5a1416a305df811420242 killed as a result of limit of &#x2F;kubepods&#x2F;pod3759885e-2d2e-45f6-a100-a1230831cbac
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[四&lt;&#x2F;span&gt;&lt;span&gt; 3月 18 18:47:12 2021] Task in &#x2F;kubepods&#x2F;pod3759885e-2d2e-45f6-a100-a1230831cbac&#x2F;f0c2b1129c1c7ce74e8eff9633b31cc4d564a18b6fc5a1416a305df811420242 killed as a result of limit of &#x2F;kubepods&#x2F;pod3759885e-2d2e-45f6-a100-a1230831cbac
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[四&lt;&#x2F;span&gt;&lt;span&gt; 3月 18 18:47:12 2021] Task in &#x2F;kubepods&#x2F;pod3759885e-2d2e-45f6-a100-a1230831cbac&#x2F;f0c2b1129c1c7ce74e8eff9633b31cc4d564a18b6fc5a1416a305df811420242 killed as a result of limit of &#x2F;kubepods&#x2F;pod3759885e-2d2e-45f6-a100-a1230831cbac
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;dmesg&lt;&#x2F;code&gt; 的信息中的时间与 &lt;code&gt;container&lt;&#x2F;code&gt; 异常退出的时间非常接近。&lt;&#x2F;p&gt;
&lt;p&gt;至此，结案。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubectl Exec 无响应</title>
		<published>2021-03-16T14:15:29+00:00</published>
		<updated>2021-03-16T14:15:29+00:00</updated>
		<link href="https://blog.kiyoko.io/kubectl-exec-hangs/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubectl-exec-hangs/</id>
		<content type="html">&lt;h2 id=&quot;qi-yin&quot;&gt;起因&lt;&#x2F;h2&gt;
&lt;p&gt;在使用 &lt;code&gt;kubectl exec&lt;&#x2F;code&gt; 进入到 &lt;code&gt;pod&lt;&#x2F;code&gt; 时，进程会停止响应。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ding-wei-wen-ti&quot;&gt;定位问题&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;que-ren-kubelet-wen-ti&quot;&gt;确认 kubelet 问题&lt;&#x2F;h3&gt;
&lt;p&gt;由于 &lt;code&gt;kubectl exec&lt;&#x2F;code&gt; 这个命令的实际执行链路非常长，所以，先简单粗暴的确认一下问题是否与 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 有关。&lt;&#x2F;p&gt;
&lt;p&gt;登录到异常 &lt;code&gt;pod&lt;&#x2F;code&gt; 所在的节点，查看问题容器的 &lt;code&gt;container id&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker ps
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CONTAINER&lt;&#x2F;span&gt;&lt;span&gt; ID   IMAGE                      COMMAND                  CREATED        STATUS        PORTS     NAMES
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0253de11b8f1&lt;&#x2F;span&gt;&lt;span&gt;   nvidia&#x2F;k8s-device-plugin   &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nvidia-device-plugi…&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;   10 hours ago   Up 10 hours             k8s_nvidia-device-plugin-ctr_nvidia-device-plugin-daemonset-jzrz7_kube-system_164ea21a-cc71-4cb0-8f83-6d160a720163_0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ecaa1fd07ce8&lt;&#x2F;span&gt;&lt;span&gt;   k8s.gcr.io&#x2F;pause:3.1       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pause&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                 10 hours ago   Up 10 hours             k8s_POD_nvidia-device-plugin-daemonset-jzrz7_kube-system_164ea21a-cc71-4cb0-8f83-6d160a720163_0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e318f67bce5c&lt;&#x2F;span&gt;&lt;span&gt;   bdb21b3e4fdf               &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;bash -c &amp;#39;sleep…&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;   15 hours ago   Up 15 hours             k8s_namespace-job_pod-w9lsq_xxxx_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx_0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c8d5fa9327ab&lt;&#x2F;span&gt;&lt;span&gt;   k8s.gcr.io&#x2F;pause:3.1       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pause&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;                 15 hours ago   Up 15 hours             k8s_POD_job-w9lsq_xxxx_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx_0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;确认异常容器为 &lt;code&gt;e318f67bce5c&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;验证是否可以进入容器:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -ti&lt;&#x2F;span&gt;&lt;span&gt; e318f67bce5c &#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 无响应
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此处的现象与 &lt;code&gt;kubectl exec&lt;&#x2F;code&gt; 如出一辙。因此，可以确定 &lt;code&gt;docker&lt;&#x2F;code&gt; 之后的链路一定有问题，所以先忽略 &lt;code&gt;kubelet&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cha-kan-docker-daemon-profile&quot;&gt;查看 Docker Daemon Profile&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Docker Daemon&lt;&#x2F;code&gt; 进程监听的是 &lt;code&gt;UNIX Socket&lt;&#x2F;code&gt;，通过 &lt;code&gt;socat&lt;&#x2F;code&gt; 转为 &lt;code&gt;TCP&lt;&#x2F;code&gt; 流量:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;socat -d -d&lt;&#x2F;span&gt;&lt;span&gt; TCP-LISTEN:8080,fork,bind=10.100.200.27 UNIX:&#x2F;var&#x2F;run&#x2F;docker.sock
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;访问 &lt;code&gt;pprof&lt;&#x2F;code&gt; 的接口下载 &lt;code&gt;goroutine&lt;&#x2F;code&gt; 信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wget -O&lt;&#x2F;span&gt;&lt;span&gt; all_goroutines http:&#x2F;&#x2F;10.100.200.27:8080&#x2F;debug&#x2F;pprof&#x2F;goroutine?debug=2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;精简之后，得到如下重要信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat all_goroutines
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goroutine&lt;&#x2F;span&gt;&lt;span&gt; 87725 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;select, 635 minutes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;fifo.&lt;&#x2F;span&gt;&lt;span&gt;(*fifo)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Write&lt;&#x2F;span&gt;&lt;span&gt;(0xc001768000, 0xc001282000, 0x1, 0x8000, 0x1, 0x0, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;fifo&#x2F;fifo.go:195&lt;&#x2F;span&gt;&lt;span&gt; +0xdb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io.copyBuffer&lt;&#x2F;span&gt;&lt;span&gt;(0x7f72d86f92a8, 0xc001cba740, 0x563d49513f80, 0xc0019983b0, 0xc001282000, 0x8000, 0x8000, 0x0, 0x1, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;io&#x2F;io.go:404&lt;&#x2F;span&gt;&lt;span&gt; +0x1fd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io.CopyBuffer&lt;&#x2F;span&gt;&lt;span&gt;(0x7f72d86f92a8, 0xc001cba740, 0x563d49513f80, 0xc0019983b0, 0xc001282000, 0x8000, 0x8000, 0xc0011e4f90, 0xc0011e4f50, 0x563d465a9277)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;io&#x2F;io.go:375&lt;&#x2F;span&gt;&lt;span&gt; +0x84
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;pkg&#x2F;pools.Copy&lt;&#x2F;span&gt;&lt;span&gt;(0x7f72d86f92a8, 0xc001cba740, 0x563d49513f80, 0xc0019983b0, 0xc0019983b0, 0x1, 0x563d465d6bd8)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;pkg&#x2F;pools&#x2F;pools.go:81&lt;&#x2F;span&gt;&lt;span&gt; +0xa6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;stream.&lt;&#x2F;span&gt;&lt;span&gt;(*Config)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.CopyToPipe.func2&lt;&#x2F;span&gt;&lt;span&gt;(0xc001092c60, 0x563d4954ce80, 0xc0019983b0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;stream&#x2F;streams.go:142&lt;&#x2F;span&gt;&lt;span&gt; +0xad
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;created&lt;&#x2F;span&gt;&lt;span&gt; by github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;stream.(*Config)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.CopyToPipe
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;stream&#x2F;streams.go:141&lt;&#x2F;span&gt;&lt;span&gt; +0xbb
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goroutine&lt;&#x2F;span&gt;&lt;span&gt; 87733 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;select, 777 minutes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc&#x2F;internal&#x2F;transport.&lt;&#x2F;span&gt;&lt;span&gt;(*Stream)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.waitOnHeader&lt;&#x2F;span&gt;&lt;span&gt;(0xc000a35a00)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc&#x2F;internal&#x2F;transport&#x2F;transport.go:318&lt;&#x2F;span&gt;&lt;span&gt; +0xce
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc&#x2F;internal&#x2F;transport.&lt;&#x2F;span&gt;&lt;span&gt;(*Stream)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.RecvCompress&lt;&#x2F;span&gt;&lt;span&gt;(...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc&#x2F;internal&#x2F;transport&#x2F;transport.go:333
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc.&lt;&#x2F;span&gt;&lt;span&gt;(*csAttempt)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.recvMsg&lt;&#x2F;span&gt;&lt;span&gt;(0xc000b12e00, 0x563d4934b1a0, 0xc001e683c0, 0x0, 0xc0012f0360, 0x84)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc&#x2F;stream.go:871&lt;&#x2F;span&gt;&lt;span&gt; +0x755
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc.&lt;&#x2F;span&gt;&lt;span&gt;(*clientStream)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.RecvMsg.func1&lt;&#x2F;span&gt;&lt;span&gt;(0xc000b12e00, 0x84, 0x84)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc&#x2F;stream.go:736&lt;&#x2F;span&gt;&lt;span&gt; +0x48
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc.&lt;&#x2F;span&gt;&lt;span&gt;(*clientStream)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.withRetry&lt;&#x2F;span&gt;&lt;span&gt;(0xc0013eeea0, 0xc000adab30, 0xc000adab00, 0xc0012f0360, 0xc0016eedb8)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc&#x2F;stream.go:594&lt;&#x2F;span&gt;&lt;span&gt; +0x9e
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc.&lt;&#x2F;span&gt;&lt;span&gt;(*clientStream)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.RecvMsg&lt;&#x2F;span&gt;&lt;span&gt;(0xc0013eeea0, 0x563d4934b1a0, 0xc001e683c0, 0x0, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc&#x2F;stream.go:735&lt;&#x2F;span&gt;&lt;span&gt; +0x105
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc.invoke&lt;&#x2F;span&gt;&lt;span&gt;(0x563d495784c0, 0xc001e684b0, 0x563d481cdc32, 0x29, 0x563d49352ae0, 0xc00157aa40, 0x563d4934b1a0, 0xc001e683c0, 0xc000968380, 0xc0009fdda0, ...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc&#x2F;call.go:73&lt;&#x2F;span&gt;&lt;span&gt; +0x13d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;containerd.namespaceInterceptor.unary&lt;&#x2F;span&gt;&lt;span&gt;(0x563d4816cc49, 0x4, 0x563d49578440, 0xc000052038, 0x563d481cdc32, 0x29, 0x563d49352ae0, 0xc00157aa40, 0x563d4934b1a0, 0xc001e683c0, ...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;grpc.go:35&lt;&#x2F;span&gt;&lt;span&gt; +0xf4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc.&lt;&#x2F;span&gt;&lt;span&gt;(*ClientConn)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Invoke&lt;&#x2F;span&gt;&lt;span&gt;(0xc000968380, 0x563d49578440, 0xc000052038, 0x563d481cdc32, 0x29, 0x563d49352ae0, 0xc00157aa40, 0x563d4934b1a0, 0xc001e683c0, 0x0, ...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;google.golang.org&#x2F;grpc&#x2F;call.go:35&lt;&#x2F;span&gt;&lt;span&gt; +0x10b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;api&#x2F;services&#x2F;tasks&#x2F;v1.&lt;&#x2F;span&gt;&lt;span&gt;(*tasksClient)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Start&lt;&#x2F;span&gt;&lt;span&gt;(0xc001574758, 0x563d49578440, 0xc000052038, 0xc00157aa40, 0x0, 0x0, 0x0, 0x1, 0xc0018b4210, 0xa2)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;api&#x2F;services&#x2F;tasks&#x2F;v1&#x2F;tasks.pb.go:1309&lt;&#x2F;span&gt;&lt;span&gt; +0xd1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;containerd.&lt;&#x2F;span&gt;&lt;span&gt;(*process)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Start&lt;&#x2F;span&gt;&lt;span&gt;(0xc001e68390, 0x563d49578440, 0xc000052038, 0xc001634f40, 0x40)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;process.go:118&lt;&#x2F;span&gt;&lt;span&gt; +0xef
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;libcontainerd&#x2F;remote.&lt;&#x2F;span&gt;&lt;span&gt;(*client)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Exec&lt;&#x2F;span&gt;&lt;span&gt;(0xc0001ee0e0, 0x563d49578440, 0xc000052038, 0xc00098bb80, 0x40, 0xc001634f40, 0x40, 0xc0009a4690, 0x1, 0xc001df0b00, ...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;libcontainerd&#x2F;remote&#x2F;client.go:324&lt;&#x2F;span&gt;&lt;span&gt; +0x8cc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;daemon.&lt;&#x2F;span&gt;&lt;span&gt;(*Daemon)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.ContainerExecStart&lt;&#x2F;span&gt;&lt;span&gt;(0xc00000c1e0, 0x563d49578440, 0xc000052038, 0xc000f5200b, 0x40, 0x563d495141e0, 0xc001998398, 0x7f72d86f9198, 0xc001998398, 0x0, ...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;exec.go:263&lt;&#x2F;span&gt;&lt;span&gt; +0xd51
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;router&#x2F;container.&lt;&#x2F;span&gt;&lt;span&gt;(*containerRouter)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.postContainerExecStart&lt;&#x2F;span&gt;&lt;span&gt;(0xc001516d40, 0x563d495784c0, 0xc001ca0f30, 0x563d495683c0, 0xc000284d20, 0xc001fb6900, 0xc001ca0e70, 0x0, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;router&#x2F;container&#x2F;exec.go:132&lt;&#x2F;span&gt;&lt;span&gt; +0x42a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;middleware.ExperimentalMiddleware.WrapHandler.func1&lt;&#x2F;span&gt;&lt;span&gt;(0x563d495784c0, 0xc001ca0f30, 0x563d495683c0, 0xc000284d20, 0xc001fb6900, 0xc001ca0e70, 0x563d495784c0, 0xc001ca0f30)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;middleware&#x2F;experimental.go:26&lt;&#x2F;span&gt;&lt;span&gt; +0x177
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;middleware.VersionMiddleware.WrapHandler.func1&lt;&#x2F;span&gt;&lt;span&gt;(0x563d495784c0, 0xc001ca0f00, 0x563d495683c0, 0xc000284d20, 0xc001fb6900, 0xc001ca0e70, 0x203000, 0x203000)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;middleware&#x2F;version.go:62&lt;&#x2F;span&gt;&lt;span&gt; +0x5fb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;pkg&#x2F;authorization.&lt;&#x2F;span&gt;&lt;span&gt;(*Middleware)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.WrapHandler.func1&lt;&#x2F;span&gt;&lt;span&gt;(0x563d495784c0, 0xc001ca0f00, 0x563d495683c0, 0xc000284d20, 0xc001fb6900, 0xc001ca0e70, 0x563d495784c0, 0xc001ca0f00)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;pkg&#x2F;authorization&#x2F;middleware.go:59&lt;&#x2F;span&gt;&lt;span&gt; +0x826
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server.&lt;&#x2F;span&gt;&lt;span&gt;(*Server)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.makeHTTPHandler.func1&lt;&#x2F;span&gt;&lt;span&gt;(0x563d495683c0, 0xc000284d20, 0xc001fb6800)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;server.go:141&lt;&#x2F;span&gt;&lt;span&gt; +0x241
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;net&#x2F;http.HandlerFunc.ServeHTTP&lt;&#x2F;span&gt;&lt;span&gt;(0xc000afa820, 0x563d495683c0, 0xc000284d20, 0xc001fb6800)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;net&#x2F;http&#x2F;server.go:2036&lt;&#x2F;span&gt;&lt;span&gt; +0x46
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;gorilla&#x2F;mux.&lt;&#x2F;span&gt;&lt;span&gt;(*Router)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.ServeHTTP&lt;&#x2F;span&gt;&lt;span&gt;(0xc00143c0c0, 0x563d495683c0, 0xc000284d20, 0xc001fb6600)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;gorilla&#x2F;mux&#x2F;mux.go:210&lt;&#x2F;span&gt;&lt;span&gt; +0xe4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;net&#x2F;http.serverHandler.ServeHTTP&lt;&#x2F;span&gt;&lt;span&gt;(0xc000b6e000, 0x563d495683c0, 0xc000284d20, 0xc001fb6600)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;net&#x2F;http&#x2F;server.go:2831&lt;&#x2F;span&gt;&lt;span&gt; +0xa6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;net&#x2F;http.&lt;&#x2F;span&gt;&lt;span&gt;(*conn)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.serve&lt;&#x2F;span&gt;&lt;span&gt;(0xc00140a0a0, 0x563d49578400, 0xc00190b3c0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;net&#x2F;http&#x2F;server.go:1919&lt;&#x2F;span&gt;&lt;span&gt; +0x877
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;created&lt;&#x2F;span&gt;&lt;span&gt; by net&#x2F;http.(*Server)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Serve
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;net&#x2F;http&#x2F;server.go:2957&lt;&#x2F;span&gt;&lt;span&gt; +0x386
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goroutine&lt;&#x2F;span&gt;&lt;span&gt; 87735 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;select, 773 minutes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io.&lt;&#x2F;span&gt;&lt;span&gt;(*pipe)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Write&lt;&#x2F;span&gt;&lt;span&gt;(0xc000456640, 0xc0011be000, 0x1, 0x8000, 0x0, 0x0, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;io&#x2F;pipe.go:87&lt;&#x2F;span&gt;&lt;span&gt; +0x1fd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io.&lt;&#x2F;span&gt;&lt;span&gt;(*PipeWriter)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Write&lt;&#x2F;span&gt;&lt;span&gt;(0xc0019983a8, 0xc0011be000, 0x1, 0x8000, 0x1, 0x0, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;io&#x2F;pipe.go:153&lt;&#x2F;span&gt;&lt;span&gt; +0x4e
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io.copyBuffer&lt;&#x2F;span&gt;&lt;span&gt;(0x563d49513fa0, 0xc0019983a8, 0x563d495141e0, 0xc001998398, 0xc0011be000, 0x8000, 0x8000, 0x0, 0x2, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;io&#x2F;io.go:404&lt;&#x2F;span&gt;&lt;span&gt; +0x1fd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io.CopyBuffer&lt;&#x2F;span&gt;&lt;span&gt;(0x563d49513fa0, 0xc0019983a8, 0x563d495141e0, 0xc001998398, 0xc0011be000, 0x8000, 0x8000, 0xc000a32600, 0xc0001aca80, 0x7f72fccad008)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;io&#x2F;io.go:375&lt;&#x2F;span&gt;&lt;span&gt; +0x84
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;pkg&#x2F;pools.Copy&lt;&#x2F;span&gt;&lt;span&gt;(0x563d49513fa0, 0xc0019983a8, 0x563d495141e0, 0xc001998398, 0x4, 0xc0017e7f40, 0x563d465e2671)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;pkg&#x2F;pools&#x2F;pools.go:81&lt;&#x2F;span&gt;&lt;span&gt; +0xa6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;daemon.&lt;&#x2F;span&gt;&lt;span&gt;(*Daemon)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.ContainerExecStart.func2&lt;&#x2F;span&gt;&lt;span&gt;(0xc0019983a8, 0x563d495141e0, 0xc001998398)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;exec.go:204&lt;&#x2F;span&gt;&lt;span&gt; +0x119
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;created&lt;&#x2F;span&gt;&lt;span&gt; by github.com&#x2F;docker&#x2F;docker&#x2F;daemon.(*Daemon)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.ContainerExecStart
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;exec.go:201&lt;&#x2F;span&gt;&lt;span&gt; +0x1a8c
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goroutine&lt;&#x2F;span&gt;&lt;span&gt; 1428 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;IO wait, 990 minutes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;internal&#x2F;poll.runtime_pollWait&lt;&#x2F;span&gt;&lt;span&gt;(0x7f72fcc11230, 0x72, 0xffffffffffffffff)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;netpoll.go:184&lt;&#x2F;span&gt;&lt;span&gt; +0x57
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;internal&#x2F;poll.&lt;&#x2F;span&gt;&lt;span&gt;(*pollDesc)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.wait&lt;&#x2F;span&gt;&lt;span&gt;(0xc001654d98, 0x72, 0x8001, 0x8000, 0xffffffffffffffff)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;internal&#x2F;poll&#x2F;fd_poll_runtime.go:87&lt;&#x2F;span&gt;&lt;span&gt; +0x47
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;internal&#x2F;poll.&lt;&#x2F;span&gt;&lt;span&gt;(*pollDesc)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.waitRead&lt;&#x2F;span&gt;&lt;span&gt;(...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;internal&#x2F;poll&#x2F;fd_poll_runtime.go:92
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;internal&#x2F;poll.&lt;&#x2F;span&gt;&lt;span&gt;(*FD)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Read&lt;&#x2F;span&gt;&lt;span&gt;(0xc001654d80, 0xc001820000, 0x8000, 0x8000, 0x0, 0x0, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;internal&#x2F;poll&#x2F;fd_unix.go:169&lt;&#x2F;span&gt;&lt;span&gt; +0x1d1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os.&lt;&#x2F;span&gt;&lt;span&gt;(*File)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.read&lt;&#x2F;span&gt;&lt;span&gt;(...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;os&#x2F;file_unix.go:259
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os.&lt;&#x2F;span&gt;&lt;span&gt;(*File)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Read&lt;&#x2F;span&gt;&lt;span&gt;(0xc000a74130, 0xc001820000, 0x8000, 0x8000, 0xc00003c000, 0x563d490e5d40, 0x563d49134140)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;os&#x2F;file.go:116&lt;&#x2F;span&gt;&lt;span&gt; +0x73
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;fifo.&lt;&#x2F;span&gt;&lt;span&gt;(*fifo)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Read&lt;&#x2F;span&gt;&lt;span&gt;(0xc001149d40, 0xc001820000, 0x8000, 0x8000, 0x0, 0xc0004cfe00, 0x563d4661ce19)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;fifo&#x2F;fifo.go:179&lt;&#x2F;span&gt;&lt;span&gt; +0x165
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io.copyBuffer&lt;&#x2F;span&gt;&lt;span&gt;(0x563d49510a40, 0xc000afbcc0, 0x7f72fcc20678, 0xc001149d40, 0xc001820000, 0x8000, 0x8000, 0x563d48efedc0, 0x0, 0xc000e90ce0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;io&#x2F;io.go:402&lt;&#x2F;span&gt;&lt;span&gt; +0x124
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io.CopyBuffer&lt;&#x2F;span&gt;&lt;span&gt;(0x563d49510a40, 0xc000afbcc0, 0x7f72fcc20678, 0xc001149d40, 0xc001820000, 0x8000, 0x8000, 0xc000d50fc0, 0xc0004cff50, 0x563d465a9277)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;io&#x2F;io.go:375&lt;&#x2F;span&gt;&lt;span&gt; +0x84
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;pkg&#x2F;pools.Copy&lt;&#x2F;span&gt;&lt;span&gt;(0x563d49510a40, 0xc000afbcc0, 0x7f72fcc20678, 0xc001149d40, 0xc001149d40, 0xc00194d2c0, 0x7f72fcbc9c50)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;pkg&#x2F;pools&#x2F;pools.go:81&lt;&#x2F;span&gt;&lt;span&gt; +0xa6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;stream.&lt;&#x2F;span&gt;&lt;span&gt;(*Config)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.CopyToPipe.func1.1&lt;&#x2F;span&gt;&lt;span&gt;(0x563d49510a40, 0xc000afbcc0, 0x7f72fcc5e830, 0xc001149d40, 0xc000f09810)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;stream&#x2F;streams.go:124&lt;&#x2F;span&gt;&lt;span&gt; +0x73
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;created&lt;&#x2F;span&gt;&lt;span&gt; by github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;stream.(*Config)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.CopyToPipe.func1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;stream&#x2F;streams.go:123&lt;&#x2F;span&gt;&lt;span&gt; +0x86
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goroutine&lt;&#x2F;span&gt;&lt;span&gt; 364 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;IO wait, 990 minutes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;internal&#x2F;poll.runtime_pollWait&lt;&#x2F;span&gt;&lt;span&gt;(0x7f72fcc11090, 0x72, 0xffffffffffffffff)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;netpoll.go:184&lt;&#x2F;span&gt;&lt;span&gt; +0x57
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;internal&#x2F;poll.&lt;&#x2F;span&gt;&lt;span&gt;(*pollDesc)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.wait&lt;&#x2F;span&gt;&lt;span&gt;(0xc00131c1f8, 0x72, 0x8001, 0x8000, 0xffffffffffffffff)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;internal&#x2F;poll&#x2F;fd_poll_runtime.go:87&lt;&#x2F;span&gt;&lt;span&gt; +0x47
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;internal&#x2F;poll.&lt;&#x2F;span&gt;&lt;span&gt;(*pollDesc)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.waitRead&lt;&#x2F;span&gt;&lt;span&gt;(...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;internal&#x2F;poll&#x2F;fd_poll_runtime.go:92
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;internal&#x2F;poll.&lt;&#x2F;span&gt;&lt;span&gt;(*FD)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Read&lt;&#x2F;span&gt;&lt;span&gt;(0xc00131c1e0, 0xc00173c000, 0x8000, 0x8000, 0x0, 0x0, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;internal&#x2F;poll&#x2F;fd_unix.go:169&lt;&#x2F;span&gt;&lt;span&gt; +0x1d1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os.&lt;&#x2F;span&gt;&lt;span&gt;(*File)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.read&lt;&#x2F;span&gt;&lt;span&gt;(...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;os&#x2F;file_unix.go:259
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os.&lt;&#x2F;span&gt;&lt;span&gt;(*File)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Read&lt;&#x2F;span&gt;&lt;span&gt;(0xc001998040, 0xc00173c000, 0x8000, 0x8000, 0x2b, 0x0, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;os&#x2F;file.go:116&lt;&#x2F;span&gt;&lt;span&gt; +0x73
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;fifo.&lt;&#x2F;span&gt;&lt;span&gt;(*fifo)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Read&lt;&#x2F;span&gt;&lt;span&gt;(0xc000f30660, 0xc00173c000, 0x8000, 0x8000, 0x2b, 0x0, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;fifo&#x2F;fifo.go:174&lt;&#x2F;span&gt;&lt;span&gt; +0x1d8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io.copyBuffer&lt;&#x2F;span&gt;&lt;span&gt;(0x563d49510a40, 0xc0012ce520, 0x7f72fcc20678, 0xc000f30660, 0xc00173c000, 0x8000, 0x8000, 0x0, 0x0, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;io&#x2F;io.go:402&lt;&#x2F;span&gt;&lt;span&gt; +0x124
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io.CopyBuffer&lt;&#x2F;span&gt;&lt;span&gt;(0x563d49510a40, 0xc0012ce520, 0x7f72fcc20678, 0xc000f30660, 0xc00173c000, 0x8000, 0x8000, 0xc000a8d790, 0xc000a8d750, 0x563d465a9277)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;io&#x2F;io.go:375&lt;&#x2F;span&gt;&lt;span&gt; +0x84
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;pkg&#x2F;pools.Copy&lt;&#x2F;span&gt;&lt;span&gt;(0x563d49510a40, 0xc0012ce520, 0x7f72fcc20678, 0xc000f30660, 0xc000f30660, 0x1, 0x563d465d6bd8)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;pkg&#x2F;pools&#x2F;pools.go:81&lt;&#x2F;span&gt;&lt;span&gt; +0xa6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;stream.&lt;&#x2F;span&gt;&lt;span&gt;(*Config)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.CopyToPipe.func1.1&lt;&#x2F;span&gt;&lt;span&gt;(0x563d49510a40, 0xc0012ce520, 0x7f72fcc5e830, 0xc000f30660, 0xc000e93860)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;stream&#x2F;streams.go:124&lt;&#x2F;span&gt;&lt;span&gt; +0x73
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;created&lt;&#x2F;span&gt;&lt;span&gt; by github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;stream.(*Config)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.CopyToPipe.func1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;stream&#x2F;streams.go:123&lt;&#x2F;span&gt;&lt;span&gt; +0x86
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goroutine&lt;&#x2F;span&gt;&lt;span&gt; 101639 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;semacquire, 120 minutes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync.runtime_SemacquireMutex&lt;&#x2F;span&gt;&lt;span&gt;(0xc000b3a1f4, 0xc00255f600, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;sema.go:71&lt;&#x2F;span&gt;&lt;span&gt; +0x49
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync.&lt;&#x2F;span&gt;&lt;span&gt;(*RWMutex)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.RLock&lt;&#x2F;span&gt;&lt;span&gt;(...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;sync&#x2F;rwmutex.go:50
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;exec.&lt;&#x2F;span&gt;&lt;span&gt;(*Store)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.List&lt;&#x2F;span&gt;&lt;span&gt;(0xc000b3a1e0, 0xed7e1415b, 0x0, 0x563d481ba268)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;exec&#x2F;exec.go:141&lt;&#x2F;span&gt;&lt;span&gt; +0x1eb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;container.&lt;&#x2F;span&gt;&lt;span&gt;(*Container)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.GetExecIDs&lt;&#x2F;span&gt;&lt;span&gt;(...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;container&#x2F;container.go:464
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;daemon.&lt;&#x2F;span&gt;&lt;span&gt;(*Daemon)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.getInspectData&lt;&#x2F;span&gt;&lt;span&gt;(0xc00000c1e0, 0xc001a1a280, 0x40, 0xc001a1a280, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;inspect.go:178&lt;&#x2F;span&gt;&lt;span&gt; +0x5d2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;daemon.&lt;&#x2F;span&gt;&lt;span&gt;(*Daemon)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.ContainerInspectCurrent&lt;&#x2F;span&gt;&lt;span&gt;(0xc00000c1e0, 0xc000a9d390, 0x40, 0x0, 0x1, 0xc000c5f8c8, 0xc00055ddc0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;inspect.go:42&lt;&#x2F;span&gt;&lt;span&gt; +0xb4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;daemon.&lt;&#x2F;span&gt;&lt;span&gt;(*Daemon)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.ContainerInspect&lt;&#x2F;span&gt;&lt;span&gt;(0xc00000c1e0, 0xc000a9d390, 0x40, 0x0, 0x563d4816c341, 0x4, 0xc000e0a700, 0x563d466a4f34, 0x8, 0x10)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;inspect.go:29&lt;&#x2F;span&gt;&lt;span&gt; +0x11b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;router&#x2F;container.&lt;&#x2F;span&gt;&lt;span&gt;(*containerRouter)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.getContainersByName&lt;&#x2F;span&gt;&lt;span&gt;(0xc001516d40, 0x563d495784c0, 0xc0014d4e40, 0x563d495683c0, 0xc0021d37a0, 0xc000a35e00, 0xc0014d4d80, 0xc000e0a701, 0xc00239a160)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;router&#x2F;container&#x2F;inspect.go:15&lt;&#x2F;span&gt;&lt;span&gt; +0x116
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;middleware.ExperimentalMiddleware.WrapHandler.func1&lt;&#x2F;span&gt;&lt;span&gt;(0x563d495784c0, 0xc0014d4e40, 0x563d495683c0, 0xc0021d37a0, 0xc000a35e00, 0xc0014d4d80, 0x563d495784c0, 0xc0014d4e40)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;middleware&#x2F;experimental.go:26&lt;&#x2F;span&gt;&lt;span&gt; +0x177
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;middleware.VersionMiddleware.WrapHandler.func1&lt;&#x2F;span&gt;&lt;span&gt;(0x563d495784c0, 0xc0014d4e10, 0x563d495683c0, 0xc0021d37a0, 0xc000a35e00, 0xc0014d4d80, 0x203000, 0x203000)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;middleware&#x2F;version.go:62&lt;&#x2F;span&gt;&lt;span&gt; +0x5fb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;pkg&#x2F;authorization.&lt;&#x2F;span&gt;&lt;span&gt;(*Middleware)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.WrapHandler.func1&lt;&#x2F;span&gt;&lt;span&gt;(0x563d495784c0, 0xc0014d4e10, 0x563d495683c0, 0xc0021d37a0, 0xc000a35e00, 0xc0014d4d80, 0x563d495784c0, 0xc0014d4e10)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;pkg&#x2F;authorization&#x2F;middleware.go:59&lt;&#x2F;span&gt;&lt;span&gt; +0x826
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server.&lt;&#x2F;span&gt;&lt;span&gt;(*Server)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.makeHTTPHandler.func1&lt;&#x2F;span&gt;&lt;span&gt;(0x563d495683c0, 0xc0021d37a0, 0xc000a35d00)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;api&#x2F;server&#x2F;server.go:141&lt;&#x2F;span&gt;&lt;span&gt; +0x241
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;net&#x2F;http.HandlerFunc.ServeHTTP&lt;&#x2F;span&gt;&lt;span&gt;(0xc0013cf660, 0x563d495683c0, 0xc0021d37a0, 0xc000a35d00)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;net&#x2F;http&#x2F;server.go:2036&lt;&#x2F;span&gt;&lt;span&gt; +0x46
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;gorilla&#x2F;mux.&lt;&#x2F;span&gt;&lt;span&gt;(*Router)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.ServeHTTP&lt;&#x2F;span&gt;&lt;span&gt;(0xc00143c0c0, 0x563d495683c0, 0xc0021d37a0, 0xc000a53400)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;vendor&#x2F;github.com&#x2F;gorilla&#x2F;mux&#x2F;mux.go:210&lt;&#x2F;span&gt;&lt;span&gt; +0xe4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;net&#x2F;http.serverHandler.ServeHTTP&lt;&#x2F;span&gt;&lt;span&gt;(0xc000b6e000, 0x563d495683c0, 0xc0021d37a0, 0xc000a53400)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;net&#x2F;http&#x2F;server.go:2831&lt;&#x2F;span&gt;&lt;span&gt; +0xa6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;net&#x2F;http.&lt;&#x2F;span&gt;&lt;span&gt;(*conn)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.serve&lt;&#x2F;span&gt;&lt;span&gt;(0xc001693c20, 0x563d49578400, 0xc0014a2480)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;net&#x2F;http&#x2F;server.go:1919&lt;&#x2F;span&gt;&lt;span&gt; +0x877
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;created&lt;&#x2F;span&gt;&lt;span&gt; by net&#x2F;http.(*Server)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.Serve
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;net&#x2F;http&#x2F;server.go:2957&lt;&#x2F;span&gt;&lt;span&gt; +0x386
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goroutine&lt;&#x2F;span&gt;&lt;span&gt; 65 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;semacquire, 776 minutes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync.runtime_SemacquireMutex&lt;&#x2F;span&gt;&lt;span&gt;(0xc000b3a1f4, 0xc002094d00, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;sema.go:71&lt;&#x2F;span&gt;&lt;span&gt; +0x49
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync.&lt;&#x2F;span&gt;&lt;span&gt;(*RWMutex)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.RLock&lt;&#x2F;span&gt;&lt;span&gt;(...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;sync&#x2F;rwmutex.go:50
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;exec.&lt;&#x2F;span&gt;&lt;span&gt;(*Store)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.List&lt;&#x2F;span&gt;&lt;span&gt;(0xc000b3a1e0, 0xc0009a4a50, 0x1d, 0x1d)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;exec&#x2F;exec.go:141&lt;&#x2F;span&gt;&lt;span&gt; +0x1eb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;daemon.&lt;&#x2F;span&gt;&lt;span&gt;(*Daemon)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.containerExecIds&lt;&#x2F;span&gt;&lt;span&gt;(0xc00000c1e0, 0xc002094f50)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;exec.go:335&lt;&#x2F;span&gt;&lt;span&gt; +0x95
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github.com&#x2F;docker&#x2F;docker&#x2F;daemon.&lt;&#x2F;span&gt;&lt;span&gt;(*Daemon)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.execCommandGC&lt;&#x2F;span&gt;&lt;span&gt;(0xc00000c1e0)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;exec.go:312&lt;&#x2F;span&gt;&lt;span&gt; +0x178
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;created&lt;&#x2F;span&gt;&lt;span&gt; by github.com&#x2F;docker&#x2F;docker&#x2F;daemon.NewDaemon
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;src&#x2F;engine&#x2F;.gopath&#x2F;src&#x2F;github.com&#x2F;docker&#x2F;docker&#x2F;daemon&#x2F;daemon.go:1136&lt;&#x2F;span&gt;&lt;span&gt; +0x2aa0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过 &lt;code&gt;kubectl&lt;&#x2F;code&gt; 得到 &lt;code&gt;docker&lt;&#x2F;code&gt; 版本信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; wide
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                          STATUS   ROLES    AGE    VERSION    INTERNAL-IP    EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n017.example.com&lt;&#x2F;span&gt;&lt;span&gt;   Ready    &amp;lt;none&amp;gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt;d    v1.16.15   10.100.200.27   &amp;lt;none&amp;gt;        CentOS Linux 7 (Core)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4.19.12-1.el7.elrepo.x86_64&lt;&#x2F;span&gt;&lt;span&gt;   docker:&#x2F;&#x2F;20.10.3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;下载 &lt;code&gt;docker&lt;&#x2F;code&gt; 源码:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GOPATH&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;github.com&#x2F;docker&#x2F;docker; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GOPATH&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;github.com&#x2F;docker&#x2F;docker
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;moby&#x2F;moby.git .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; checkout v20.10.3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;yuan-ma-fen-xi&quot;&gt;源码分析&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;goroutine-87725&quot;&gt;goroutine 87725&lt;&#x2F;h5&gt;
&lt;p&gt;根据栈信息，可以得到调用链为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; docker&#x2F;container&#x2F;stream&#x2F;streams.go
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; CopyToPipe connects streamconfig with a libcontainerd.IOPipe
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;CopyToPipe&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iop &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cio&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DirectIO&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dio &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iop
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copyFunc &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Writer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ReadCloser&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;go func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pools&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;logrus&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stream copy error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }()
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iop&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdout &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copyFunc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iop&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iop&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stderr &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copyFunc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stderr&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iop&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stderr&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdin&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iop&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdin &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;go func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pools&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iop&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdin&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iop&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;logrus&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Warnf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to close stdin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; docker&#x2F;pkg&#x2F;pools&#x2F;pools.go
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Copy is a convenience wrapper which uses a buffer to avoid allocation in io.Copy.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Writer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;written &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buffer32KPool&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;written&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CopyBuffer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;, *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buffer32KPool&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Put&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; io&#x2F;io.go
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;CopyBuffer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Writer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;written &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;empty buffer in CopyBuffer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copyBuffer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;copyBuffer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Writer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;written &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If the reader has a WriteTo method, use it to do the copy.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Avoids an allocation and a copy.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WriterTo&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WriteTo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;written&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Write from byte array to a fifo.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fifo&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;syscall&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;O_WRONLY&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;syscall&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;O_RDWR&lt;&#x2F;span&gt;&lt;span&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrWrToRDONLY
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opened&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 阻塞在这里
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opened&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;closed&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrWriteClosed
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;goroutine&lt;&#x2F;code&gt; 阻塞在 &lt;code&gt;*fifo.Write&lt;&#x2F;code&gt; 函数中，只有当 &lt;code&gt;fifo.opened&lt;&#x2F;code&gt; 可读时，可以写入数据，当 &lt;code&gt;fifo.closed&lt;&#x2F;code&gt; 可读时，返回一个错误。&lt;&#x2F;p&gt;
&lt;p&gt;因此，找到有哪些情况 &lt;code&gt;fifo.opened&lt;&#x2F;code&gt; 可读，最后只找到了一种情况:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; docker&#x2F;vendor&#x2F;github.com&#x2F;containerd&#x2F;fifo&#x2F;fifo.go
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; OpenFifo opens a fifo. Returns io.ReadWriteCloser.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Context can be used to cancel this function until open(2) has not returned.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Accepted flags:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - syscall.O_CREAT - create new fifo if one doesn&amp;#39;t exist
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - syscall.O_RDONLY - open fifo only from reader side
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - syscall.O_WRONLY - open fifo only from writer side
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - syscall.O_RDWR - open fifo from both sides, never block on syscall level
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - syscall.O_NONBLOCK - return io.ReadWriteCloser even if other side of the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;     fifo isn&amp;#39;t open. read&#x2F;write will be connected after the actual fifo is
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;     open or after fifo is closed.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 注意 fn 表示 filename，不是 function...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;OpenFifo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;perm os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FileMode&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ReadWriteCloser&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;openFifo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;perm&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;openFifo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;perm os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FileMode&lt;&#x2F;span&gt;&lt;span&gt;) (*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fifo&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsNotExist&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;syscall&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;O_CREAT &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkfifo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uint32&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;perm&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ModePerm&lt;&#x2F;span&gt;&lt;span&gt;)); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsExist&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Wrapf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error creating fifo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;syscall&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;O_NONBLOCK &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;syscall&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;O_RDWR &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;syscall&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;O_CREAT
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;= ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;syscall&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;O_NONBLOCK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getHandle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fifo&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opened&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;chan struct&lt;&#x2F;span&gt;&lt;span&gt;{}),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;closed&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;chan struct&lt;&#x2F;span&gt;&lt;span&gt;{}),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;closing&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;chan struct&lt;&#x2F;span&gt;&lt;span&gt;{}),
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wg &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;leakCheckWg
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wg &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;go func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wg &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opened&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opened&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;closed&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;go func&lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 这个 goroutine 中执行打开文件操作
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wg &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;File
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OpenFile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;closing&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fifo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; was closed before opening&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;closedOnce&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Do&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;closed&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      })
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opened&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 有且仅有一处可以触发 fifo.opened
&lt;&#x2F;span&gt;&lt;span&gt;  }()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opened&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;closed&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;OpenFifo&lt;&#x2F;code&gt; 与 &lt;code&gt;fifo.Write&lt;&#x2F;code&gt; 两个函数的调用一定是序列化的。因此，当成功获得一个 &lt;code&gt;fifo&lt;&#x2F;code&gt; 对象时，&lt;code&gt;fifo.opened&lt;&#x2F;code&gt; 就已经处于被关闭状态。并且，&lt;code&gt;fifo.opened&lt;&#x2F;code&gt; 是通过 &lt;code&gt;close(fifo.opened)&lt;&#x2F;code&gt; 的方式触发可读操作，所以，可以确认 &lt;code&gt;fifo.Write&lt;&#x2F;code&gt; 函数只可以写入一次:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;首次调用 &lt;code&gt;fifo.Write&lt;&#x2F;code&gt; 时，在第一个 &lt;code&gt;select&lt;&#x2F;code&gt; 中执行 &lt;code&gt;case &amp;lt;-f.opened:&lt;&#x2F;code&gt; 语句，向 &lt;code&gt;fifo&lt;&#x2F;code&gt; 中写入数据。&lt;&#x2F;li&gt;
&lt;li&gt;再次调用 &lt;code&gt;fifo.Write&lt;&#x2F;code&gt; 时，在第二个 &lt;code&gt;select&lt;&#x2F;code&gt; 中执行 &lt;code&gt;default:&lt;&#x2F;code&gt; 语句，等待 &lt;code&gt;fifo.closed&lt;&#x2F;code&gt; 可读事件。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;综上，当前 &lt;code&gt;goroutine&lt;&#x2F;code&gt; 在等待 &lt;code&gt;fifo.Close&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;goroutine-87733&quot;&gt;goroutine 87733&lt;&#x2F;h5&gt;
&lt;p&gt;根据堆栈信息，从下往上阅读，第一个重要的函数调用为 &lt;code&gt;docker&#x2F;api&#x2F;server&#x2F;router&#x2F;container&#x2F;exec.go:132&lt;&#x2F;code&gt;，其中核心的逻辑如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; docker&#x2F;api&#x2F;server&#x2F;router&#x2F;container&#x2F;exec.go:132
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; TODO(vishh): Refactor the code to avoid having to specify stream config as part of both create and start.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;containerRouter&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;postContainerExecStart&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execName                  &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vars&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inStream           io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ReadCloser
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdout&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stderr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outStream io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Writer
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execStartCheck&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Detach &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inStream&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outStream&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;httputils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HijackConnection&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inStream
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdout &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outStream
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execStartCheck&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tty &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stderr &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdcopy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewStdWriter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outStream&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdcopy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stderr&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdout &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdcopy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewStdWriter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outStream&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdcopy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Now run the user process in container.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Maybe we should we pass ctx here if we&amp;#39;re not detaching?
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;backend&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContainerExecStart&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Background&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execName&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdout&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stderr&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execStartCheck&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Detach &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;调用 &lt;code&gt;s.backend.ContainerExecStart&lt;&#x2F;code&gt; 开启 &lt;code&gt;exec&lt;&#x2F;code&gt; 命令。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;s.backend&lt;&#x2F;code&gt; 的类型是一个接口:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Backend &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;commitBackend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;execBackend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;copyBackend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stateBackend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;monitorBackend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;attachBackend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;systemBackend
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其只有一个具体实现 &lt;code&gt;docker&#x2F;daemon&#x2F;daemon.go#Daemon&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ContainerExecStart starts a previously set up exec instance. The
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; std streams are set up.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If ctx is cancelled, the process is terminated.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Daemon&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ContainerExecStart&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdout io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Writer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stderr io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Writer&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStdin           io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ReadCloser
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStdout&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStderr io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Writer
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getExecConfig&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errExecNotFound&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExitCode &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: Exec command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; has already run&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errdefs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Conflict&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Running &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errdefs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Conflict&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: Exec command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; is already running&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Running &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContainerID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;logrus&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Debugf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;starting exec command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; in container &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attributes &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;execID&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LogContainerEventWithAttributes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exec_start: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entrypoint&lt;&#x2F;span&gt;&lt;span&gt;+&amp;quot; &amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strings&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Join&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Args&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot; &amp;quot;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attributes&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defer func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Running &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exitCode &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;126
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExitCode &lt;&#x2F;span&gt;&lt;span&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exitCode
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CloseStreams&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;logrus&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to cleanup exec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; streams: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecCommands&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Delete&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pid&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OpenStdin &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pipe&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;go func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;logrus&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Closing buffered stdin pipe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pools&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStdin &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OpenStdout &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStdout &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdout
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OpenStderr &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStderr &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stderr
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OpenStdin &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StreamConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewInputPipes&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StreamConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewNopInputPipe&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;specs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runtime&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GOOS &lt;&#x2F;span&gt;&lt;span&gt;!= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;windows&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerdCli&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LoadContainer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContainerID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Spec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Process
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Args &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entrypoint&lt;&#x2F;span&gt;&lt;span&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Args&lt;&#x2F;span&gt;&lt;span&gt;...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Env &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Env
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cwd &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WorkingDir
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Terminal &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tty
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cwd &lt;&#x2F;span&gt;&lt;span&gt;== &amp;quot;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cwd &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execSetPlatformOpt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attachConfig &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AttachConfig&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TTY&lt;&#x2F;span&gt;&lt;span&gt;:        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tty&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UseStdin&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStdin &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UseStdout&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStdout &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UseStderr&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStderr &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdin&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStdin&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span&gt;:     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStdout&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stderr&lt;&#x2F;span&gt;&lt;span&gt;:     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStderr&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DetachKeys&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DetachKeys&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CloseStdin&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StreamConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AttachStreams&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attachConfig&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attachErr &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StreamConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CopyStreams&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attachConfig&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Synchronize with libcontainerd event loop
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecCommands&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;systemPid&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Exec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStdin &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;InitializeStdio&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the exec context should be ready, or error happened.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; close the chan to notify readiness
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Started&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecCommands&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translateContainerdStartErr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entrypoint&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetExitCode&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pid &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;systemPid
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecCommands&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;logrus&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Debugf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sending TERM signal to process &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; in container &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SignalProcess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SignalMap&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TERM&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewTimer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;termProcessTimeout&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;logrus&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Infof&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Container &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, process &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; failed to exit within &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; of signal TERM - using the force&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;termProcessTimeout&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SignalProcess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SignalMap&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;KILL&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attachErr&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; TERM signal worked
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attachErr&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;term&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EscapeError&lt;&#x2F;span&gt;&lt;span&gt;); !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errdefs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Wrap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exec attach failed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attributes &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;execID&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LogContainerEventWithAttributes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exec_detach&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attributes&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;根据调用栈可以看到，接下来会执行到 &lt;code&gt;daemon.containerd.Exec&lt;&#x2F;code&gt; 函数调用。首先将上述代码精简:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; getExecConfig looks up the exec instance by name. If the container associated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; with the exec instance is stopped or paused, it will return an error.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Daemon&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getExecConfig&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execCommands&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctr &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContainerID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Daemon&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ContainerExecStart&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdout io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Writer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stderr io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Writer&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getExecConfig&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContainerID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Synchronize with libcontainerd event loop
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecCommands&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;systemPid&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Exec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cStdin &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;InitializeStdio&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the exec context should be ready, or error happened.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; close the chan to notify readiness
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Started&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecCommands&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translateContainerdStartErr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entrypoint&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetExitCode&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pid &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;systemPid
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecCommands&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上面的函数中，通过 &lt;code&gt;name&lt;&#x2F;code&gt; 获取到了一个 &lt;code&gt;ec&lt;&#x2F;code&gt;，通过 &lt;code&gt;ec.ContainerID&lt;&#x2F;code&gt; 获取到了 &lt;code&gt;container&lt;&#x2F;code&gt;，然后对 &lt;code&gt;ec&lt;&#x2F;code&gt; 与 &lt;code&gt;container.ExecCommands&lt;&#x2F;code&gt; 加锁。&lt;&#x2F;p&gt;
&lt;p&gt;根据调用链可知当前 &lt;code&gt;goroutine&lt;&#x2F;code&gt; 执行进入了 &lt;code&gt;daemon.containerd.Exec&lt;&#x2F;code&gt;，所以执行函数之前锁住的两把锁都没有被释放，那么现在就有一个问题: 锁的粒度有多大？&lt;&#x2F;p&gt;
&lt;p&gt;为了解决这个疑问，就需要找到锁的源头: &lt;code&gt;name&lt;&#x2F;code&gt; 的来源，因为 &lt;code&gt;name&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;ec&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;Lock&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;Container&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;Lock&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;回溯调用关系，&lt;code&gt;*Daemon.ContainerExecStart&lt;&#x2F;code&gt; 的调用者是路由回调函数 &lt;code&gt;*containerRouter.postContainerExecStart&lt;&#x2F;code&gt;，&lt;code&gt;*Daemon.ContainerExecStart&lt;&#x2F;code&gt; 的入参 &lt;code&gt;name&lt;&#x2F;code&gt; 是 &lt;code&gt;*containerRouter.postContainerExecStart&lt;&#x2F;code&gt; 的局部变量 &lt;code&gt;execName&lt;&#x2F;code&gt;。近一步回溯，&lt;code&gt;execName&lt;&#x2F;code&gt; 的来源是路由变量 &lt;code&gt;:name&lt;&#x2F;code&gt;，路由如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewPostRoute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;exec&#x2F;{name:.*}&#x2F;start&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postContainerExecStart&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;为了知道 &lt;code&gt;name&lt;&#x2F;code&gt; 是什么，则需要查看 &lt;code&gt;Docker&lt;&#x2F;code&gt; 的 &lt;code&gt;API&lt;&#x2F;code&gt; 文档。&lt;&#x2F;p&gt;
&lt;p&gt;首先，通过命令 &lt;code&gt;docker version&lt;&#x2F;code&gt; 可以确定 &lt;code&gt;docker v20.10.3&lt;&#x2F;code&gt; 使用的 &lt;code&gt;API&lt;&#x2F;code&gt; 版本如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Client:&lt;&#x2F;span&gt;&lt;span&gt; Docker Engine - Community
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Version:&lt;&#x2F;span&gt;&lt;span&gt;           20.10.3
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;API&lt;&#x2F;span&gt;&lt;span&gt; version:       1.41
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Go&lt;&#x2F;span&gt;&lt;span&gt; version:        go1.13.15
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Git&lt;&#x2F;span&gt;&lt;span&gt; commit:        48d30b5
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Built:&lt;&#x2F;span&gt;&lt;span&gt;             Fri Jan 29 14:34:14 2021
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OS&#x2F;Arch:&lt;&#x2F;span&gt;&lt;span&gt;           linux&#x2F;amd64
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Context:&lt;&#x2F;span&gt;&lt;span&gt;           default
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Experimental:&lt;&#x2F;span&gt;&lt;span&gt;      true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Server:&lt;&#x2F;span&gt;&lt;span&gt; Docker Engine - Community
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Engine:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Version:&lt;&#x2F;span&gt;&lt;span&gt;          20.10.3
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;API&lt;&#x2F;span&gt;&lt;span&gt; version:      1.41 (minimum version 1.12)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Go&lt;&#x2F;span&gt;&lt;span&gt; version:       go1.13.15
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Git&lt;&#x2F;span&gt;&lt;span&gt; commit:       46229ca
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Built:&lt;&#x2F;span&gt;&lt;span&gt;            Fri Jan 29 14:32:37 2021
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OS&#x2F;Arch:&lt;&#x2F;span&gt;&lt;span&gt;          linux&#x2F;amd64
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Experimental:&lt;&#x2F;span&gt;&lt;span&gt;     false
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerd:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Version:&lt;&#x2F;span&gt;&lt;span&gt;          1.4.3
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GitCommit:&lt;&#x2F;span&gt;&lt;span&gt;        269548fa27e0089a8b8278fc4fc781d7f65a939b
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvidia:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Version:&lt;&#x2F;span&gt;&lt;span&gt;          1.0.0-rc92
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GitCommit:&lt;&#x2F;span&gt;&lt;span&gt;        ff819c7e9184c13b7c2607fe6c30ae19403a7aff
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker-init:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Version:&lt;&#x2F;span&gt;&lt;span&gt;          0.19.0
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GitCommit:&lt;&#x2F;span&gt;&lt;span&gt;        de40ad0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;即版本是 &lt;code&gt;API version: 1.41 (minimum version 1.12)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;通过查阅 &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;api&quot;&gt;Docker API Reference&lt;&#x2F;a&gt; 获取具体的 &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;api&#x2F;v1.41&#x2F;#operation&#x2F;ExecStart&quot;&gt;&lt;code&gt;API&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;HTTP&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-HTTP &quot;&gt;&lt;code class=&quot;language-HTTP&quot; data-lang=&quot;HTTP&quot;&gt;&lt;span&gt;POST &#x2F;exec&#x2F;{id}&#x2F;start
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;Detach&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;Tty&amp;quot;: false
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Path Parameters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;id
&lt;ul&gt;
&lt;li&gt;string Required&lt;&#x2F;li&gt;
&lt;li&gt;Exec instance ID&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;易得，&lt;code&gt;API&lt;&#x2F;code&gt; 文档中的 &lt;code&gt;id&lt;&#x2F;code&gt; 就是代码中的 &lt;code&gt;name&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;exec id&lt;&#x2F;code&gt; 是通过如下 &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;api&#x2F;v1.41&#x2F;#operation&#x2F;ContainerExec&quot;&gt;&lt;code&gt;API&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; 获得(当然，这个属于盲猜，应该可以通过查阅 &lt;code&gt;docker client&lt;&#x2F;code&gt; 的 &lt;code&gt;exec&lt;&#x2F;code&gt; 命令部分的源码就能确定):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;HTTP&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-HTTP &quot;&gt;&lt;code class=&quot;language-HTTP&quot; data-lang=&quot;HTTP&quot;&gt;&lt;span&gt;POST &#x2F;containers&#x2F;{id}&#x2F;exec
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;AttachStdin&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;AttachStdout&amp;quot;: true,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;AttachStderr&amp;quot;: true,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;DetachKeys&amp;quot;: &amp;quot;ctrl-p,ctrl-q&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;Tty&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;Cmd&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;date&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;Env&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;FOO=bar&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;BAZ=quux&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Path Parameters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;id
&lt;ul&gt;
&lt;li&gt;string Required&lt;&#x2F;li&gt;
&lt;li&gt;ID or name of container&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;因此，可以得出结论，先调用 &lt;code&gt;ContainerExec&lt;&#x2F;code&gt; 通过 &lt;code&gt;container id&lt;&#x2F;code&gt; 获取 &lt;code&gt;exec id&lt;&#x2F;code&gt;，然后使用上面获得的 &lt;code&gt;exec id&lt;&#x2F;code&gt;调用 &lt;code&gt;ExecStart&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;但是，到此为止只是清楚了逻辑关系，还无法解答锁的粒度，或许应该看一下 &lt;code&gt;ContainerExec&lt;&#x2F;code&gt; 的逻辑。&lt;&#x2F;p&gt;
&lt;p&gt;根据路由信息 &lt;code&gt;router.NewPostRoute(&amp;quot;&#x2F;containers&#x2F;{name:.*}&#x2F;exec&amp;quot;, r.postContainerExecCreate)&lt;&#x2F;code&gt;，找到 &lt;code&gt;ContainerExec&lt;&#x2F;code&gt; 的处理函数 &lt;code&gt;postContainerExecCreate&lt;&#x2F;code&gt; 中关于 &lt;code&gt;exec id&lt;&#x2F;code&gt; 部分的逻辑:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;containerRouter&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;postContainerExecCreate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vars&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecConfig&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewDecoder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Register an instance of Exec in container.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;backend&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContainerExecCreate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;logrus&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error setting up exec command in container &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;httputils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WriteJSON&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StatusCreated&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IDResponse&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ContainerExecCreate sets up an exec in a running container.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Daemon&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ContainerExecCreate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ExecConfig&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 通过 container name 获取当前处于活跃状态的 container
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cntr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getActiveContainer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strslice&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StrSlice&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cmd&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;entrypoint&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEntrypointAndArgs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strslice&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StrSlice&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keys &lt;&#x2F;span&gt;&lt;span&gt;:= []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DetachKeys &lt;&#x2F;span&gt;&lt;span&gt;!= &amp;quot;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;term&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ToBytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DetachKeys&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewConfig&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OpenStdin &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AttachStdin
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OpenStdout &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AttachStdout
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OpenStderr &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AttachStderr
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; config 的 container id 就是 container.ID 即容器的 ID
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContainerID &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cntr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DetachKeys &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keys
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entrypoint &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;entrypoint
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Args &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tty &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tty
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Privileged &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Privileged
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;User
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WorkingDir &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WorkingDir
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;registerExecCommand&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cntr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; NewConfig initializes the a new exec configuration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;NewConfig&lt;&#x2F;span&gt;&lt;span&gt;() *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Config &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;:           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stringid&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GenerateRandomID&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StreamConfig&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewConfig&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Started&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;chan struct&lt;&#x2F;span&gt;&lt;span&gt;{}),
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Daemon&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;registerExecCommand&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;container &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;container&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Storing execs in container in order to kill them gracefully whenever the container is stopped or removed.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;container&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecCommands&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Storing execs in daemon for easy access via Engine API.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execCommands&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;到此为止，逻辑关系就比较清晰了。&lt;code&gt;postContainerExecCreate&lt;&#x2F;code&gt; 的路由参数 &lt;code&gt;name&lt;&#x2F;code&gt; 就是 &lt;code&gt;container id&lt;&#x2F;code&gt;。&lt;code&gt;*Daemon.ContainerExecCreate&lt;&#x2F;code&gt; 内部创建了一个随机的 &lt;code&gt;exec id&lt;&#x2F;code&gt; 保存在 &lt;code&gt;execConfig&lt;&#x2F;code&gt; 中，同时在 &lt;code&gt;execConfig&lt;&#x2F;code&gt; 持有了 &lt;code&gt;container id&lt;&#x2F;code&gt;。所以，对于一个 &lt;code&gt;container&lt;&#x2F;code&gt; 的多次 &lt;code&gt;exec&lt;&#x2F;code&gt; 命令使用不同的 &lt;code&gt;exec id&lt;&#x2F;code&gt;，但他们共同持有相同的 &lt;code&gt;container id&lt;&#x2F;code&gt;。而后调用 &lt;code&gt;*Daemon.registerExecCommand&lt;&#x2F;code&gt; 将 &lt;code&gt;execConfig&lt;&#x2F;code&gt; 以 &lt;code&gt;exec id&lt;&#x2F;code&gt; 作为索引添加到缓存中。&lt;&#x2F;p&gt;
&lt;p&gt;回到函数 &lt;code&gt;func (daemon *Daemon) ContainerExecStart&lt;&#x2F;code&gt;，通过 &lt;code&gt;exec id&lt;&#x2F;code&gt; 可以获取到不同的 &lt;code&gt;ec&lt;&#x2F;code&gt; 对象，调用 &lt;code&gt;ec.Lock()&lt;&#x2F;code&gt; 的锁粒度为 &lt;code&gt;exec id&lt;&#x2F;code&gt;，对于同一个 &lt;code&gt;container&lt;&#x2F;code&gt; 的多次执行 &lt;code&gt;exec&lt;&#x2F;code&gt;，他们持有的 &lt;code&gt;container id&lt;&#x2F;code&gt; 是相同的，因此 &lt;code&gt;c.ExecCommands.Lock()&lt;&#x2F;code&gt; 的锁粒度是 &lt;code&gt;container&lt;&#x2F;code&gt; 级别。&lt;&#x2F;p&gt;
&lt;p&gt;综上所述，可以确定当前 &lt;code&gt;goroutine&lt;&#x2F;code&gt; 未释放两把锁资源，会导致之后的 &lt;code&gt;exec&lt;&#x2F;code&gt; 操作是一定会失败的。但阻塞在这里的原因还不清晰。从函数调用栈可以看到当前 &lt;code&gt;goroutine&lt;&#x2F;code&gt; 在等待 &lt;code&gt;gRPC&lt;&#x2F;code&gt; 的响应。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;daemon.containerd&lt;&#x2F;code&gt; 的类型是接口 &lt;code&gt;github.com&#x2F;docker&#x2F;docker&#x2F;libcontainerd&#x2F;types.Client&lt;&#x2F;code&gt;，其实现者是位于 &lt;code&gt;docker&#x2F;libcontainerd&#x2F;remote&#x2F;client.go&lt;&#x2F;code&gt; 的 &lt;code&gt;struct client&lt;&#x2F;code&gt; 类型:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client   &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Client
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stateDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;logger   &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;logrus&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Entry
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ns       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;backend         libcontainerdtypes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Backend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eventQ          queue&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Queue
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oomMu           sync&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Mutex
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oom             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v2runcoptionsMu sync&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Mutex
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; v2runcoptions is used for copying options specified on Create() to Start()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v2runcoptions &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v2runcoptions&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Options
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其内部包含字段 &lt;code&gt;client&lt;&#x2F;code&gt; 是 &lt;code&gt;github.com&#x2F;containerd&#x2F;containerd&#x2F;client.go&lt;&#x2F;code&gt; 的 &lt;code&gt;Client&lt;&#x2F;code&gt; 类型。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; docker&#x2F;libcontainerd&#x2F;remote&#x2F;client.go:L265
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Exec creates exec process.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The containerd client calls Exec to register the exec config in the shim side.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; When the client calls Start, the shim will create stdin fifo if needs. But
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; for the container main process, the stdin fifo will be created in Create not
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the Start call. stdinCloseSync channel should be closed after Start exec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; process.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Exec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;processID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;specs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;withStdin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attachStdio libcontainerdtypes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;StdioCallback&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 根据 containerID，获取到对应的 container 对象，
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ctr 的类型是接口 github.com&#x2F;containerd&#x2F;containerd.Container
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 其具体实现者是类型 *github.com&#x2F;containerd&#x2F;containerd.container
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getContainer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Task is the executable object within containerd
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 通过 container 创建一个 github.com&#x2F;containerd&#x2F;containerd.task 类型，其实现了 Task 接口
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 对 container 的每一次操作，都是一个 Task
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerderrors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsNotFound&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WithStack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errdefs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;InvalidParameter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;container is not running&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wrapError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p              containerd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Process
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rio            cio&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;IO
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdinCloseSync &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;chan struct&lt;&#x2F;span&gt;&lt;span&gt;{})
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Labels&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wrapError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fifos &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newFIFOSet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DockerContainerBundlePath&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;processID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;withStdin&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Terminal&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defer func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rio &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rio&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cancel&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rio&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Exec creates a new process inside the task
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Exec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;processID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cio&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rio&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createIO&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fifos&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;processID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdinCloseSync&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attachStdio&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rio&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdinCloseSync&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerderrors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsAlreadyExists&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WithStack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errdefs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Conflict&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id already in use&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wrapError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Signal c.createIO that it can call CloseIO
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the stdin of exec process will be created after p.Start in containerd
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdinCloseSync&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; use new context for cleanup because old one may be cancelled by user, but leave a timeout to make sure
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we are not waiting forever if containerd is unresponsive or to work around fifo cancelling issues in
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; older containerd-shim
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cancel &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WithTimeout&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Background&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;45&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cancel&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Delete&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wrapError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pid&lt;&#x2F;span&gt;&lt;span&gt;()), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如下是函数 &lt;code&gt;task.Exec&lt;&#x2F;code&gt;，其内部调用了 &lt;code&gt;github.com&#x2F;containerd&#x2F;containerd.Client.TaskService().Exec&lt;&#x2F;code&gt; 函数执行 &lt;code&gt;Exec&lt;&#x2F;code&gt; 操作:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Exec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;specs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ioCreate cio&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Creator&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;== &amp;quot;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Wrapf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errdefs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrInvalidArgument&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exec id must not be empty&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ioCreate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defer func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cancel&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;typeurl&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MarshalAny&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tasks&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecProcessRequest&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContainerID&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecID&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Terminal&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Terminal&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdin&lt;&#x2F;span&gt;&lt;span&gt;:       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdin&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stderr&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stderr&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Spec&lt;&#x2F;span&gt;&lt;span&gt;:        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 这是一个 gRPC  请求
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TaskService&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Exec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cancel&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Wait&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errdefs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FromGRPC&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Start starts the exec process
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TaskService&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tasks&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StartRequest&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContainerID&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecID&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cancel&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Wait&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errdefs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FromGRPC&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pid &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pid
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cha-kan-jin-cheng-zhuang-tai&quot;&gt;查看进程状态&lt;&#x2F;h3&gt;
&lt;p&gt;查看容器的 &lt;code&gt;pid&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker inspect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f &lt;&#x2F;span&gt;&lt;span&gt;{{.State.Pid}} e318f67bce5c
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;^C
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但很遗憾，当前无法执行 &lt;code&gt;docker inspect&lt;&#x2F;code&gt;。尝试根据 &lt;code&gt;container id&lt;&#x2F;code&gt; 获取 &lt;code&gt;pid&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -ef &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; e318f67bce5c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;      2645 12397  0 3月15 ?       00:00:00 &#x2F;usr&#x2F;bin&#x2F;runc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --root&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;var&#x2F;run&#x2F;docker&#x2F;runtime-runc&#x2F;moby&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --log&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;run&#x2F;containerd&#x2F;io.containerd.runtime.v2.task&#x2F;moby&#x2F;e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b&#x2F;log.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --log-format&lt;&#x2F;span&gt;&lt;span&gt; json exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --process&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;runc-process256765632&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --console-socket&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;pty518048165&#x2F;pty.sock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --detach --pid-file&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;run&#x2F;containerd&#x2F;io.containerd.runtime.v2.task&#x2F;moby&#x2F;e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b&#x2F;12895df315fe38432c96579dd329ac4468f373781ba36bf272bbe3829a4afbd6.pid e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;     12397     1  0 3月15 ?       00:00:08 &#x2F;usr&#x2F;bin&#x2F;containerd-shim-runc-v2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -namespace&lt;&#x2F;span&gt;&lt;span&gt; moby&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -id&lt;&#x2F;span&gt;&lt;span&gt; e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -address&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;run&#x2F;containerd&#x2F;containerd.sock
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ps aux | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; e318f67bce5c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;      2645  0.0  0.0 239068 18704 ?        Sl   3月15   0:00 &#x2F;usr&#x2F;bin&#x2F;runc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --root&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;var&#x2F;run&#x2F;docker&#x2F;runtime-runc&#x2F;moby&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --log&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;run&#x2F;containerd&#x2F;io.containerd.runtime.v2.task&#x2F;moby&#x2F;e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b&#x2F;log.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --log-format&lt;&#x2F;span&gt;&lt;span&gt; json exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --process&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;runc-process256765632&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --console-socket&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;pty518048165&#x2F;pty.sock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --detach --pid-file&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;run&#x2F;containerd&#x2F;io.containerd.runtime.v2.task&#x2F;moby&#x2F;e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b&#x2F;12895df315fe38432c96579dd329ac4468f373781ba36bf272bbe3829a4afbd6.pid e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;     12397  0.0  0.0 111976 11632 ?        Sl   3月15   0:08 &#x2F;usr&#x2F;bin&#x2F;containerd-shim-runc-v2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -namespace&lt;&#x2F;span&gt;&lt;span&gt; moby&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -id&lt;&#x2F;span&gt;&lt;span&gt; e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -address&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;run&#x2F;containerd&#x2F;containerd.sock
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;果然可行，可以看到进程关系为 &lt;code&gt;pid 1&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;pid 12397&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;pid 2645&lt;&#x2F;code&gt;，即 &lt;code&gt;init&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;containerd-shim-runc-v2&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;runc&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;查看容器进程组:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pstree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -ap&lt;&#x2F;span&gt;&lt;span&gt; 2645
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runc,2645 --root&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;var&#x2F;run&#x2F;docker&#x2F;runtime-runc&#x2F;moby&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --log&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;run&#x2F;containerd&#x2F;io.containerd.runtime.v2.task&#x2F;moby&#x2F;e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b&#x2F;log.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --log-format&lt;&#x2F;span&gt;&lt;span&gt; json exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --process&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;runc-process256765632&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --console-socket&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;tmp&#x2F;pt
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├─runc:[2:INIT],2658&lt;&#x2F;span&gt;&lt;span&gt; init
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   ├─{runc:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;2:INIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;},2659
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   ├─{runc:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;2:INIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;},2660
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   ├─{runc:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;2:INIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;},2661
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   ├─{runc:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;2:INIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;},2662
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └─{runc:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;2:INIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;},2663
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├─{runc&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,2650
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├─{runc&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,2651
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├─{runc&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,2652
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├─{runc&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,2653
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├─{runc&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,2654
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└─{runc&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,2655
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -al&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;proc&#x2F;2645&#x2F;fd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;总用量&lt;&#x2F;span&gt;&lt;span&gt; 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dr-x------&lt;&#x2F;span&gt;&lt;span&gt; 2 root root  0 3月  16 12:46 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dr-xr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 9 root root  0 3月  15 23:20 ..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lr-x------&lt;&#x2F;span&gt;&lt;span&gt; 1 root root 64 3月  16 12:46 0 -&amp;gt; &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l-wx------&lt;&#x2F;span&gt;&lt;span&gt; 1 root root 64 3月  16 12:46 1 -&amp;gt; pipe:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1658705&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l-wx------&lt;&#x2F;span&gt;&lt;span&gt; 1 root root 64 3月  16 12:46 2 -&amp;gt; pipe:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1658705&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lrwx------&lt;&#x2F;span&gt;&lt;span&gt; 1 root root 64 3月  16 12:46 27 -&amp;gt; &#x2F;dev&#x2F;pts&#x2F;ptmx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l-wx------&lt;&#x2F;span&gt;&lt;span&gt; 1 root root 64 3月  16 12:46 3 -&amp;gt; &#x2F;run&#x2F;containerd&#x2F;io.containerd.runtime.v2.task&#x2F;moby&#x2F;e318f67bce5c36e39bc2e0c136ea9cd366b22ba5ae216c485232ce4a0541858b&#x2F;log.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lrwx------&lt;&#x2F;span&gt;&lt;span&gt; 1 root root 64 3月  16 12:46 4 -&amp;gt; anon_inode:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;eventpoll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lrwx------&lt;&#x2F;span&gt;&lt;span&gt; 1 root root 64 3月  16 12:46 5 -&amp;gt; socket:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1727233&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lrwx------&lt;&#x2F;span&gt;&lt;span&gt; 1 root root 64 3月  16 12:46 6 -&amp;gt; socket:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1727233&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lrwx------&lt;&#x2F;span&gt;&lt;span&gt; 1 root root 64 3月  16 12:46 8 -&amp;gt; socket:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1727235&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lr-x------&lt;&#x2F;span&gt;&lt;span&gt; 1 root root 64 3月  16 12:46 9 -&amp;gt; pipe:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1727236&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pstack 2645
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt; 7 (Thread 0x7fdd5f98b700 (LWP 2650))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#0  runtime.futex () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;sys_linux_amd64.s:536
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#1  0x000055dcaf1afd34 in runtime.futexsleep (addr=0x55dcafe6eb10 &amp;lt;runtime.sched+272&amp;gt;, val=0, ns=60000000000) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;os_linux.go:50
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#2  0x000055dcaf18f3b0 in runtime.notetsleep_internal (n=0x55dcafe6eb10 &amp;lt;runtime.sched+272&amp;gt;, ns=60000000000, ~r2=&amp;lt;optimized out&amp;gt;) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;lock_futex.go:193
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#3  0x000055dcaf18f485 in runtime.notetsleep (n=0x55dcafe6eb10 &amp;lt;runtime.sched+272&amp;gt;, ns=60000000000, ~r2=&amp;lt;optimized out&amp;gt;) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;lock_futex.go:216
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#4  0x000055dcaf1bebf0 in runtime.sysmon () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:4322
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#5  0x000055dcaf1b6eb7 in runtime.mstart1 () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:1201
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#6  0x000055dcaf1b6dd0 in runtime.mstart () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:1167
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#7  0x000055dcaf63ef13 in crosscall_amd64 () at gcc_amd64.S:35
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#8  0x00007fdd5f98b700 in ?? ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#9  0x0000000000000000 in ?? ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt; 6 (Thread 0x7fdd5f18a700 (LWP 2651))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#0  runtime.futex () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;sys_linux_amd64.s:536
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#1  0x000055dcaf1afcb6 in runtime.futexsleep (addr=0xc000042848, val=0, ns=-1) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;os_linux.go:44
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#2  0x000055dcaf18f223 in runtime.notesleep (n=0xc000042848) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;lock_futex.go:151
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#3  0x000055dcaf1b8404 in runtime.stopm () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:1934
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#4  0x000055dcaf1b9535 in runtime.findrunnable (gp=0xc00002c000, inheritTime=false) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:2397
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#5  0x000055dcaf1ba1f2 in runtime.schedule () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:2530
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#6  0x000055dcaf1ba533 in runtime.park_m (gp=0xc000000180) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:2616
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#7  0x000055dcaf1de0e3 in runtime.mcall () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;asm_amd64.s:318
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#8  0x0000000000000000 in ?? ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt; 5 (Thread 0x7fdd5e989700 (LWP 2652))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#0  runtime.futex () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;sys_linux_amd64.s:536
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#1  0x000055dcaf1afcb6 in runtime.futexsleep (addr=0x55dcafe8b560 &amp;lt;runtime.sig&amp;gt;, val=0, ns=-1) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;os_linux.go:44
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#2  0x000055dcaf18f308 in runtime.notetsleep_internal (n=0x55dcafe8b560 &amp;lt;runtime.sig&amp;gt;, ns=-1, ~r2=&amp;lt;optimized out&amp;gt;) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;lock_futex.go:174
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#3  0x000055dcaf18f510 in runtime.notetsleepg (n=0x55dcafe8b560 &amp;lt;runtime.sig&amp;gt;, ns=-1, ~r2=&amp;lt;optimized out&amp;gt;) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;lock_futex.go:228
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#4  0x000055dcaf1c85be in os&#x2F;signal.signal_recv (~r0=&amp;lt;optimized out&amp;gt;) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;sigqueue.go:147
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#5  0x000055dcaf60ee84 in os&#x2F;signal.loop () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;os&#x2F;signal&#x2F;signal_unix.go:23
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#6  0x000055dcaf1e01f1 in runtime.goexit () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;asm_amd64.s:1357
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#7  0x0000000000000000 in ?? ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt; 4 (Thread 0x7fdd5e188700 (LWP 2653))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#0  runtime.epollwait () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;sys_linux_amd64.s:673
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#1  0x000055dcaf1afb72 in runtime.netpoll (block=true, ~r1=...) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;netpoll_epoll.go:71
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#2  0x000055dcaf1b950b in runtime.findrunnable (gp=0xc000030a00, inheritTime=false) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:2378
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#3  0x000055dcaf1ba1f2 in runtime.schedule () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:2530
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#4  0x000055dcaf1ba533 in runtime.park_m (gp=0xc0001ba480) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:2616
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#5  0x000055dcaf1de0e3 in runtime.mcall () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;asm_amd64.s:318
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#6  0x0000000000000000 in ?? ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt; 3 (Thread 0x7fdd5d987700 (LWP 2654))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#0  runtime.futex () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;sys_linux_amd64.s:536
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#1  0x000055dcaf1afcb6 in runtime.futexsleep (addr=0x55dcafe8b478 &amp;lt;runtime.newmHandoff+24&amp;gt;, val=0, ns=-1) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;os_linux.go:44
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#2  0x000055dcaf18f223 in runtime.notesleep (n=0x55dcafe8b478 &amp;lt;runtime.newmHandoff+24&amp;gt;) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;lock_futex.go:151
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#3  0x000055dcaf1b8324 in runtime.templateThread () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:1912
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#4  0x000055dcaf1b6eb7 in runtime.mstart1 () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:1201
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#5  0x000055dcaf1b6dd0 in runtime.mstart () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:1167
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#6  0x000055dcaf63ef13 in crosscall_amd64 () at gcc_amd64.S:35
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#7  0x00007fdd5d987700 in ?? ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#8  0x0000000000000000 in ?? ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt; 2 (Thread 0x7fdd5d186700 (LWP 2655))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#0  syscall.Syscall () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;syscall&#x2F;asm_linux_amd64.s:27
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#1  0x000055dcaf233f4c in syscall.read (fd=8, p=&amp;lt;error reading variable: access outside bounds of object referenced via synthetic pointer&amp;gt;, n=&amp;lt;optimized out&amp;gt;, err=...) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;syscall&#x2F;zsyscall_linux_amd64.go:732
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#2  0x000055dcaf24c986 in syscall.Read (fd=&amp;lt;optimized out&amp;gt;, p=..., n=&amp;lt;optimized out&amp;gt;, err=...) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;syscall&#x2F;syscall_unix.go:183
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#3  internal&#x2F;poll.(*FD).Read (fd=0xc00014f080, p=..., ~r1=&amp;lt;optimized out&amp;gt;, ~r2=...) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;internal&#x2F;poll&#x2F;fd_unix.go:165
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#4  0x000055dcaf254813 in os.(*File).read (f=0xc000154818, b=..., n=&amp;lt;optimized out&amp;gt;, err=...) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;os&#x2F;file_unix.go:259
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#5  os.(*File).Read (f=0xc000154818, b=..., n=&amp;lt;optimized out&amp;gt;, err=...) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;os&#x2F;file.go:116
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#6  0x000055dcaf37a54d in encoding&#x2F;json.(*Decoder).refill (dec=0xc0001cec60, ~r0=...) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;encoding&#x2F;json&#x2F;stream.go:161
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#7  0x000055dcaf37a2de in encoding&#x2F;json.(*Decoder).readValue (dec=0xc0001cec60, ~r0=&amp;lt;optimized out&amp;gt;, ~r1=...) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;encoding&#x2F;json&#x2F;stream.go:136
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#8  0x000055dcaf379dab in encoding&#x2F;json.(*Decoder).Decode (dec=0xc0001cec60, v=..., ~r1=...) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;encoding&#x2F;json&#x2F;stream.go:63
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#9  0x000055dcaf5ca997 in github.com&#x2F;opencontainers&#x2F;runc&#x2F;libcontainer.parseSync (pipe=..., fn={void (github.com&#x2F;opencontainers&#x2F;runc&#x2F;libcontainer.syncT *, error *)} 0xc0001a28f8, ~r2=...) at &#x2F;go&#x2F;src&#x2F;github.com&#x2F;opencontainers&#x2F;runc&#x2F;libcontainer&#x2F;sync.go:76
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#10 0x000055dcaf5bc1ff in github.com&#x2F;opencontainers&#x2F;runc&#x2F;libcontainer.(*setnsProcess).start (p=0xc00022e6c0, err=...) at &#x2F;go&#x2F;src&#x2F;github.com&#x2F;opencontainers&#x2F;runc&#x2F;libcontainer&#x2F;process_linux.go:146
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#11 0x000055dcaf5a3564 in github.com&#x2F;opencontainers&#x2F;runc&#x2F;libcontainer.(*linuxContainer).start (c=0xc00020c000, process=0xc00017d540, ~r1=...) at &#x2F;go&#x2F;src&#x2F;github.com&#x2F;opencontainers&#x2F;runc&#x2F;libcontainer&#x2F;container_linux.go:365
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#12 0x000055dcaf5a2a8d in github.com&#x2F;opencontainers&#x2F;runc&#x2F;libcontainer.(*linuxContainer).Start (c=0xc00020c000, process=0xc00017d540, ~r1=...) at &#x2F;go&#x2F;src&#x2F;github.com&#x2F;opencontainers&#x2F;runc&#x2F;libcontainer&#x2F;container_linux.go:262
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#13 0x000055dcaf5a2c6b in github.com&#x2F;opencontainers&#x2F;runc&#x2F;libcontainer.(*linuxContainer).Run (c=0xc00020c000, process=0xc00017d540, ~r1=...) at &#x2F;go&#x2F;src&#x2F;github.com&#x2F;opencontainers&#x2F;runc&#x2F;libcontainer&#x2F;container_linux.go:272
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#14 0x000055dcaf633fb8 in main.(*runner).run (r=0xc0001a3490, config=0xc00020c0f0, ~r1=&amp;lt;optimized out&amp;gt;, ~r2=...) at &#x2F;go&#x2F;src&#x2F;github.com&#x2F;opencontainers&#x2F;runc&#x2F;utils_linux.go:322
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#15 0x000055dcaf629394 in main.execProcess (context=0xc0001ce160, ~r1=&amp;lt;optimized out&amp;gt;, ~r2=...) at &#x2F;go&#x2F;src&#x2F;github.com&#x2F;opencontainers&#x2F;runc&#x2F;exec.go:157
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#16 0x000055dcaf636635 in main.glob..func5 (context=0xc0001ce160, ~r1=...) at &#x2F;go&#x2F;src&#x2F;github.com&#x2F;opencontainers&#x2F;runc&#x2F;exec.go:104
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#17 0x000055dcaf5f3180 in github.com&#x2F;urfave&#x2F;cli.HandleAction (action=..., context=0xc0001ce160, err=...) at &#x2F;go&#x2F;src&#x2F;github.com&#x2F;opencontainers&#x2F;runc&#x2F;vendor&#x2F;github.com&#x2F;urfave&#x2F;cli&#x2F;app.go:523
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#18 0x000055dcaf5f3eee in github.com&#x2F;urfave&#x2F;cli.Command.Run (c=..., ctx=0xc0001ce000, err=...) at &#x2F;go&#x2F;src&#x2F;github.com&#x2F;opencontainers&#x2F;runc&#x2F;vendor&#x2F;github.com&#x2F;urfave&#x2F;cli&#x2F;command.go:174
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#19 0x000055dcaf5f122a in github.com&#x2F;urfave&#x2F;cli.(*App).Run (a=0xc0001c2000, arguments=..., err=...) at &#x2F;go&#x2F;src&#x2F;github.com&#x2F;opencontainers&#x2F;runc&#x2F;vendor&#x2F;github.com&#x2F;urfave&#x2F;cli&#x2F;app.go:276
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#20 0x000055dcaf62c4b9 in main.main () at &#x2F;go&#x2F;src&#x2F;github.com&#x2F;opencontainers&#x2F;runc&#x2F;main.go:151
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt; 1 (Thread 0x7fdd625dc740 (LWP 2645))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#0  runtime.futex () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;sys_linux_amd64.s:536
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#1  0x000055dcaf1afcb6 in runtime.futexsleep (addr=0x55dcafe6f448 &amp;lt;runtime.m0+328&amp;gt;, val=0, ns=-1) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;os_linux.go:44
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#2  0x000055dcaf18f223 in runtime.notesleep (n=0x55dcafe6f448 &amp;lt;runtime.m0+328&amp;gt;) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;lock_futex.go:151
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#3  0x000055dcaf1b8a6c in runtime.stoplockedm () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:2074
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#4  0x000055dcaf1ba3b9 in runtime.schedule () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:2475
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#5  0x000055dcaf1ba533 in runtime.park_m (gp=0xc0001ba300) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:2616
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#6  0x000055dcaf1de0e3 in runtime.mcall () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;asm_amd64.s:318
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#7  0x000055dcaf1de008 in runtime.rt0_go () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;asm_amd64.s:220
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#8  0x0000000000000000 in ?? ()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pstack 2658
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 此处无响应
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# killall -9 pstack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# killall -9 gdb
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;proc&#x2F;2658&#x2F;stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;] ceph_mdsc_do_request+0x186&#x2F;0x240 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;ceph&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;] __ceph_do_getattr+0x9d&#x2F;0x200 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;ceph&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;] ceph_permission+0x2a&#x2F;0x50 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;ceph&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;] inode_permission+0xc0&#x2F;0x150
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;] ksys_chdir+0x59&#x2F;0xd0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;] __x64_sys_chdir+0x12&#x2F;0x20
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;] do_syscall_64+0x60&#x2F;0x190
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;] entry_SYSCALL_64_after_hwframe+0x44&#x2F;0xa9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;] 0xffffffffffffffff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pod 持续处于 Terminating 状态</title>
		<published>2021-03-12T10:11:34+00:00</published>
		<updated>2021-03-12T10:11:34+00:00</updated>
		<link href="https://blog.kiyoko.io/pod-stuck-in-terminating-state/" type="text/html"/>
		<id>https://blog.kiyoko.io/pod-stuck-in-terminating-state/</id>
		<content type="html">&lt;h2 id=&quot;gai-shu&quot;&gt;概述&lt;&#x2F;h2&gt;
&lt;p&gt;当删除 &lt;code&gt;Pod&lt;&#x2F;code&gt; 时&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;containersolutions.github.io&#x2F;runbooks&#x2F;posts&#x2F;kubernetes&#x2F;pod-stuck-in-terminating-state&#x2F;&quot;&gt;pod stuck in terminating state&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>InnoDB 入门</title>
		<published>2021-03-08T13:27:56+00:00</published>
		<updated>2021-03-08T13:27:56+00:00</updated>
		<link href="https://blog.kiyoko.io/innodb-introduction/" type="text/html"/>
		<id>https://blog.kiyoko.io/innodb-introduction/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 是一种平衡可靠性与性能的通用存储引擎。在 &lt;code&gt;MySQL 8.0&lt;&#x2F;code&gt; 中，通过 &lt;code&gt;CREATE TABLE&lt;&#x2F;code&gt; 语句创建表时，如若未通过 &lt;code&gt;ENGINE&lt;&#x2F;code&gt; 子句指定引擎，将采用 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 作为默认的存储引擎。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;innodb-de-guan-jian-you-shi&quot;&gt;InnoDB 的关键优势&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 的 &lt;code&gt;DML&lt;&#x2F;code&gt; 操作遵循 &lt;code&gt;ACID&lt;&#x2F;code&gt; 模型，且具有提交、回滚、错误恢复等事务的功能与能力，保障用户数据安全。&lt;&#x2F;li&gt;
&lt;li&gt;行级锁定和 &lt;code&gt;Oracle&lt;&#x2F;code&gt; 风格的 &lt;strong&gt;一致性读取&lt;&#x2F;strong&gt; 提高了多用户使用时的并发性与性能。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 表将数据存放在磁盘上，基于 &lt;strong&gt;主键&lt;&#x2F;strong&gt; 来优化查询。每个 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 表都有一个称为 &lt;strong&gt;聚集索引&lt;&#x2F;strong&gt; 的主键索引，使用该索引组织数据可以将查找主键的 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 最小化。&lt;&#x2F;li&gt;
&lt;li&gt;为了维护数据完整性，&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 支持外键约束。当使用外键时，&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 会检查插入、更新和删除等语句，来确保它们不会导致相关表之间的数据不一致。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;innodb-gong-neng-lie-biao&quot;&gt;InnoDB 功能列表&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Feature&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Support&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;B-tree indexes&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Backup&#x2F;point-in-time recovery (在服务端实现，而非存储引擎。)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Cluster database support&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;No&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Clustered indexes&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Compressed data&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Data caches&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Encrypted data&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes (在服务器端通过加密功能实现;在MySQL 5.7和更高版本中，支持数据静止加密。)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Foreign key support&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Full-text search indexes&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes (在MySQL 5.6和更高版本中支持全文索引。)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Geospatial data type support&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Geospatial indexing support&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes (MySQL 5.7和更高版本中提供了对地理空间索引的支持。)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Hash indexes&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;No (InnoDB内部利用哈希索引来实现自适应哈希索引特性。)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Index caches&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Locking granularity&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Row&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;MVCC&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Replication support (在服务端实现，而非存储引擎。)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Storage limits&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;64TB&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;T-tree indexes&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;No&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Transactions&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Update statistics for data dictionary&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;shi-yong-innodb-de-you-shi&quot;&gt;使用 InnoDB 的优势&lt;&#x2F;h2&gt;
&lt;p&gt;使用 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 有如下优势:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果服务器由于硬件或软件问题而意外退出，无论崩溃时数据库内部遇到什么问题，在重新启动数据库后都不需要做任何特殊的操作。&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 会恢复崩溃前已经确定的更改，并撤销正在进行但未提交的更改，允许用户重新启动并从停止的地方继续。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 存储引擎维护其内部的缓冲池，当数据被访问时，该缓冲池会在内存中缓存表和索引数据。频繁被使用到的数据将直接从内存中处理。多种类型的信息都可以通过使用该缓存来提高处理速度。在专用的数据库服务器上，通常会将高达 &lt;code&gt;80%&lt;&#x2F;code&gt; 的物理内存分配给缓冲池使用。&lt;&#x2F;li&gt;
&lt;li&gt;可以设置外键，保证多个相关数据表之间的数据完整性。&lt;&#x2F;li&gt;
&lt;li&gt;如果磁盘或内存中的数据损坏，&lt;strong&gt;校验和&lt;&#x2F;strong&gt; 机制会在使问题假数据之前向用户发出警告。变量 &lt;code&gt;innodb_checksum_algorithm&lt;&#x2F;code&gt; 定义了 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 使用了何种校验和算法。&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;WHERE&lt;&#x2F;code&gt;、&lt;code&gt;ORDER BY&lt;&#x2F;code&gt;、&lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 等子句与 &lt;code&gt;JOIN&lt;&#x2F;code&gt; 操作中使用主键时，&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 将自动优化涉及这些列的操作，使这些操作的执行速度非常快。&lt;&#x2F;li&gt;
&lt;li&gt;更改缓冲(change buffering) 这一自动极致会对插入，更新和删除进行优化。 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 不仅允许对同一表的并发读写访问，而且会缓存被更改数据，使磁盘 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 流水线化。&lt;&#x2F;li&gt;
&lt;li&gt;性能优势并不仅限于哪些需要很长时间查询的大表。当表中的某些被反复访问时，&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 会通过自适应哈希索引( Adaptive Hash Index) 处理，加快查询速度，达到类似使用哈希表查找的效果。&lt;&#x2F;li&gt;
&lt;li&gt;允许压缩表和关联索引。&lt;&#x2F;li&gt;
&lt;li&gt;加密数据。&lt;&#x2F;li&gt;
&lt;li&gt;在线创建和删除索引，执行其他 &lt;code&gt;DDL&lt;&#x2F;code&gt; 操作对性能和可用性有较小的影响。&lt;&#x2F;li&gt;
&lt;li&gt;截断每个表文件的表空间的速度非常快，被释放的磁盘空间不仅可以供 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 使用，操作系统同样可以重用。&lt;&#x2F;li&gt;
&lt;li&gt;表数据的存储布局对于使用动态(DYNAMIC) 行格式的 &lt;code&gt;BLOB&lt;&#x2F;code&gt; 和长文本字段更有效。&lt;&#x2F;li&gt;
&lt;li&gt;可以通过查询 &lt;code&gt;INFORMATION_SCHEMA&lt;&#x2F;code&gt; 表来监视存储引擎的内部工作。&lt;&#x2F;li&gt;
&lt;li&gt;可以通过查询 &lt;code&gt;performance_schema&lt;&#x2F;code&gt; 表来监控存储引擎的性能详情。&lt;&#x2F;li&gt;
&lt;li&gt;可以混合使用 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 表和使用其他 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 存储引擎的表，即使是在同一个语句中。例如，可以使用 &lt;code&gt;JOIN&lt;&#x2F;code&gt; 操作在单个查询中组合来自 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 和内存表的数据。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 的设计目标是在处理大数据量时的提高 &lt;code&gt;CPU&lt;&#x2F;code&gt; 效率并达到最高性能。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 表可以处理大量数据，即使在文件大小被限制为 &lt;code&gt;2GB&lt;&#x2F;code&gt; 的操作系统上。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;innodb-biao-de-zui-jia-shi-jian&quot;&gt;InnoDB 表的最佳实践&lt;&#x2F;h2&gt;
&lt;p&gt;在使用 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 的表时有如下最佳实践:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用查询最频繁的一列或多列作为表的主键，如果没有明显的主键，则使用自动递增 &lt;code&gt;ID&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;JOIN&lt;&#x2F;code&gt; 操作根据相同的 &lt;code&gt;ID&lt;&#x2F;code&gt; 值从多个表中从多个表中获取数据。在 &lt;code&gt;JOIN&lt;&#x2F;code&gt; 的列上定义外键约束，并为这些列声明相同的数据类型。外键约束可以确保被引用的列上是有索引的，这也可以提高性能。同时，外键约束可以将删除和更新的结果在所有收到影响的表上生效，保证当父表中没有相应的 &lt;code&gt;ID&lt;&#x2F;code&gt; 时，不会将数据插入到子表中。&lt;&#x2F;li&gt;
&lt;li&gt;关闭自动提交可以提高性能 (受到存储设备写入速度的限制)。&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;START TRANSACTION&lt;&#x2F;code&gt; 和 &lt;code&gt;COMMIT&lt;&#x2F;code&gt; 语句，将一组相关的 &lt;code&gt;DML&lt;&#x2F;code&gt; 操作，以事务的形式执行。事务的范围过小会导致频繁提交，范围过大会导致提交间隔太久。&lt;&#x2F;li&gt;
&lt;li&gt;禁止使用 &lt;code&gt;LOCK TABLES&lt;&#x2F;code&gt; 语句。&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 可以同时处理多个会话对同一个表的读写，而不会牺牲可靠性和高性能。要获得对一组行的独占写访问，请使用 &lt;code&gt;SELECT ... FOR UPDATE&lt;&#x2F;code&gt; 只锁定要更新的行。&lt;&#x2F;li&gt;
&lt;li&gt;启用变量 &lt;code&gt;innodb_file_per_table&lt;&#x2F;code&gt;，或者使用通用表空间(general tablespaces) 将表的数据和索引放到单独的文件中，不建议使用 system 表空间(system tablespace)。默认启用变量 &lt;code&gt;innodb_file_per_table&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;压缩 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 表数据，在某些场景可以提升读写性能。&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;--sql_mode=NO_ENGINE_SUBSTITUTION&lt;&#x2F;code&gt; 参数启动服务，可避免使用禁止的引擎创建表。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;innodb-introduction.html&quot;&gt;Introduction to InnoDB&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;innodb-benefits.html&quot;&gt;Benefits of Using InnoDB Tables&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;innodb-best-practices.html&quot;&gt;Best Practices for InnoDB Tables&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>未设置 shm 导致 PyTorch 任务失败</title>
		<published>2021-03-05T10:01:27+00:00</published>
		<updated>2021-03-05T10:01:27+00:00</updated>
		<link href="https://blog.kiyoko.io/pytorch-fails-without-shm/" type="text/html"/>
		<id>https://blog.kiyoko.io/pytorch-fails-without-shm/</id>
		<content type="html">&lt;p&gt;最近，配合研发同学将原来在老集群上直接用 &lt;code&gt;docker&lt;&#x2F;code&gt; 运行的 &lt;code&gt;pytorch&lt;&#x2F;code&gt; 算法迁移到使用 &lt;code&gt;k8s&lt;&#x2F;code&gt; 的新集群上运行。结果，很不幸，研发同学说无法运行。错误日志如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-Traceback&lt;&#x2F;span&gt;&lt;span&gt; (most recent call last)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;miniconda3&#x2F;envs&#x2F;pyasr&#x2F;lib&#x2F;python3.7&#x2F;runpy.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 193, in _run_module_as_main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__main__&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; mod_spec)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;miniconda3&#x2F;envs&#x2F;pyasr&#x2F;lib&#x2F;python3.7&#x2F;runpy.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 85, in _run_code
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-exec&lt;&#x2F;span&gt;&lt;span&gt;(code, run_globals)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pytorch-asr&#x2F;egs&#x2F;chn_40h&#x2F;extend_code&#x2F;launch.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 29, in &amp;lt;module&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pytorch-asr&#x2F;asr&#x2F;launch.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 10, in main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-launch&lt;&#x2F;span&gt;&lt;span&gt;(args)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pytorch-asr&#x2F;asr&#x2F;cli&#x2F;launch.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 148, in launch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-trainer.train_on&lt;&#x2F;span&gt;&lt;span&gt;(data)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pytorch-asr&#x2F;asr&#x2F;trainer&#x2F;trainer.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 77, in train_on
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-self.train_epoch&lt;&#x2F;span&gt;&lt;span&gt;(data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pytorch-asr&#x2F;asr&#x2F;trainer&#x2F;trainer.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 41, in train_epoch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-return&lt;&#x2F;span&gt;&lt;span&gt; self._one_epoch(data_queue, is_training=True)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pytorch-asr&#x2F;asr&#x2F;trainer&#x2F;trainer.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 63, in _one_epoch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-return&lt;&#x2F;span&gt;&lt;span&gt; self.one_epoch(data_queue, is_training)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pytorch-asr&#x2F;asr&#x2F;trainer&#x2F;naive_trainer.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 115, in one_epoch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-for&lt;&#x2F;span&gt;&lt;span&gt; batch_idx, batch in enumerate(self.timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.profile(data_queue))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pytorch-asr&#x2F;asr&#x2F;trainer&#x2F;common.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 102, in profile
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-value&lt;&#x2F;span&gt;&lt;span&gt; = next(iterator)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;string&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 2, in get
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;miniconda3&#x2F;envs&#x2F;pyasr&#x2F;lib&#x2F;python3.7&#x2F;multiprocessing&#x2F;managers.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 834, in _callmethod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-raise&lt;&#x2F;span&gt;&lt;span&gt; convert_to_error(kind, result)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-_queue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-Empty
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;11:12:55[asr.utils.bootstrap]-WARNING-Version&lt;&#x2F;span&gt;&lt;span&gt; 0.3.1.dev28
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看到这个错误，就挺迷茫的。&lt;&#x2F;p&gt;
&lt;p&gt;根据错误信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pytorch-asr&#x2F;asr&#x2F;trainer&#x2F;naive_trainer.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 115, in one_epoch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-for&lt;&#x2F;span&gt;&lt;span&gt; batch_idx, batch in enumerate(self.timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.profile(data_queue))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pytorch-asr&#x2F;asr&#x2F;trainer&#x2F;common.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line 102, in profile
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10:59:01[asr.utils.bootstrap]-ERROR-value&lt;&#x2F;span&gt;&lt;span&gt; = next(iterator)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;推断是读数据的时候出现了问题。虽然看起来与 &lt;code&gt;GPU&lt;&#x2F;code&gt; 没有关系，但是，为了保险起见，依然对比了前后环境的 &lt;code&gt;NVIDIA Driver&lt;&#x2F;code&gt;，&lt;code&gt;CUDA&lt;&#x2F;code&gt; 等版本信息，结果是一致的。而且，&lt;code&gt;NCCL&lt;&#x2F;code&gt; 是在镜像中安装的，不太可能有问题。&lt;&#x2F;p&gt;
&lt;p&gt;之后，尝试在容器中安装 &lt;code&gt;perf&lt;&#x2F;code&gt;，但是失败了，尝试在容器中使用 &lt;code&gt;strace&lt;&#x2F;code&gt;，提示没有权限。&lt;&#x2F;p&gt;
&lt;p&gt;正在我继续死磕的时候，研发提供了另一段错误日志:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pytorch-956sg:9319:9379 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; include&#x2F;shm.h:48 NCCL WARN Error while creating shared memory segment nccl-shm-recv-183375136c5888b6-0-2-3 (size 9637888)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个错误就很有价值啊，创建共享内存失败。&lt;&#x2F;p&gt;
&lt;p&gt;此前，反复与研发同学确认过，是否只依赖于外部的 &lt;code&gt;NVIDIA Driver&lt;&#x2F;code&gt; 与 &lt;code&gt;CUDA&lt;&#x2F;code&gt;，得到了肯定的答复。因此，就一直以此为前提进行排查。但现在我产生了怀疑，问研发要来启动命令，隐藏敏感数据后如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -dit&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;data:&#x2F;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --name&lt;&#x2F;span&gt;&lt;span&gt; asr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --ipc&lt;&#x2F;span&gt;&lt;span&gt;=host image:latest &#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;果然就发现了隐藏信息: &lt;strong&gt;--ipc=host&lt;&#x2F;strong&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;因此，修改在原有创建任务的 &lt;code&gt;yaml&lt;&#x2F;code&gt; 文件中增加 &lt;code&gt;volume&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;       - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;asr
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;image:latest
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;dev&#x2F;shm
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shm
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;       - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shm
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emptyDir&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;medium&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Memory
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在容器内，挂载一个 &lt;code&gt;tmpfs&lt;&#x2F;code&gt; 到 &lt;code&gt;&#x2F;dev&#x2F;shm&lt;&#x2F;code&gt;。成功解决上述两个问题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;虽然成功解决了两个问题，但是对于第一个问题还是感到迷惑。虽然，根据答案反推原因，可以查到 &lt;code&gt;DataLoader&lt;&#x2F;code&gt; 在工作的时候会依赖于 &lt;code&gt;shm&lt;&#x2F;code&gt;。但是，查到的错误却不同于第一份错误日志。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;这次是运气好，遇到了第二个错误明显的提示。否则，可能就需要继续跟 &lt;code&gt;perf&lt;&#x2F;code&gt;，&lt;code&gt;strace&lt;&#x2F;code&gt; 作斗争了，甚至于调试 &lt;code&gt;coredump&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在遇到错误二之前，已经决定自己在新集群上使用 &lt;code&gt;docker&lt;&#x2F;code&gt; 运行看看了，其实，这样的话也能发现被隐藏的 &lt;code&gt;--ipc=host&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;最终要的一点，不要轻易相信他人给定的条件。即使对方不是有意隐瞒，也可能会由于遗忘，或本来就不清楚等各种原因，导致丢失已知条件。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>开闭原则</title>
		<published>2021-02-08T14:17:10+00:00</published>
		<updated>2021-02-08T14:17:10+00:00</updated>
		<link href="https://blog.kiyoko.io/programming-open-closed-principle/" type="text/html"/>
		<id>https://blog.kiyoko.io/programming-open-closed-principle/</id>
		<content type="html">&lt;h2 id=&quot;shi-yao-shi-kai-bi-yuan-ze&quot;&gt;什么是开闭原则&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;需求变化&lt;&#x2F;strong&gt; 是让开发者最为头痛的问题之一。通常在新增一个功能的时候，都会伴随着修改原有的代码。因此，理想情况是在新增功能时尽可能减少对已有代码的改动，避免因改动代码引入新的问题。&lt;&#x2F;p&gt;
&lt;p&gt;由此产生了一个编码设计原则: 开闭原则 (Open Close Principle)。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Software entities like classes, modules and functions should be &lt;strong&gt;open for extension&lt;&#x2F;strong&gt; but &lt;strong&gt;closed for modifications&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;ju-ge-li-zi-yong-hu-zhu-ce-mo-kuai&quot;&gt;举个栗子 —— 用户注册模块&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;yuan-shi-xu-qiu&quot;&gt;原始需求&lt;&#x2F;h3&gt;
&lt;p&gt;业务初期，只允许使用邮箱注册，因此，需要实现向邮箱发送验证码的功能。&lt;&#x2F;p&gt;
&lt;p&gt;定义邮箱发送类，用于发送验证码:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;EmailMessageSender &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EmailMessageSender&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Code: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;定义服务类，调用邮箱发送类发送消息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;MessageService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailSender &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EmailMessageSender
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;NewMessageService&lt;&#x2F;span&gt;&lt;span&gt;() *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;MessageService &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MessageService&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailSender&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EmailMessageSender&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;MessageService&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailSender&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;调用方式为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewMessageService&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10086&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zeng-jia-xu-qiu&quot;&gt;增加需求&lt;&#x2F;h3&gt;
&lt;p&gt;后来业务要求，允许使用手机号注册，通过短信的方式接受验证码。&lt;&#x2F;p&gt;
&lt;p&gt;因此，增加发送短信类:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ShortMessageSender &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ShortMessageSender&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Code: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同时，需要修改 &lt;code&gt;MessageService&lt;&#x2F;code&gt; 类:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;MessageService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailSender        &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EmailMessageSender
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shortMessageSender &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ShortMessageSender
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还需要通过某种方式制定使用哪种途径发送消息，例如增加一个表示类型的参数:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;MessageSender &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MessageSenderEmail        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;MessageSender &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;iota
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MessageSenderShortMessage
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;NewMessageService&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;typ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;MessageSender&lt;&#x2F;span&gt;&lt;span&gt;) *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;MessageService &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;typ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MessageSenderEmail&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MessageService&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailSender&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EmailMessageSender&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MessageSenderShortMessage&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MessageService&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shortMessageSender&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ShortMessageSender&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unknown sender type: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;typ&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;MessageService&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailSender &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailSender&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shortMessageSender &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shortMessageSender&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;调用方式为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewMessageService&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MessageSenderEmail&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10086&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewMessageService&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MessageSenderShortMessage&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10086&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xiao-jie&quot;&gt;小结&lt;&#x2F;h3&gt;
&lt;p&gt;上面的实现方式违背了 &lt;code&gt;OCP&lt;&#x2F;code&gt;: 在增加新类型 &lt;code&gt;ShortMessageSender&lt;&#x2F;code&gt; 的同时，为了能使用这个类，需要同时修改函数 &lt;code&gt;NewMessageService&lt;&#x2F;code&gt; 与函数 &lt;code&gt;MessageService::SendVerificationCode&lt;&#x2F;code&gt;，手动确定使用哪种方式发送消息。&lt;&#x2F;p&gt;
&lt;p&gt;并且可以确定以后每增加一种发送消息的类型，都需要同时修改这两个函数。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhong-gou&quot;&gt;重构&lt;&#x2F;h3&gt;
&lt;p&gt;首先，可以观察到，无论是通过类型 &lt;code&gt;EmailMessageSender&lt;&#x2F;code&gt; 发送消息，亦或是通过类型 &lt;code&gt;ShortMessageSender&lt;&#x2F;code&gt; 发送消息，二者对于 &lt;code&gt;MessageService&lt;&#x2F;code&gt; 都只是发送消息的一种实现方式，而 &lt;code&gt;MessageService&lt;&#x2F;code&gt; 并不关心具体使用的方式是什么。由此可以考虑将这个功能抽象为一个接口:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Sender &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;MessageService&lt;&#x2F;code&gt; 只需要持有这个接口即可:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;MessageService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sender &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Sender
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;NewMessageService&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sender &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Sender&lt;&#x2F;span&gt;&lt;span&gt;) *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;MessageService &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MessageService&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sender&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sender&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;(s *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;MessageService&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sender&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来就是水到渠成的事情，让 &lt;code&gt;EmailMessageSender&lt;&#x2F;code&gt; 与 &lt;code&gt;ShortMessageSender&lt;&#x2F;code&gt; 分别实现接口 &lt;code&gt;Sender&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;EmailMessageSender &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EmailMessageSender&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Code: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ShortMessageSender &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ShortMessageSender&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Code: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最后，调用方式为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewMessageService&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EmailMessageSender&lt;&#x2F;span&gt;&lt;span&gt;{})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10086&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewMessageService&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ShortMessageSender&lt;&#x2F;span&gt;&lt;span&gt;{})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SendVerificationCode&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10086&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用这种方式，若要增加新的发送方式，只需要增加对应的类型，并使其实现接口 &lt;code&gt;Sender&lt;&#x2F;code&gt; 即可，而无需修改除 &lt;code&gt;main&lt;&#x2F;code&gt; 以外的其他函数。达到 &lt;strong&gt;open for extension&lt;&#x2F;strong&gt; but &lt;strong&gt;closed for modifications&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;开闭原则&lt;&#x2F;strong&gt; 的目标是指导如何 &lt;strong&gt;提高代码可扩展性&lt;&#x2F;strong&gt;，因此是众多设计模式主要遵从的设计原则。&lt;&#x2F;p&gt;
&lt;p&gt;熟练使用这项原则，需要开发者具备扩展意识、抽象意识、封装意识等。在写代码之前，要认真思考，未来的需求可能会改变哪里。将可能的变化进行抽象，对外提供不变的接口。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oodesign.com&#x2F;open-close-principle.html&quot;&gt;open close principle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>单一职责原则</title>
		<published>2021-02-08T10:06:13+00:00</published>
		<updated>2021-02-08T10:06:13+00:00</updated>
		<link href="https://blog.kiyoko.io/programming-single-responsibility-principle/" type="text/html"/>
		<id>https://blog.kiyoko.io/programming-single-responsibility-principle/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;A class or module should have a single responsibility.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;单一职责原则要求，一个类或模块只应该有唯一的职责。&lt;&#x2F;p&gt;
&lt;p&gt;首先来明确概念，职责可以被看做一个类或者模块被修改的原因。那么，由这个概念可以得出，当一个类或者模块被修改的原因有两个或以上时，应该考虑将这些功能拆分到多个类或者模块中，从而使每一个类或者模块被修改的原因只有一个。&lt;&#x2F;p&gt;
&lt;p&gt;那么，问题来了: 什么叫做单一职责，或者说，以类为例，如何判断一个类的职责是否单一？这个原则在字面上是非常简单的，但实际上却又非常主观。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ju-ge-li-zi&quot;&gt;举个例子&lt;&#x2F;h2&gt;
&lt;p&gt;大多数业务中都会涉及到用户信息，例如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;UserInfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int64
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Email             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Telephone         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CreateTime        time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Time
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LastLoginTime     time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Time
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AvatarURL         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ProvinceOfAddress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Province
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CityOfAddress     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;City
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RegionOfAddress   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Region
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DetailedAddress   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;大部分的开发者会使用如上扁平化的数据结构，事实上也不会有什么问题。但本着从学术的角度出发，来审视一下 &lt;code&gt;UserInfo&lt;&#x2F;code&gt; 中的职责有哪些:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;调用接口时，作为唯一标志
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ID&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;展示作用
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;CreateTime&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;LastLoginTime&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;AvatarURL&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;认证作用
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Email&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Telephone&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;地址信息
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ProvinceOfAddress&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;CityOfAddress&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;RegionOfAddress&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;DetailedAddress&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;结果分析下来，竟然包含了四种职责。并且，这四种职责基本上是相互独立的，即任何一种职责的信息发生变化，基本不会影响其他职责的功能。&lt;&#x2F;p&gt;
&lt;p&gt;同时，思考如下几个问题:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;用户登录的时候，是直接使用 &lt;code&gt;UserInfo&lt;&#x2F;code&gt; 类型做处理，还是使用只包含认证相关字段的类型 &lt;code&gt;Credential&lt;&#x2F;code&gt; 呢&lt;&#x2F;li&gt;
&lt;li&gt;展示用户信息的时候，是直接使用 &lt;code&gt;UserInfo&lt;&#x2F;code&gt; 类型做处理，还是使用只包含展示信息字段的类型 &lt;code&gt;UserDisplayInfo&lt;&#x2F;code&gt; 呢&lt;&#x2F;li&gt;
&lt;li&gt;在处理订单收货地址是，是直接使用 &lt;code&gt;UserInfo&lt;&#x2F;code&gt; 类型做处理，还是使用只包含地址相关字段的类型 &lt;code&gt;Address&lt;&#x2F;code&gt; 呢&lt;&#x2F;li&gt;
&lt;li&gt;在计算发货地与收货地距离时，也要使用 &lt;code&gt;UserInfo&lt;&#x2F;code&gt; 类型处理吗&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;如此看来，应该将 &lt;code&gt;UserInfo&lt;&#x2F;code&gt; 修改为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Credential &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Email             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Telephone         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;UserDisplayInfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CreateTime        time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Time
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LastLoginTime     time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Time
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AvatarURL         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Address &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ProvinceOfAddress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Province
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CityOfAddress     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;City
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RegionOfAddress   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Region
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DetailedAddress   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;UserInfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int64
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Credential      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Credential
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UserDisplayInfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;UserDisplayInfo
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Address         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Address
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但是，还有可能你开发的产品没有订单功能，这时候还有必要有 &lt;code&gt;Address&lt;&#x2F;code&gt; 类吗？&lt;&#x2F;p&gt;
&lt;p&gt;因此，开篇才会说，这是一个主观的设计原则。职责是否单一还应该取决于实际的业务场景。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oodesign.com&#x2F;single-responsibility-principle.html&quot;&gt;OODesign: single responsibility principle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>针对接口编程</title>
		<published>2021-02-06T16:22:31+00:00</published>
		<updated>2021-02-06T16:22:31+00:00</updated>
		<link href="https://blog.kiyoko.io/programming-program-to-an-interface/" type="text/html"/>
		<id>https://blog.kiyoko.io/programming-program-to-an-interface/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Program to an interface, not an implementation.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;针对接口，而非实现编程 —— 出自 GoF《设计模式: 可复用面向对象软件基础》。&lt;strong&gt;接口&lt;&#x2F;strong&gt; 表示一组 &lt;strong&gt;协议&lt;&#x2F;strong&gt; 或 &lt;strong&gt;约定&lt;&#x2F;strong&gt;，是一组功能的集合。&lt;&#x2F;p&gt;
&lt;p&gt;接口在不同的语言中，有不同的称呼:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;rust&lt;&#x2F;strong&gt; 中的 &lt;strong&gt;trait&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;go&lt;&#x2F;strong&gt; 中的 &lt;strong&gt;interface&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;swift&lt;&#x2F;strong&gt; 中的 &lt;strong&gt;protocol&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;java&lt;&#x2F;strong&gt; 中的 &lt;strong&gt;interface&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;但无论他们的名字是否相同，其作用都是表达一组 &lt;strong&gt;抽象的功能集合&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;以上字面意思很好理解，下面来详细说明。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wei-shi-yao-yao-zhen-dui-jie-kou-bian-cheng&quot;&gt;为什么要针对接口编程&lt;&#x2F;h2&gt;
&lt;p&gt;初级开发者在实现某一具体需求时，其思考的关注点在于需求本身，分析实现这个需求要经过哪些步骤，每个步骤又要做那些事情，以此类推。在经过逐层分析，想明白流程之后，这名开发者就会把解决步骤转化为代码。&lt;&#x2F;p&gt;
&lt;p&gt;如果只看这个需求，这名开发者完成并交付了这个功能。但是，当需求发生变动时，需要修改功能，或增加功能时，由于上面的实现方式是面向过程的，步骤与步骤之间互相暴露实现的细节。因此，当修改了某一个步骤的代码时，就非常可能需要同步修改前后相邻步骤的代码，最坏的情况可能要修改全部的代码。结果就是不小的开发工作量与测试工作量。&lt;&#x2F;p&gt;
&lt;p&gt;如果开发者使用针对接口编程的方式，封装不稳定的实现细节，暴露稳定的接口。当需求发生变化时，只需要修改相关的接口实现，而因为接口不变，所以无需改动其他代码。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ju-ge-li-zi&quot;&gt;举个例子&lt;&#x2F;h2&gt;
&lt;p&gt;产品给你分配了一个任务: 有一批保存在 &lt;code&gt;aws s3&lt;&#x2F;code&gt; 上的数据，需要你将它们同步到 &lt;code&gt;aliyun oss&lt;&#x2F;code&gt; 上。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhen-dui-shi-xian-bian-cheng&quot;&gt;针对实现编程&lt;&#x2F;h3&gt;
&lt;p&gt;如果是使用针对实现编程方式，那么在收到这个需求之后，应该就会思考: 把 &lt;code&gt;aws s3&lt;&#x2F;code&gt; 的数据同步到 &lt;code&gt;aliyun oss&lt;&#x2F;code&gt; 上，步骤差不多是:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;想办法把数据从 &lt;code&gt;aws s3&lt;&#x2F;code&gt; 上下载到磁盘或者内存&lt;&#x2F;li&gt;
&lt;li&gt;把磁盘或者内存中的数据上传到 &lt;code&gt;aliyun oss&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;想到这里，感觉差不多可以写代码了:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;AwsS3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;AliyunOSS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;(s3 *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;AwsS3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Sync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oss &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AliyunOSS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;names &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ranges names &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Download&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oss&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Upload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;经过测试确认无误后，发布上线，成功运行了几个月没出现 Bug。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xu-qiu-bian-geng&quot;&gt;需求变更&lt;&#x2F;h4&gt;
&lt;p&gt;后来呢，产品要求你有的数据要同步到 &lt;code&gt;aliyun oss&lt;&#x2F;code&gt;，有一些要同步到 &lt;code&gt;ceph s3&lt;&#x2F;code&gt; 上。你一看，这个需求简单啊，我会。然后，你把上面的代码复制了一份，稍加改动:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;CephS3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ToOss    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ToCephS3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;(s3 *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;AwsS3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;syncToOss&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oss &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AliyunOSS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Download&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oss&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Upload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;(s3 *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;AwsS3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;syncToCephS3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cephs3 &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CephS3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Download&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cephs3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Upload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;(s3 *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;AwsS3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Sync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oss &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AliyunOSS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cephs3 &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CephS3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metas &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Meta&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ranges metas &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Download&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ToOss &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;syncToOss&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oss&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ToCephS3 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;syncToCephS3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cephs3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不到一天的时间就完成了开发、测试，第二天就上线了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhen-dui-jie-kou-bian-cheng&quot;&gt;针对接口编程&lt;&#x2F;h3&gt;
&lt;p&gt;实现将数据从 &lt;code&gt;aws s3&lt;&#x2F;code&gt; 同步到 &lt;code&gt;aliyun oss&lt;&#x2F;code&gt; 上，可以提取到的信息包括 &lt;code&gt;aws s3&lt;&#x2F;code&gt;、&lt;code&gt;aliyun oss&lt;&#x2F;code&gt; 两种存储系统，同步是要实现的操作。&lt;&#x2F;p&gt;
&lt;p&gt;由此引发思考，同步是一种动作，未来发生变化的可能性不大，或许有增加其他的动作可能，比如对比两个存储系统的内容，但这应该算作扩展需求，暂时无需考虑；但是存储系统就不好说了，现在是这样的要求，未来可能就会要求同步到 &lt;code&gt;minio&lt;&#x2F;code&gt; 上，或者同步到另一个 &lt;code&gt;aws s3&lt;&#x2F;code&gt; 上。&lt;&#x2F;p&gt;
&lt;p&gt;至此，可以考虑将存储系统抽象为一组接口:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Storage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Upload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Download&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再来思考，现在是要求从 &lt;code&gt;aws s3&lt;&#x2F;code&gt; 同步到 &lt;code&gt;aliyun oss&lt;&#x2F;code&gt; 上，既然上面已经认为未来有很大概率需要同步其他存储系统，由此提出问题: 如何确定同步的目标系统？先大胆猜测:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;一个服务只负责一种特定源到特定目标的同步任务&lt;&#x2F;li&gt;
&lt;li&gt;在创建同步任务时指定，即在请求参数中，适用于本次任务的所有数据&lt;&#x2F;li&gt;
&lt;li&gt;根据某种策略，或者是算法，确定每一个文件的源与目的分别是哪里&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;那么接下来逐条分析:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;方法一，极其不灵活，如果有 &lt;strong&gt;n&lt;&#x2F;strong&gt; 个存储系统，那么一共需要启动 **nx(n-1)**个服务，无论是对于使用者，还是维护者来说，都可谓是灾难&lt;&#x2F;li&gt;
&lt;li&gt;方法二，相比于方法一，极大地提高了灵活性，只需要一个服务就能替代上述 &lt;strong&gt;nx(n-1)&lt;&#x2F;strong&gt; 个服务&lt;&#x2F;li&gt;
&lt;li&gt;方法三，相比于方法二，更进一步提高了灵活性，每一个文件都可以有独立的源与目标。但这种方法只是看起来很美好，很灵活，实际上可能并没有真实的使用场景。原因是，如果每一个文件都可以具有独立的目标，那么完全可以将目标相同的文件聚合到一起，作为一个批量的任务，这样就演变为了 &lt;strong&gt;方法二&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;综上所述，下面实现 &lt;strong&gt;方法二&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Batch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;From    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Targets &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Names   &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Sync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;batch &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Batch&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewStorage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;batch&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;From&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;targets &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewStorages&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;batch&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Targets&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;batch&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Names &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Download&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;targets &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Upload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;} 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;到此为止，所有代码都是面向接口编程，需求中提到的 &lt;code&gt;aws s3&lt;&#x2F;code&gt; 与 &lt;code&gt;aliyun oss&lt;&#x2F;code&gt; 还没有出现:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;AwsS3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3 &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;AwsS3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Upload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3 &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;AwsS3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Download&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;AliyunOSS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3 &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;AwsS3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Upload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3 &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;AwsS3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Download&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后，需要实现两个函数:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;NewStorage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Storage &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;awss3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AwsS3&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aliyunoss&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AliyunOSS&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unknown name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 只作为演示 
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;NewStorages&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;names &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Storage &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;results &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Storage
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;names &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;results &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;results&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewStorage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;results
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;到此为止，才终于完成了原始需求。使用面向实现方式的同学会说: 你这代码量要比面向实现的方法多很多，你实现了一个需求，我都实现好几个了。&lt;&#x2F;p&gt;
&lt;p&gt;对此，我是不慌的。&lt;&#x2F;p&gt;
&lt;p&gt;当产品要求将数据同步到 &lt;code&gt;cephs3&lt;&#x2F;code&gt;，&lt;code&gt;minio&lt;&#x2F;code&gt; 时，或者是从 &lt;code&gt;tencent cos&lt;&#x2F;code&gt;，本地磁盘同步到其他地方时，&lt;code&gt;func Sync&lt;&#x2F;code&gt; 是完全不需要改动的，代码的改动只有:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;增加对应的类型实现 &lt;strong&gt;Storage&lt;&#x2F;strong&gt; 接口:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;CephS3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ceph &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CephS3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Upload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ceph &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CephS3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Download&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;MinIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minio &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;MinIO&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Upload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minio &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;MinIO&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Download&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Posix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fs &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Posix&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Upload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fs &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Posix&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Download&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;TencentOSS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oss &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;TencentOSS&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Upload&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oss &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;TencentOSS&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Download&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;修改 &lt;strong&gt;func NewStorage&lt;&#x2F;strong&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;NewStorage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Storage &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;awss3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AwsS3&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aliyunoss&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AliyunOSS&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cephs3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CephS3&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;minio&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MinIO&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;posix&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Posix&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tencentoss&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TencentOSS&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unknown name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 只作为演示 
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就完成所有的修改了。如果是面向实现的方式，算了，我不想了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;抽象会提升思维上的难度，但却能提高代码的灵活性。而且，灵活性还会随着抽象程度的提升一起提高。优秀的代码设计，不但能满足于眼前的需求，还提供了在不改变已有设计的前提支持对未来可能变化的需求的能力。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>代码质量衡量标准</title>
		<published>2021-02-06T12:51:33+00:00</published>
		<updated>2021-02-06T12:51:33+00:00</updated>
		<link href="https://blog.kiyoko.io/the-code-quality-metrics/" type="text/html"/>
		<id>https://blog.kiyoko.io/the-code-quality-metrics/</id>
		<content type="html">&lt;h2 id=&quot;ke-wei-hu-xing-maintainability&quot;&gt;可维护性 (maintainability)&lt;&#x2F;h2&gt;
&lt;p&gt;常见的代码维护工作，大体上包括: 修复 Bug，修改已有的代码，添加新的代码。可维护性就是用来衡量上述工作的难度。&lt;&#x2F;p&gt;
&lt;p&gt;显而易见地，修改配置的难度小于修改编译参数，小于增加代码，小于改动已有代码。改动一处代码的难度小于改动多出代码，更小于改动不知道多少处代码。&lt;&#x2F;p&gt;
&lt;p&gt;易于维护就要求，在不破坏原有代码设计、引入新 Bug 低风险的情况下，能够快速修改或者添加代码。反之，则是不易于维护。&lt;&#x2F;p&gt;
&lt;p&gt;易于维护代码应该在兼具 &lt;strong&gt;可读性&lt;&#x2F;strong&gt; 的前提下，具有良好的模块化设计，做到高内聚低耦合，遵从面向接口而非实现的程序设计原则。&lt;&#x2F;p&gt;
&lt;p&gt;但是，可维护性是一个偏主观的衡量标准。一段代码的可维护性依赖于代码量、业务复杂度、知识背景、文档完善度还有开发开发者水平等诸多方面的因素。&lt;&#x2F;p&gt;
&lt;p&gt;同一段代码对于不同的开发者会具有不同的可维护性。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ke-du-xing-readability&quot;&gt;可读性 (readability)&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Martin Fowler:&amp;quot;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;代码被阅读的次数远超过被编写的次数，无论是学习编程、修改代码、添加代码还是进行 Code Review 时，都需要对代码进行阅读。&lt;&#x2F;p&gt;
&lt;p&gt;很多人都听说过 &lt;strong&gt;可读性&lt;&#x2F;strong&gt;，知道 &lt;strong&gt;可读性&lt;&#x2F;strong&gt; 很重要，但却并不重视。在实际写代码的时候，会为了 &lt;strong&gt;编写上舒服&lt;&#x2F;strong&gt;，为了 &lt;strong&gt;自以为的高效&lt;&#x2F;strong&gt;，为了 &lt;strong&gt;炫技&lt;&#x2F;strong&gt; 或者是其他什么原因，写出让其他人难以理解，甚至无法理解的代码。更有甚者，&lt;strong&gt;看不懂若干月之前自己写的代码&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;个人认为，可读性应被看做最重要的衡量标准。因为，无论是修复 Bug 还是开发新功能，只有先读懂代码，才能得到自己需要的信息去完成接下来的工作。若是读都读不懂，那么轻则工作效率事倍功半，加班成为常态；重则引入 Bug 影响绩效。&lt;&#x2F;p&gt;
&lt;p&gt;衡量可读性可以从编码规范、命名、函数长度、模块划分、注释等方面切入。&lt;&#x2F;p&gt;
&lt;p&gt;检测可读性可以通过 Code Review，如果同事读你的代码有很多疑问就表示需要提高可读性了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ke-kuo-zhan-xing-extensibility&quot;&gt;可扩展性 (extensibility)&lt;&#x2F;h2&gt;
&lt;p&gt;代码的可扩展性表示代码应对未来需求变化的能力。&lt;&#x2F;p&gt;
&lt;p&gt;在添加新功能时，扩展性的高低反比与对已有代码修改的数量。修改的内容越少，则表示扩展性越好。如果能做到只通过扩展的方式添加新代码，而无需修改已有代码时，则表示代码具有非常好的可扩展性。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ling-huo-xing-flexibility&quot;&gt;灵活性 (flexibility)&lt;&#x2F;h2&gt;
&lt;p&gt;灵活性也是一个比较主观的衡量标准。例如:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;代码具有非常好的可扩展性&lt;&#x2F;li&gt;
&lt;li&gt;底层模块抽象度高，封装良好，已于复用代码&lt;&#x2F;li&gt;
&lt;li&gt;接口可以应对各种使用场景，满足各种不同的需求&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;jian-ji-xing-simplicity&quot;&gt;简洁性 (simplicity)&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;KISS 原则: Kepp It Simple, Stupid.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;保持代码简单、结构简洁、逻辑清晰。因为，越简单的代码，越易于理解。避免在代码中引入不必要的设计模式，或其他炫技的写法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ke-fu-yong-xing-reusability&quot;&gt;可复用性 (reusability)&lt;&#x2F;h2&gt;
&lt;p&gt;大部分开发者一定听过可复用性，也一定听过 &lt;strong&gt;Don&#x27;t Repeat Yourself&lt;&#x2F;strong&gt;，也明白同样的代码只写一次，但却很少有人能真正做到，或者说是不知道如何做:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;面向对象的封装、继承、多态&lt;&#x2F;li&gt;
&lt;li&gt;单一职责原则&lt;&#x2F;li&gt;
&lt;li&gt;解耦，高内聚低耦合&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ke-ce-shi-xing-testability&quot;&gt;可测试性 (testability)&lt;&#x2F;h2&gt;
&lt;p&gt;编写易于单元测试的代码，如果为你的代码编写单元测试很困难，那你可能需要思考，你的一个函数或模块是不是做了太多的事情。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>删除已合并的分支</title>
		<published>2020-12-31T11:05:56+00:00</published>
		<updated>2020-12-31T11:05:56+00:00</updated>
		<link href="https://blog.kiyoko.io/git-delete-merged-branches/" type="text/html"/>
		<id>https://blog.kiyoko.io/git-delete-merged-branches/</id>
		<content type="html">&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --merged &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;egrep -v &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(^\*|master|dev)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xargs&lt;&#x2F;span&gt;&lt;span&gt; git branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>在 Archlinux 使用 diff cmp</title>
		<published>2020-12-16T14:59:09+00:00</published>
		<updated>2020-12-16T14:59:09+00:00</updated>
		<link href="https://blog.kiyoko.io/archlinux-diffutils/" type="text/html"/>
		<id>https://blog.kiyoko.io/archlinux-diffutils/</id>
		<content type="html">&lt;p&gt;在 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes&quot;&gt;kubernetes&lt;&#x2F;a&gt; 仓库中的脚本依赖于 &lt;code&gt;cmp &amp;amp; diff&lt;&#x2F;code&gt; 命令。&lt;&#x2F;p&gt;
&lt;p&gt;这些命令在 &lt;a href=&quot;https:&#x2F;&#x2F;www.archlinux.org&#x2F;packages&#x2F;core&#x2F;x86_64&#x2F;diffutils&#x2F;files&#x2F;&quot;&gt;diffutils&lt;&#x2F;a&gt; 中。&lt;&#x2F;p&gt;
&lt;p&gt;使用如下方式安装:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; pacman&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -S&lt;&#x2F;span&gt;&lt;span&gt; diffutils
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>安装 NVIDIA Driver 和 CUDA</title>
		<published>2020-12-08T10:46:02+00:00</published>
		<updated>2020-12-08T10:46:02+00:00</updated>
		<link href="https://blog.kiyoko.io/install-nvidia-driver-and-cuda/" type="text/html"/>
		<id>https://blog.kiyoko.io/install-nvidia-driver-and-cuda/</id>
		<content type="html">&lt;h2 id=&quot;xi-tong-huan-jing&quot;&gt;系统环境&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;home&#x2F;sihao$ cat &#x2F;etc&#x2F;os-release
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Ubuntu&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18.04.4 LTS (Bionic Beaver)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID_LIKE&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;debian
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRETTY_NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Ubuntu 18.04.4 LTS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION_ID&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18.04&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.ubuntu.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SUPPORT_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;help.ubuntu.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BUG_REPORT_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;bugs.launchpad.net&#x2F;ubuntu&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIVACY_POLICY_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.ubuntu.com&#x2F;legal&#x2F;terms-and-policies&#x2F;privacy-policy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION_CODENAME&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bionic
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UBUNTU_CODENAME&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bionic
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;GPU: GTX 2080Ti&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xia-zai-an-zhuang-cheng-xu&quot;&gt;下载安装程序&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;cuda&lt;&#x2F;strong&gt; 版本为 &lt;a href=&quot;https:&#x2F;&#x2F;developer.nvidia.com&#x2F;cuda-10.0-download-archive?target_os=Linux&amp;amp;target_arch=x86_64&amp;amp;target_distro=Ubuntu&amp;amp;target_version=1804&amp;amp;target_type=runfilelocal&quot;&gt;cuda10.0&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NVIDIA Driver&lt;&#x2F;strong&gt; 版本为 440.82&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-zhuang-cuda&quot;&gt;安装 CUDA&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; sh cuda_10.0.130_410.48_linux.run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;pei-zhi-huan-jing&quot;&gt;配置环境&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;cuda-10.0 &#x2F;usr&#x2F;local&#x2F;cuda
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;bin:&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LD_LIBRARY_PATH&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64:&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;extras&#x2F;CUPTI&#x2F;lib64:&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LD_LIBRARY_PATH&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &#x2F;etc&#x2F;ld.so.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ldconfig
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;an-zhuang-nvidia-driver&quot;&gt;安装 NVIDIA Driver&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;xie-zai-yi-you-nvidia-driver&quot;&gt;卸载已有 NVIDIA Driver&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;bin&#x2F;nvidia-uninstall
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; reboot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;an-zhuang-xin-nvidia-driver&quot;&gt;安装新 NVIDIA Driver&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; sh NVIDIA-Linux-x86_64-440.82.run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;yan-zheng&quot;&gt;验证&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvidia-smi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;forums.developer.nvidia.com&#x2F;t&#x2F;libcublas-so-10-0-cannot-be-found&#x2F;69629&quot;&gt;libcublas-so-10-0-cannot-be-found&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Volcano Plugin - binpack</title>
		<published>2020-12-07T15:17:39+00:00</published>
		<updated>2020-12-07T15:17:39+00:00</updated>
		<link href="https://blog.kiyoko.io/volcano-plugin-binpack/" type="text/html"/>
		<id>https://blog.kiyoko.io/volcano-plugin-binpack/</id>
		<content type="html">&lt;h2 id=&quot;mu-biao&quot;&gt;目标&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;binpack&lt;&#x2F;strong&gt; 解决的问题是，提高节点的利用率，避免资源碎片化。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yuan-ma-fen-xi&quot;&gt;源码分析&lt;&#x2F;h2&gt;
&lt;p&gt;如下代码来自: &lt;code&gt;pkg&#x2F;scheduler&#x2F;plugins&#x2F;binpack&#x2F;binpack.go&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; BinPackingScore use the best fit polices during scheduling.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Goals:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - Schedule Jobs using BestFit Policy using Resource Bin Packing Priority Function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - Reduce Fragmentation of scarce resources on the Cluster
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;BinPackingScore&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;TaskInfo&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;NodeInfo&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;priorityWeight&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weightSum &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requested &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Resreq
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocatable &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Allocatable
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;used &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Used
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requested&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ResourceNames&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requested&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocate &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocatable&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeUsed &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;used&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ResourceCPU&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BinPackingCPU
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ResourceMemory&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BinPackingMemory
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BinPackingResources&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceScore &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ResourceBinPackingScore&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeUsed&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;klog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Infof&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; on node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, need &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, used &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, allocatable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Namespace&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeUsed&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceScore&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceScore
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weightSum &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; mapping the result from [0, weightSum] to [0, 10(MaxPriority)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weightSum &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;float64&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weightSum&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span&gt;*= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;float64&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v1alpha1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MaxNodeScore &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int64&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BinPackingWeight&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ResourceBinPackingScore calculate the binpack score for resource with provided info
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ResourceBinPackingScore&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requested&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capacity&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;used &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capacity &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usedFinally &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requested &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;used
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usedFinally &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capacity &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usedFinally &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;float64&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capacity
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;pei-zhi-wen-jian&quot;&gt;配置文件&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ConfigMap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;volcano-scheduler-configmap
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;volcano-system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volcano-scheduler.conf&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    actions: &amp;quot;enqueue, allocate, backfill&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    tiers:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    - plugins:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: priority
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: gang
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: conformance
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    - plugins:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: drf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: predicates
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: proportion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: nodeorder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: binpack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        arguments:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          # binpack 插件权重
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          - binpack.weight: 10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          # cpu 资源权重
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          - binpack.cpu: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          # memory 资源权重
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          - binpack.memory: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          # gpu 等其他资源类型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          - binpack.resources: nvidia.com&#x2F;gpu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          # gpu 等其他资源权重配置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          - binpack.resources.nvidia.com&#x2F;gpu: 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;volcano-scheduler-ri-zhi&quot;&gt;Volcano Scheduler 日志&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Volcano Scheduler&lt;&#x2F;strong&gt; 中可以看到 &lt;strong&gt;binpack plugin&lt;&#x2F;strong&gt; 加载的配置文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; volcano-system logs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; volcano-scheduler-566b6f749d-4wr6m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;I1208&lt;&#x2F;span&gt;&lt;span&gt; 07:27:43.875761       1 binpack.go:161] Leaving binpack plugin. binpack.weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, binpack.cpu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, binpack.memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, nvidia.com&#x2F;gpu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>删除所有 Evicted 状态的 Pod</title>
		<published>2020-12-01T13:53:47+00:00</published>
		<updated>2020-12-01T13:53:47+00:00</updated>
		<link href="https://blog.kiyoko.io/delete-all-evicted-pods/" type="text/html"/>
		<id>https://blog.kiyoko.io/delete-all-evicted-pods/</id>
		<content type="html">&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get pods&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --all-namespaces -ojson &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jq -r &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.items[] | select(.status.reason!=null) | select(.status.reason | contains(&amp;quot;Evicted&amp;quot;)) | .metadata.namespace + &amp;quot; &amp;quot; + .metadata.name&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xargs -n2 -l&lt;&#x2F;span&gt;&lt;span&gt; bash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubectl delete pods -n $0 $1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>设置容器内的 locale</title>
		<published>2020-11-30T10:22:26+00:00</published>
		<updated>2020-11-30T10:22:26+00:00</updated>
		<link href="https://blog.kiyoko.io/set-locale-inside-a-container/" type="text/html"/>
		<id>https://blog.kiyoko.io/set-locale-inside-a-container/</id>
		<content type="html">&lt;p&gt;解决办法面向 &lt;strong&gt;Ubuntu&#x2F;Debian&lt;&#x2F;strong&gt; 系列，&lt;strong&gt;CentOS&lt;&#x2F;strong&gt; 系列方法类似。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zai-rong-qi-nei-chu-li&quot;&gt;在容器内处理&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --fix-missing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; locales
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sed -i &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;en_US.UTF-8&#x2F;s&#x2F;^# &#x2F;&#x2F;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &#x2F;etc&#x2F;locale.gen
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;locale-gen
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export LANG=en_US.UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export LANGUAGE=en_US.UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export LC_ALL=en_US.UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.vimrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set termencoding=utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.vimrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set encoding=utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.vimrc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zai-dockerfile-zhong-chu-li&quot;&gt;在 Dockerfile 中处理&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span&gt;RUN apt update --fix-missing \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;&amp;amp; apt install -y locales \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;&amp;amp; sed -i &amp;#39;&#x2F;en_US.UTF-8&#x2F;s&#x2F;^# &#x2F;&#x2F;g&amp;#39; &#x2F;etc&#x2F;locale.gen \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;&amp;amp; locale-gen
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;RUN echo &amp;quot;set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936&amp;quot; &amp;gt;&amp;gt; ~&#x2F;.vimrc \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;&amp;amp; echo &amp;quot;set termencoding=utf-8&amp;quot; &amp;gt;&amp;gt; ~&#x2F;.vimrc \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;&amp;amp; echo &amp;quot;set encoding=utf-8&amp;quot; &amp;gt;&amp;gt; ~&#x2F;.vimrc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ENV LANG en_US.UTF-8
&lt;&#x2F;span&gt;&lt;span&gt;ENV LANGUAGE en_US.UTF-8
&lt;&#x2F;span&gt;&lt;span&gt;ENV LC_ALL en_US.UTF-8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>并行程序设计</title>
		<published>2020-11-21T14:24:38+00:00</published>
		<updated>2020-11-21T14:24:38+00:00</updated>
		<link href="https://blog.kiyoko.io/introduction-to-parallel-programming/" type="text/html"/>
		<id>https://blog.kiyoko.io/introduction-to-parallel-programming/</id>
		<content type="html">&lt;h2 id=&quot;wei-shi-yao-xu-yao-bing-xing-cheng-xu&quot;&gt;为什么需要并行程序&lt;&#x2F;h2&gt;
&lt;p&gt;单核心的性能不满足需求。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ru-he-she-ji-bing-xing-cheng-xu&quot;&gt;如何设计并行程序&lt;&#x2F;h2&gt;
&lt;p&gt;在软件层面，通常的方案的基本思想是将要完成的任务分配给各个处理核心。有两种广泛采用的方法: &lt;strong&gt;任务并行&lt;&#x2F;strong&gt; 和 &lt;strong&gt;数据并行&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;以如下问题解释说明:&lt;&#x2F;p&gt;
&lt;p&gt;试卷共计 5 道题目，有 100 名学生参加考试，5 名教师阅卷。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ren-wu-bing-xing&quot;&gt;任务并行&lt;&#x2F;h3&gt;
&lt;p&gt;将待解决的问题所需要执行的各个任务分配到各个核心上执行。&lt;&#x2F;p&gt;
&lt;p&gt;对应到上述问题中，可以认为每个阅卷教师就是一个处理核心，批改每一道题是一个任务。则将任务分配到核心的含义是: 每一名教师只需要负责批阅固定的一道题目。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-ju-bing-xing&quot;&gt;数据并行&lt;&#x2F;h3&gt;
&lt;p&gt;将待解决问题所需要处理的数据分配给各个处理核心，每个处理核心执行相同的操作。&lt;&#x2F;p&gt;
&lt;p&gt;对应到上述问题中，可以认为每个阅卷教师就是一个处理核心，将试卷 —— 也就是数据分配给教师，教师负责试卷的整个批阅过程。各个老师是做的工作是相同的。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xing-neng&quot;&gt;性能&lt;&#x2F;h2&gt;
&lt;p&gt;如何衡量并行程序的性能指标。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jia-su-bi-he-xiao-lu&quot;&gt;加速比和效率&lt;&#x2F;h3&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>测试节点之间的网络带宽</title>
		<published>2020-11-19T13:14:30+00:00</published>
		<updated>2020-11-19T13:14:30+00:00</updated>
		<link href="https://blog.kiyoko.io/testing-the-bandwidth-between-two-nodes/" type="text/html"/>
		<id>https://blog.kiyoko.io/testing-the-bandwidth-between-two-nodes/</id>
		<content type="html">&lt;p&gt;昨天同事找到我，说 &lt;strong&gt;nfs&lt;&#x2F;strong&gt; 太慢了，通过 &lt;strong&gt;iostat&lt;&#x2F;strong&gt; 看只有 &lt;strong&gt;1-2MB&#x2F;s&lt;&#x2F;strong&gt; 的写入速度。在通过 &lt;strong&gt;fio&lt;&#x2F;strong&gt; 测试磁盘顺序写入速度，得到结果为 &lt;strong&gt;300MB&#x2F;s&lt;&#x2F;strong&gt; 之后，遂怀疑是网络的问题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;iperf&quot;&gt;iperf&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;iperf is a tool for performing network throughput measurements.  It can test either TCP or UDP throughput.  To perform an iperf test the user must establish both a server (to discard traffic) and a client (to generate traffic).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;此处省略安装过程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ce-shi-wang-luo-dai-kuan&quot;&gt;测试网络带宽&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;iperf&lt;&#x2F;strong&gt; 通过使用不同的命令行参数，支持分别作为 &lt;strong&gt;服务端&lt;&#x2F;strong&gt; 或 &lt;strong&gt;客户端&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qi-dong-fu-wu-duan&quot;&gt;启动服务端&lt;&#x2F;h4&gt;
&lt;p&gt;监听默认端口 &lt;strong&gt;5001&lt;&#x2F;strong&gt;，启动服务端:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iperf -s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者，监听指定端口，启动服务端:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iperf -s -p &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;port&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;qi-dong-ke-hu-duan&quot;&gt;启动客户端&lt;&#x2F;h4&gt;
&lt;p&gt;连接默认端口 &lt;strong&gt;5001&lt;&#x2F;strong&gt;，启动客户端:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iperf -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;server-host&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者，连接指定端口，启动客户端:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iperf -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;server-host&amp;gt; -p &amp;lt;port&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同时，&lt;strong&gt;iperf&lt;&#x2F;strong&gt; 也支持多线程的客户端:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iperf -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;server-host&amp;gt; -p &amp;lt;port&amp;gt; -P &amp;lt;threadiness&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;ce-shi-jie-guo&quot;&gt;测试结果&lt;&#x2F;h4&gt;
&lt;p&gt;单线程客户端的测试结果:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Client&lt;&#x2F;span&gt;&lt;span&gt; connecting to 10.100.28.26, TCP port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TCP&lt;&#x2F;span&gt;&lt;span&gt; window size:  170 KByte (default)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  3] local 172.29.60.164 port 37290 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; ID] Interval       Transfer     Bandwidth
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  3]  0.0-10.6 sec  24.0 MBytes  19.0 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;多线程客户端的测试结果，两个节点都有 &lt;strong&gt;16&lt;&#x2F;strong&gt; 个 &lt;strong&gt;CPU&lt;&#x2F;strong&gt; 核心:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Client&lt;&#x2F;span&gt;&lt;span&gt; connecting to 10.100.28.26, TCP port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TCP&lt;&#x2F;span&gt;&lt;span&gt; window size: 85.0 KByte (default)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 18] local 172.29.60.164 port 37392 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 17] local 172.29.60.164 port 37390 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  4] local 172.29.60.164 port 37364 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 11] local 172.29.60.164 port 37378 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  9] local 172.29.60.164 port 37374 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  8] local 172.29.60.164 port 37372 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 10] local 172.29.60.164 port 37376 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  6] local 172.29.60.164 port 37366 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 13] local 172.29.60.164 port 37382 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 14] local 172.29.60.164 port 37384 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  3] local 172.29.60.164 port 37362 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  5] local 172.29.60.164 port 37368 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  7] local 172.29.60.164 port 37370 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 15] local 172.29.60.164 port 37386 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 16] local 172.29.60.164 port 37388 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 12] local 172.29.60.164 port 37380 connected with 10.100.28.26 port 9999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; ID] Interval       Transfer     Bandwidth
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  3]  0.0-10.2 sec  2.62 MBytes  2.17 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 13]  0.0-10.2 sec  2.88 MBytes  2.36 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 15]  0.0-10.2 sec  1.88 MBytes  1.54 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  7]  0.0-10.9 sec  1.50 MBytes  1.15 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  6]  0.0-11.0 sec  1.75 MBytes  1.34 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 17]  0.0-11.2 sec  1.88 MBytes  1.40 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  5]  0.0-11.3 sec  1.50 MBytes  1.12 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 10]  0.0-11.6 sec  1.88 MBytes  1.35 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  9]  0.0-12.4 sec  1.62 MBytes  1.10 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  4]  0.0-13.0 sec  2.88 MBytes  1.85 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 11]  0.0-13.0 sec  4.62 MBytes  2.98 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 14]  0.0-13.1 sec  4.88 MBytes  3.12 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;  8]  0.0-13.9 sec  2.12 MBytes  1.28 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 16]  0.0-14.1 sec  2.00 MBytes  1.19 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 18]  0.0-14.1 sec  2.12 MBytes  1.26 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt; 12]  0.0-14.3 sec  1.73 MBytes  1.01 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[SUM]&lt;&#x2F;span&gt;&lt;span&gt;  0.0-14.3 sec  37.9 MBytes  22.1 Mbits&#x2F;sec
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;jie-lun&quot;&gt;结论&lt;&#x2F;h2&gt;
&lt;p&gt;瓶颈在网络带宽，悲哀。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Volcano</title>
		<published>2020-11-16T14:43:43+00:00</published>
		<updated>2020-11-16T14:43:43+00:00</updated>
		<link href="https://blog.kiyoko.io/volcano/" type="text/html"/>
		<id>https://blog.kiyoko.io/volcano/</id>
		<content type="html">&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;从 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;volcano-sh&#x2F;volcano&#x2F;releases&quot;&gt;volocano release&lt;&#x2F;a&gt; 下载 &lt;strong&gt;Volcano&lt;&#x2F;strong&gt;，通过 &lt;strong&gt;yaml&lt;&#x2F;strong&gt; 文件创建 &lt;strong&gt;Deployment&lt;&#x2F;strong&gt; 等。&lt;&#x2F;p&gt;
&lt;p&gt;以当前版本 &lt;strong&gt;v1.1.0&lt;&#x2F;strong&gt; 为例:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; wget https:&#x2F;&#x2F;github.com&#x2F;volcano-sh&#x2F;volcano&#x2F;releases&#x2F;download&#x2F;v1.1.0&#x2F;volcano-v1.1.0-linux-gnu.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tar xzf volcano-v1.1.0-linux-gnu.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;volcano-v1.1.0.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;namespace&#x2F;volcano-system&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;namespace&#x2F;volcano-monitoring&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configmap&#x2F;volcano-scheduler-configmap&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serviceaccount&#x2F;volcano-scheduler&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrole.rbac.authorization.k8s.io&#x2F;volcano-scheduler&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrolebinding.rbac.authorization.k8s.io&#x2F;volcano-scheduler-role&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;volcano-scheduler&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&#x2F;volcano-scheduler-service&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serviceaccount&#x2F;volcano-admission&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrole.rbac.authorization.k8s.io&#x2F;volcano-admission&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrolebinding.rbac.authorization.k8s.io&#x2F;volcano-admission-role&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;volcano-admission&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&#x2F;volcano-admission-service&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job.batch&#x2F;volcano-admission-init&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serviceaccount&#x2F;volcano-controllers&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrole.rbac.authorization.k8s.io&#x2F;volcano-controllers&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrolebinding.rbac.authorization.k8s.io&#x2F;volcano-controllers-role&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;volcano-controllers&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Warning:&lt;&#x2F;span&gt;&lt;span&gt; apiextensions.k8s.io&#x2F;v1beta1 CustomResourceDefinition is deprecated in v1.16+, unavailable in v1.22+; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; apiextensions.k8s.io&#x2F;v1 CustomResourceDefinition
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customresourcedefinition.apiextensions.k8s.io&#x2F;jobs.batch.volcano.sh&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customresourcedefinition.apiextensions.k8s.io&#x2F;commands.bus.volcano.sh&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customresourcedefinition.apiextensions.k8s.io&#x2F;podgroups.scheduling.volcano.sh&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customresourcedefinition.apiextensions.k8s.io&#x2F;queues.scheduling.volcano.sh&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;验证 &lt;strong&gt;Volcano&lt;&#x2F;strong&gt; 组件运行状态:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; volcano-system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                     READY   STATUS      RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pod&#x2F;volcano-admission-7cfdf5b8d-cd2mk&lt;&#x2F;span&gt;&lt;span&gt;    1&#x2F;1     Running     0          6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pod&#x2F;volcano-admission-init-rmd7w&lt;&#x2F;span&gt;&lt;span&gt;         0&#x2F;1     Completed   0          6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pod&#x2F;volcano-controllers-c4c5f48b-dtx4w&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1     Running     0          6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pod&#x2F;volcano-scheduler-54f77d6788-d6t9j&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1     Running     0          6m27s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&#x2F;volcano-admission-service&lt;&#x2F;span&gt;&lt;span&gt;   ClusterIP   10.5.51.59    &amp;lt;none&amp;gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;443&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;TCP    6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&#x2F;volcano-scheduler-service&lt;&#x2F;span&gt;&lt;span&gt;   ClusterIP   10.5.128.19   &amp;lt;none&amp;gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8080&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;TCP   6m27s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                  READY   UP-TO-DATE   AVAILABLE   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;volcano-admission&lt;&#x2F;span&gt;&lt;span&gt;     1&#x2F;1     1            1           6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;volcano-controllers&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1     1            1           6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;volcano-scheduler&lt;&#x2F;span&gt;&lt;span&gt;     1&#x2F;1     1            1           6m27s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                           DESIRED   CURRENT   READY   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicaset.apps&#x2F;volcano-admission-7cfdf5b8d&lt;&#x2F;span&gt;&lt;span&gt;    1         1         1       6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicaset.apps&#x2F;volcano-controllers-c4c5f48b&lt;&#x2F;span&gt;&lt;span&gt;   1         1         1       6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicaset.apps&#x2F;volcano-scheduler-54f77d6788&lt;&#x2F;span&gt;&lt;span&gt;   1         1         1       6m27s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                               COMPLETIONS   DURATION   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job.batch&#x2F;volcano-admission-init&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1           4m24s      6m27s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;chuang-jian-ren-wu&quot;&gt;创建任务&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cpu-ren-wu&quot;&gt;CPU 任务&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubeflow.org&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MPIJob
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openmpi-helloworld-job
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;schedulerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;volcano
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slotsPerWorker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cleanPodPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Running
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mpiReplicaSpecs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Launcher&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;divinerapier&#x2F;openmpi-helloworld:0.0.1
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openmpi-helloworld-job
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mpirun
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--allow-run-as-root
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-np
&lt;&#x2F;span&gt;&lt;span&gt;             - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;helloworld&#x2F;mpi_hello_world
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;divinerapier&#x2F;openmpi-helloworld:0.0.1
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openmpi-helloworld-job
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;gpu-ren-wu&quot;&gt;GPU 任务&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubeflow.org&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MPIJob
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow-benchmarks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;schedulerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;volcano
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slotsPerWorker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cleanPodPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Running
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mpiReplicaSpecs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Launcher&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mpioperator&#x2F;tensorflow-benchmarks:latest
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow-benchmarks
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mpirun
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--allow-run-as-root
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-np
&lt;&#x2F;span&gt;&lt;span&gt;             - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-bind-to
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;none
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-map-by
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;slot
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-x
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NCCL_DEBUG=INFO
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-x
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;LD_LIBRARY_PATH
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-x
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PATH
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-mca
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pml
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ob1
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-mca
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;btl
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^openib
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;python
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scripts&#x2F;tf_cnn_benchmarks&#x2F;tf_cnn_benchmarks.py
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--model=resnet101
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--batch_size=64
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--variable_update=horovod
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvidia.com&#x2F;gpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mpioperator&#x2F;tensorflow-benchmarks:latest
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow-benchmarks
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvidia.com&#x2F;gpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zhu-yi-shi-xiang&quot;&gt;注意事项&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;volcano-scheduler&lt;&#x2F;strong&gt; 在调度任务时，当任务使用的资源太少时会被跳过，具体逻辑为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minMilliCPU &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minMilliScalarResources &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minMemory &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alloc &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Action&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssn &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;framework&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Session&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pendingTasks&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UID&lt;&#x2F;span&gt;&lt;span&gt;]; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tasks &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewPriorityQueue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TaskOrderFn&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TaskStatusIndex&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pending&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Skip BestEffort task in &amp;#39;allocate&amp;#39; action.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Resreq&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsEmpty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;klog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Infof&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Task &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt; is BestEffort task, skip it.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Namespace&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tasks&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pendingTasks&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UID&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tasks
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; IsEmpty returns bool after checking any of resource is less than min possible value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Resource&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;IsEmpty&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MilliCPU &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minMilliCPU &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Memory &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minMemory &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rQuant &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ScalarResources &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rQuant &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minMilliScalarResources &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以，在使用 &lt;strong&gt;volcano&lt;&#x2F;strong&gt; 作为调度器时，必须要对 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 使用的资源做出限制。对于使用 &lt;strong&gt;volcano&lt;&#x2F;strong&gt; 调度 &lt;strong&gt;MPIJob&lt;&#x2F;strong&gt; 时，无论是 &lt;strong&gt;Launcher&lt;&#x2F;strong&gt; 还是 &lt;strong&gt;Worker&lt;&#x2F;strong&gt; 都需要显示声明需要的资源。&lt;&#x2F;p&gt;
&lt;p&gt;更具体地，&lt;strong&gt;volcano&lt;&#x2F;strong&gt; 会将资源分为两个大类:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU&lt;&#x2F;strong&gt; 与 &lt;strong&gt;Memory&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;其他资源&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;要求上述两类资源，至少有一类使用的资源满足最低要求即可。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>调度与驱逐 —— 将 Pod 分配到节点上</title>
		<published>2020-11-15T18:47:40+00:00</published>
		<updated>2020-11-15T18:47:40+00:00</updated>
		<link href="https://blog.kiyoko.io/scheduling-and-eviction-assigning-pods-to-nodes/" type="text/html"/>
		<id>https://blog.kiyoko.io/scheduling-and-eviction-assigning-pods-to-nodes/</id>
		<content type="html">&lt;p&gt;Kubernetes 允许用户强制 Pod 只能在特定的 Node(s) 上，或者建议优先在特定的 Node(s) 上运行。常规方法是使用 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;working-with-objects&#x2F;labels&#x2F;&quot;&gt;Labels and Selectors&lt;&#x2F;a&gt; 来选择。该约束为可选项，默认情况下调度器将自动进行合理的调度，比如，将 pod 分散到节点上，而非在可用资源不足的节点上。但在某些情况下，用户期望对调度 Pod 的 Node(s) 有更多控制，例如，确保 pod 最终落在有 SSD 的机器上，或者将若干有大量通信的服务的 pod 放置在同一个可用区。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nodeselector&quot;&gt;nodeSelector&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;nodeSelector&lt;&#x2F;strong&gt; 是最简单推荐形式的节点选择约束。nodeSelector 是 PodSpec 的一个字段，其包含键值对映射。为了使 pod 可以在某个节点上运行，约束键值对构成的集合必须是节点标签集合的子集。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;get-nodes&quot;&gt;Get nodes&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get nodes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;get-the-names-of-cluster-s-nodes&quot;&gt;Get the names of cluster&#x27;s nodes&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get nodes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;attach-label-to-the-node&quot;&gt;Attach label to the node&lt;&#x2F;h3&gt;
&lt;p&gt;规则为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; label nodes &amp;lt;node-name&amp;gt; &amp;lt;label-key&amp;gt;=&amp;lt;label-value&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;例如，节点 &#x27;kubernetes-foo-node-1.c.a-robinson.internal&#x27;，标签 &#x27;disktype=ssd&#x27;，则可以执行:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; label nodes kubernetes-foo-node-1.c.a-robinson.internal disktype=ssd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过命令验证:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get nodes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --show-labels
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; describe node &amp;lt;node-name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;add-a-nodeselector-field-to-your-pod-configuration&quot;&gt;Add a nodeSelector field to your pod configuration&lt;&#x2F;h3&gt;
&lt;p&gt;如下为原始 Pod 配置文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在此基础上，添加 nodeSelector:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;imagePullPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;IfNotPresent
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeSelector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disktype&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ssd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而改文件可以在 &lt;a href=&quot;https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;pods&#x2F;pod-nginx.yaml&quot;&gt;https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;pods&#x2F;pod-nginx.yaml&lt;&#x2F;a&gt; 得到。因此，使用如下命令创建 Pod:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;pods&#x2F;pod-nginx.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;之后，查看 Pod 所在的 Node 并验证约束是否有效:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get pods&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; wide
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; describe node &amp;lt;node-name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;affinity-and-anti-affinity&quot;&gt;Affinity and anti-affinity&lt;&#x2F;h3&gt;
&lt;p&gt;Affinity and anti-affinity (亲和与反亲和) 是 nodeSelector 提供的一种非常简单的将 pod 约束到具有特定标签的节点上的方法，极大地扩展了用户可以表达约束的类型。关键增强表现为:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;语言更具表现力，不只是 “完全匹配的 AND” 语义&lt;&#x2F;li&gt;
&lt;li&gt;规则可以是一种建议性的，而非硬性要求，即使调度器无法找到满足要求的 Node，依旧会调度该 pod&lt;&#x2F;li&gt;
&lt;li&gt;除了可以使用 Node 本身的标签作为约束之外，还可以使用运行在 Node 上的 pod 的标签作为约束，表明可以或者不可以与哪些 pod 运行在同一 Node 上。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Affinity 功能包含两种类型的 affinity: &lt;strong&gt;node affinity&lt;&#x2F;strong&gt; 与 &lt;strong&gt;inter-pod affinity&#x2F;anti-affinity&lt;&#x2F;strong&gt;。&lt;strong&gt;node affinity&lt;&#x2F;strong&gt; 类似于 &lt;strong&gt;nodeSelector&lt;&#x2F;strong&gt;，对应上述 &lt;strong&gt;1,2&lt;&#x2F;strong&gt; 两点优势。而 &lt;strong&gt;inter-pod affinity&#x2F;anti-affinity&lt;&#x2F;strong&gt; 具有上述 &lt;strong&gt;1,2,3&lt;&#x2F;strong&gt; 三点优势。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;node-affinity&quot;&gt;Node affinity&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Node affinity&lt;&#x2F;strong&gt; 概念上类似于 &lt;strong&gt;nodeSelector&lt;&#x2F;strong&gt;，可以根据节点上的标签来约束 pod 可以调度到哪些节点。&lt;&#x2F;p&gt;
&lt;p&gt;目前有两种类型的 Node affinity，分别为 &lt;strong&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt; 和 &lt;strong&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt; 指定了将 pod 调度到一个节点上必须满足的规则，原则上等同于 nodeSelector，但语法更具有表现力。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt; 指定调度器将尝试执行但不能保证的偏好。&lt;&#x2F;p&gt;
&lt;p&gt;名称中 &lt;strong&gt;IgnoredDuringExecution&lt;&#x2F;strong&gt; 类似于 &lt;strong&gt;nodeSelector&lt;&#x2F;strong&gt; 的用法，表明如果节点的标签在 Pod 运行时发生变更，从而不再满足 pod 上的 affinity 规则时，pod 将仍然继续运行在原节点上。&lt;strong&gt;requiredDuringSchedulingRequiredDuringExecution&lt;&#x2F;strong&gt; 还只存在于计划中。&lt;&#x2F;p&gt;
&lt;p&gt;因此，在下面的示例中:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt; 的含义为: &lt;strong&gt;必须将 pod 运行在具有 kubernetes.io&#x2F;e2e-az-name=e2e-az1 或 kubernetes.io&#x2F;e2e-az-name=e2e-az2 标签的 Node 上&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt; 的含义为: &lt;strong&gt;尝试将 pod 运行具有 another-node-label-key=another-node-label-value 标签的 Node 上，如果这不可能的话，则允许 pod 在其他地方运行&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;with-node-affinity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;affinity&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeAffinity&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeSelectorTerms&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchExpressions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubernetes.io&#x2F;e2e-az-name
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operator&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;In
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;e2e-az1
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;e2e-az2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preference&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchExpressions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;another-node-label-key
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operator&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;In
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;another-node-label-value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;with-node-affinity
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;pause:2.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Node affinity 语法支持的操作符: In，NotIn，Exists，DoesNotExist，Gt，Lt。使用 NotIn 和 DoesNotExist 来实现 &lt;strong&gt;node anti-affinity&lt;&#x2F;strong&gt; 行为，或者使用 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;scheduling-eviction&#x2F;taint-and-toleration&#x2F;&quot;&gt;node taints(节点污点将)&lt;&#x2F;a&gt; pod 从特定节点中驱逐。&lt;&#x2F;p&gt;
&lt;p&gt;如果同时指定了 &lt;strong&gt;nodeSelector&lt;&#x2F;strong&gt; 和 &lt;strong&gt;nodeAffinity&lt;&#x2F;strong&gt;，则要求两者必须同时满足，才能将 pod 调度到候选 Node 上。&lt;&#x2F;p&gt;
&lt;p&gt;如果指定了多个与 &lt;strong&gt;nodeAffinity&lt;&#x2F;strong&gt; 类型关联的 &lt;strong&gt;nodeSelectorTerms&lt;&#x2F;strong&gt;，则 Node 只需要满足其中任何一个 nodeSelectorTerms 即可将 pod 调度到 Node 上。&lt;&#x2F;p&gt;
&lt;p&gt;如果指定了多个与 &lt;strong&gt;nodeSelectorTerms&lt;&#x2F;strong&gt; 关联的 &lt;strong&gt;matchExpressions&lt;&#x2F;strong&gt;，则当且仅当所有 &lt;strong&gt;matchExpressions&lt;&#x2F;strong&gt; 得到满足时才将 pod 调度到该 Node 上。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;scheduling-eviction&#x2F;assign-pod-node&#x2F;&quot;&gt;Assigning Pods to Nodes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes Device Plugin</title>
		<published>2020-11-15T17:20:26+00:00</published>
		<updated>2020-11-15T17:20:26+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-device-plugin/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-device-plugin/</id>
		<content type="html">&lt;p&gt;Kubernetes 提供 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;community&#x2F;blob&#x2F;master&#x2F;contributors&#x2F;design-proposals&#x2F;resource-management&#x2F;device-plugin.md&quot;&gt;device plugin framework&lt;&#x2F;a&gt;，允许用户将系统硬件资源发布到 Kubelet。&lt;&#x2F;p&gt;
&lt;p&gt;Device Plugin 由设备供应商实现，由用户或手动部署或作为 DaemonSet 来部署，而无需定制 Kubernetes 本身的代码。目标设备可以是 GPU、高性能 NIC、FPGA、InfiniBand 适配器以及其他类似的、可能需要特定于供应商的初始化和设置的计算资源。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhu-ce-device-plugin&quot;&gt;注册 Device Plugin&lt;&#x2F;h2&gt;
&lt;p&gt;kubelet 提供了一个 Registration 的 gRPC 服务:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;protobuf&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-protobuf &quot;&gt;&lt;code class=&quot;language-protobuf&quot; data-lang=&quot;protobuf&quot;&gt;&lt;span&gt;service Registration {
&lt;&#x2F;span&gt;&lt;span&gt;    rpc Register(RegisterRequest) returns (Empty) {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Device Plugin&lt;&#x2F;strong&gt; 可以通过此 gRPC 服务在 kubelet 进行注册。在注册时，&lt;strong&gt;Device Plugin&lt;&#x2F;strong&gt; 需要提供如下内容:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Device Plugin 的 Unix 套接字。&lt;&#x2F;li&gt;
&lt;li&gt;Device Plugin 的 API 版本。&lt;&#x2F;li&gt;
&lt;li&gt;ResourceName。遵循 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;manage-resources-containers&#x2F;#extended-resources&quot;&gt;扩展资源命名方案&lt;&#x2F;a&gt;，形如 vendor-domain&#x2F;resourcetype: 比如 NVIDIA GPU 就被公布为 nvidia.com&#x2F;gpu。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在成功注册后，&lt;strong&gt;Device Plugin&lt;&#x2F;strong&gt; 会向 kubelet 发送他所管理的设备列表，之后 kubelet 负责将这些资源发布到 API Server，作为 kubelet 节点状态更新的一部分。&lt;&#x2F;p&gt;
&lt;p&gt;比如，&lt;strong&gt;Device Plugin&lt;&#x2F;strong&gt; 在 kubelet 中注册了 &lt;strong&gt;hardware-vendor.example&#x2F;foo&lt;&#x2F;strong&gt; 并报告了节点上的两个运行状况良好的设备后，节点状态将更新以通告该节点已安装2个 Foo 设备并且是可用的。&lt;&#x2F;p&gt;
&lt;p&gt;然后，用户就可以在 Container 规范中请求这类设备，但是有以下的限制:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;扩展资源仅可作为整数资源使用，且不能被过量使用&lt;&#x2F;li&gt;
&lt;li&gt;设备不能在容器之间共享&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;假设 Kubernetes 集群正在运行一个 &lt;strong&gt;Device Plugin&lt;&#x2F;strong&gt;，ResourceName 为 &lt;strong&gt;hardware-vendor.example&#x2F;foo&lt;&#x2F;strong&gt;。下面就是一个 Pod 示例，请求此资源以运行某演示负载：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+++
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;demo-pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;demo-container-1
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;pause:2.0
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hardware-vendor.example&#x2F;foo&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# pod 需要两个 hardware-vendor.example&#x2F;foo 设备
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 而且只能够调度到满足需求的 node 上
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 如果该节点中有2个以上的设备可用，剩余的设备可供其他 pod 使用
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;shi-xian-device-plugin&quot;&gt;实现 Device Plugin&lt;&#x2F;h2&gt;
&lt;p&gt;Device Plugin 的常规工作流程包括以下几个步骤：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;初始化。在这个阶段，Device Plugin 将执行供应商特定的初始化和设置，以确保设备处于就绪状态。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用主机路径 &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;device-plugins&#x2F; 下的 Unix socket 启动一个 gRPC 服务，该服务实现以下接口：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;protobuf&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-protobuf &quot;&gt;&lt;code class=&quot;language-protobuf&quot; data-lang=&quot;protobuf&quot;&gt;&lt;span&gt;service DevicePlugin {
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; GetDevicePluginOptions returns options to be communicated with Device Manager.
&lt;&#x2F;span&gt;&lt;span&gt;    rpc GetDevicePluginOptions(Empty) returns (DevicePluginOptions) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; ListAndWatch returns a stream of List of Devices
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; Whenever a Device state change or a Device disappears, ListAndWatch
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; returns the new list
&lt;&#x2F;span&gt;&lt;span&gt;    rpc ListAndWatch(Empty) returns (stream ListAndWatchResponse) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; Allocate is called during container creation so that the Device
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; Plugin can run device specific operations and instruct Kubelet
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; of the steps to make the Device available in the container
&lt;&#x2F;span&gt;&lt;span&gt;    rpc Allocate(AllocateRequest) returns (AllocateResponse) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; GetPreferredAllocation returns a preferred set of devices to allocate
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; from a list of available ones. The resulting preferred allocation is not
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; guaranteed to be the allocation ultimately performed by the
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; devicemanager. It is only designed to help the devicemanager make a more
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; informed allocation decision when possible.
&lt;&#x2F;span&gt;&lt;span&gt;    rpc GetPreferredAllocation(PreferredAllocationRequest) returns (PreferredAllocationResponse) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; PreStartContainer is called, if indicated by Device Plugin during registeration phase,
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; before each container start. Device plugin can run device specific operations
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; such as resetting the device before making devices available to the container.
&lt;&#x2F;span&gt;&lt;span&gt;    rpc PreStartContainer(PreStartContainerRequest) returns (PreStartContainerResponse) {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;通过 Unix socket 在主机路径 &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;device-plugins&#x2F;kubelet.sock 处向 kubelet 注册自身。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;成功注册自身后，Device Plugin 将以服务模式运行，之后，它将持续监控设备运行状况，并在设备状态发生任何变化时报告 kubelet。它还负责响应 Allocate gRPC 请求。 在 Allocate 期间，Device Plugin 可能还会做一些设备特定的准备；例如清理 GPU 或初始化 QRNG。如果操作成功，则 Device Plugin 将返回 AllocateResponse，其中包含用于访问被分配的设备容器运行时的配置。 kubelet 将此信息传递到容器运行时。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;chu-li-kubelet-zhong-qi&quot;&gt;处理 kubelet 重启&lt;&#x2F;h3&gt;
&lt;p&gt;Device Plugin 应能监测到 kubelet 重启，并且向新的 kubelet 实例来重新注册自己。在当前实现中，当 kubelet 重启的时候，新的 kubelet 实例会删除 &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;device-plugins 下所有已经存在的 Unix sockets。 Device Plugin 需要能够监控到它的 Unix socket 被删除，并且当发生此类事件时重新注册自己。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bu-shu-device-plugin&quot;&gt;部署 Device Plugin&lt;&#x2F;h2&gt;
&lt;p&gt;用户可以将 Device Plugin 作为节点操作系统的软件包来部署、作为 DaemonSet 来部署或者手动部署。&lt;&#x2F;p&gt;
&lt;p&gt;规范目录 &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;device-plugins 是需要特权访问的，所以 Device Plugin 必须要在被授权的安全的上下文中运行。如果将 Device Plugin 部署为 DaemonSet，&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;device-plugins 目录必须要在 DevicePlugin 的 PodSpec 中声明作为 Volume 被 mount 到 Device Plugin 中。&lt;&#x2F;p&gt;
&lt;p&gt;若选择 DaemonSet 方法，用户可以通过 Kubernetes 进行以下操作: 将 Device Plugin 的 Pod 放置在节点上，在出现故障后重新启动守护进程 Pod，来进行自动升级。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;api-jian-rong-xing&quot;&gt;API 兼容性&lt;&#x2F;h2&gt;
&lt;p&gt;Kubernetes Device Plugin 还处于 beta 版本。所以在稳定版本出来之前 API 会以不兼容的方式进行更改。作为一个项目，Kubernetes 建议 Device Plugin 开发者:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;注意未来版本的更改&lt;&#x2F;li&gt;
&lt;li&gt;支持多个版本的 Device Plugin API，以实现向后&#x2F;向前兼容性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果你启用 DevicePlugins 功能，并在需要升级到 Kubernetes 版本来获得较新的 Device Plugin API 版本的节点上运行 Device Plugin，请在升级这些节点之前先升级 Device Plugin 以支持这两个版本。 采用该方法将确保升级期间设备分配的连续运行。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jian-kong-device-plugin&quot;&gt;监控 Device Plugin&lt;&#x2F;h2&gt;
&lt;p&gt;为了监控 Device Plugin 提供的资源，监控代理程序需要能够发现节点上正在使用的设备，并获取元数据来描述哪个指标与容器相关联。 设备监控代理暴露给 &lt;a href=&quot;https:&#x2F;&#x2F;prometheus.io&#x2F;&quot;&gt;Prometheus&lt;&#x2F;a&gt; 的指标应该遵循 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;community&#x2F;blob&#x2F;master&#x2F;contributors&#x2F;devel&#x2F;sig-instrumentation&#x2F;instrumentation.md&quot;&gt;Kubernetes Instrumentation Guidelines&lt;&#x2F;a&gt;，使用 pod、namespace 和 container 标签来标识容器。&lt;&#x2F;p&gt;
&lt;p&gt;kubelet 提供了 gRPC 服务来使得正在使用中的设备被发现，并且还未这些设备提供了元数据:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;protobuf&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-protobuf &quot;&gt;&lt;code class=&quot;language-protobuf&quot; data-lang=&quot;protobuf&quot;&gt;&lt;span&gt;&#x2F;&#x2F; PodResourcesLister is a service provided by the kubelet that provides information about the
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; node resources consumed by pods and containers on the node
&lt;&#x2F;span&gt;&lt;span&gt;service PodResourcesLister {
&lt;&#x2F;span&gt;&lt;span&gt;    rpc List(ListPodResourcesRequest) returns (ListPodResourcesResponse) {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;gRPC 服务通过 &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pod-resources&#x2F;kubelet.sock 的 UNIX 套接字来提供服务。 Device Plugin资源的监控代理程序可以部署为守护进程或者 DaemonSet。 规范的路径 &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pod-resources 需要特权来进入， 所以监控代理程序必须要在获得授权的安全的上下文中运行。 如果设备监控代理以 DaemonSet 形式运行，必须要在插件的 PodSpec 中声明将 &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pod-resources 目录以 卷的形式被挂载到容器中。&lt;&#x2F;p&gt;
&lt;p&gt;对“PodResources 服务”的支持要求启用 KubeletPodResources 特性门控。 从 Kubernetes 1.15 开始默认启用。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;device-plugin-ji-cheng-the-topology-manager&quot;&gt;Device Plugin 集成 The Topology Manager&lt;&#x2F;h2&gt;
&lt;p&gt;The Topology Manager 是 Kubelet 的一个组件，它允许以拓扑对齐方式来调度资源。 为了做到这一点，Device Plugin API 进行了扩展来包括一个 TopologyInfo 结构体。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;protobuf&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-protobuf &quot;&gt;&lt;code class=&quot;language-protobuf&quot; data-lang=&quot;protobuf&quot;&gt;&lt;span&gt;message TopologyInfo {
&lt;&#x2F;span&gt;&lt;span&gt;    repeated NUMANode nodes = 1;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;message NUMANode {
&lt;&#x2F;span&gt;&lt;span&gt;    int64 ID = 1;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Device Plugin 希望 The Topology Manager 可以将填充的 TopologyInfo 结构体作为设备注册的一部分以及设备 ID 和设备的运行状况发送回去。然后 The Topology Manager 将使用此信息来咨询拓扑管理器并做出资源分配决策。&lt;&#x2F;p&gt;
&lt;p&gt;TopologyInfo 支持定义 nodes 字段，允许为 nil（默认）或者是一个 NUMA 节点的列表。 这样就可以使Device Plugin可以跨越 NUMA 节点去发布。&lt;&#x2F;p&gt;
&lt;p&gt;下面是一个由 Device Plugin 为设备填充 TopologyInfo 结构体的示例:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;pluginapi.Device{ID: &amp;quot;25102017&amp;quot;, Health: pluginapi.Healthy, Topology:&amp;amp;pluginapi.TopologyInfo{Nodes: []*pluginapi.NUMANode{&amp;amp;pluginapi.NUMANode{ID: 0,},}}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;extend-kubernetes&#x2F;compute-storage-net&#x2F;device-plugins&#x2F;&quot;&gt;Kubernetes Device Plugin&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Nvidia Docker</title>
		<published>2020-11-14T18:21:01+00:00</published>
		<updated>2020-11-14T18:21:01+00:00</updated>
		<link href="https://blog.kiyoko.io/nvidia-docker/" type="text/html"/>
		<id>https://blog.kiyoko.io/nvidia-docker/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;nvidia-docker&#x2F;nvidia-container-toolkit.png&quot; alt=&quot;nvidia-container-toolkit.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Nvidia Container Toolkit 包含容器运行时库和一些工具，用于自动配置容器使用 GPU 资源。并且，支持多种不同的容器引擎，如 Docker、LXC、Podman 等。用户根据需要可以自行选择使用哪种引擎。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-architecture-overview-of-nvidia-container-toolkit&quot;&gt;The Architecture Overview of Nvidia Container Toolkit&lt;&#x2F;h2&gt;
&lt;p&gt;Nvidia Container Toolkit 的架构允许其支持任何容器运行时。若以 Docker 为例，其由以下组件，以从上到下的层次结构组成:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;nvidia-docker2&lt;&#x2F;li&gt;
&lt;li&gt;nvidia-container-runtime&lt;&#x2F;li&gt;
&lt;li&gt;nvidia-container-toolkit&lt;&#x2F;li&gt;
&lt;li&gt;libnvidia-container&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;下图为各个组件的关系:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;nvidia-docker&#x2F;nvidia-docker-arch.png&quot; alt=&quot;nvidia-docker-arch.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;components-and-packages&quot;&gt;Components and Packages&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;libnvidia-container&quot;&gt;libnvidia-container&lt;&#x2F;h4&gt;
&lt;p&gt;提供库与 CLI 程序，实现自动化配置 GNU&#x2F;Linux 容器使用 NVIDIA GPU 资源，其实现依赖于内核基础功能，且在设计上与容器运行时解耦。&lt;&#x2F;p&gt;
&lt;p&gt;libnvidia-container 提供了一个定义良好的 API 和一个封装好的 CLI 程序(nvidia-container-cli)，任何容器运行时都可以调用它来支持 NVIDIA GPU。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;nvidia-container-toolkit&quot;&gt;nvidia-container-toolkit&lt;&#x2F;h4&gt;
&lt;p&gt;实现了 runC prestart hook 需要的接口的脚本。该脚本在容器被创建之后，启动之前被 runC 调用，且被赋予访问与容器相关联的 config.json 的权限。脚本根据 config.json 中的信息作为合适的命令行参数 (an appropriate set of flags) 来调用 libnvidia-container CLI。其中，“指定哪些 GPU 设备在容器中使用” 是最重要的参数。&lt;&#x2F;p&gt;
&lt;p&gt;该组件之前的名字是 nvidia-container-runtime-hook，现在系统上的 nvidia-container-runtime-hook 是 nvidia-container-toolkit 的符号链接。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;nvidia-container-runtime&quot;&gt;nvidia-container-runtime&lt;&#x2F;h4&gt;
&lt;p&gt;曾经，nvidia-container-runtime 以 runC 作为基础，添加了 NVIDIA 特定的代码。2019 年，更改为对宿主机上原生 runC 做简单的封装。nvidia-container-runtime 将 runC spec 作为输入，将 nvidia-container-toolkit 脚本作为 prestart hook 注入到 runC spec 中。然后，将修改后的带有该 hook set 的 runC spec 传递给原生 runC 并调用 runC。需要注意的是，该组件不一定是针对 docker 的(但它是针对runC的)。&lt;&#x2F;p&gt;
&lt;p&gt;当该 package 完成安装后，Docker 的 daemon.json 文件会被更新为指向这个二进制文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;docker&#x2F;daemon.json
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exec-opts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;native.cgroupdriver=systemd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default-runtime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nvidia&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runtimes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nvidia&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;nvidia-container-runtime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runtimeArgs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;nvidia-docker2&quot;&gt;nvidia-docker2&lt;&#x2F;h4&gt;
&lt;p&gt;这个 package 是架构中唯一的 docker 专用包。它采用与 nvidia-container-runtime 相关的脚本，并将其安装到 docker 的 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件中。这样，使用者就可以运行 &lt;strong&gt;docker run --runtime=nvidia ...&lt;&#x2F;strong&gt; 来自动为容器添加对 GPU 的支持。这个 package 还安装了一个封装了原生 docker CLI 的脚本，名为 nvidia-docker，避免每次都指定 --runtime=nvidia 来调用 docker。它还允许用户在宿主机上设置环境变量 NV_GPU 来指定将哪些 GPU 注入到容器中。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;pre-requisites&quot;&gt;Pre-Requisites&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.nvidia.com&#x2F;Download&#x2F;index.aspx?lang=en-us&quot;&gt;NVIDIA Drivers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Platform Requirements:
&lt;ol&gt;
&lt;li&gt;GNU&#x2F;Linux x86_64 with kernel version &amp;gt; 3.10&lt;&#x2F;li&gt;
&lt;li&gt;Docker &amp;gt;= 19.03 (recommended, but some distributions may include older versions of Docker. The minimum supported version is 1.12)&lt;&#x2F;li&gt;
&lt;li&gt;NVIDIA GPU with Architecture &amp;gt; Fermi (or compute capability 2.1)&lt;&#x2F;li&gt;
&lt;li&gt;NVIDIA drivers ~= 361.93 (untested on older versions)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Docker CE&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;setting-up-nvidia-container-toolkit&quot;&gt;Setting up NVIDIA Container Toolkit&lt;&#x2F;h3&gt;
&lt;p&gt;安装软件源与 GPG key:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; distribution=$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;os-release;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION_ID&lt;&#x2F;span&gt;&lt;span&gt;) \
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -s -L&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;gpgkey | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-key add - \
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -s -L&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distribution&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;nvidia-docker.list | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-docker.list
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;安装 nvidia-docker2 并重启 Docker Daemon:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo apt-get update \
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; nvidia-docker2 \
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart docker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;启动容器测试，如果得到类似如下的输出则安装成功:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --rm --gpus&lt;&#x2F;span&gt;&lt;span&gt; all nvidia&#x2F;cuda:11.0-base nvidia-smi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+-----------------------------------------------------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NVIDIA-SMI&lt;&#x2F;span&gt;&lt;span&gt; 450.51.06    Driver Version: 450.51.06    CUDA Version: 11.0     |
&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-------------------------------+----------------------+----------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GPU&lt;&#x2F;span&gt;&lt;span&gt;  Name        Persistence-M| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Bus-Id&lt;&#x2F;span&gt;&lt;span&gt;        Disp.A | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Volatile&lt;&#x2F;span&gt;&lt;span&gt; Uncorr. ECC |
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fan&lt;&#x2F;span&gt;&lt;span&gt;  Temp  Perf  Pwr:Usage&#x2F;Cap|         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Memory-Usage &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GPU-Util&lt;&#x2F;span&gt;&lt;span&gt;  Compute M. |
&lt;&#x2F;span&gt;&lt;span&gt;|                               |                      |               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MIG&lt;&#x2F;span&gt;&lt;span&gt; M. |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|===============================+======================+======================&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;|   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;  Tesla T4            On   | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;00000000:00:1E.0&lt;&#x2F;span&gt;&lt;span&gt; Off |                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N&#x2F;A&lt;&#x2F;span&gt;&lt;span&gt;   34C    P8     9W &#x2F;  70W |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0MiB&lt;&#x2F;span&gt;&lt;span&gt; &#x2F; 15109MiB |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;%      Default |
&lt;&#x2F;span&gt;&lt;span&gt;|                               |                      |                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N&#x2F;A &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+-------------------------------+----------------------+----------------------+
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+-----------------------------------------------------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Processes:                                                                  &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GPU&lt;&#x2F;span&gt;&lt;span&gt;   GI   CI        PID   Type   Process name                  GPU Memory |
&lt;&#x2F;span&gt;&lt;span&gt;|        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;   ID                                                   Usage      |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|=============================================================================&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;No&lt;&#x2F;span&gt;&lt;span&gt; running processes found                                                 |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+-----------------------------------------------------------------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.nvidia.com&#x2F;datacenter&#x2F;cloud-native&#x2F;index.html&quot;&gt;NVIDIA Cloud Native Technologies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.nvidia.com&#x2F;datacenter&#x2F;cloud-native&#x2F;container-toolkit&#x2F;install-guide.html&quot;&gt;Container Toolkit Installation Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>为 Linux 增加新磁盘</title>
		<published>2020-11-01T20:41:21+00:00</published>
		<updated>2020-11-01T20:41:21+00:00</updated>
		<link href="https://blog.kiyoko.io/adding-a-new-hard-drive-for-linux/" type="text/html"/>
		<id>https://blog.kiyoko.io/adding-a-new-hard-drive-for-linux/</id>
		<content type="html">&lt;h2 id=&quot;cha-kan-she-bei-wen-jian&quot;&gt;查看设备文件&lt;&#x2F;h2&gt;
&lt;p&gt;将磁盘插入计算机后，在终端中查看:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; lsblk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d -o&lt;&#x2F;span&gt;&lt;span&gt; name,serial
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;    SERIAL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvme0n1&lt;&#x2F;span&gt;&lt;span&gt; 200000000000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo fdisk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -l
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Disk&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;nvme0n1: 931.53 GiB, 1000204886016 bytes, 1953525168 sectors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Disk&lt;&#x2F;span&gt;&lt;span&gt; model: WDS100T3X0C-00SJG0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Units:&lt;&#x2F;span&gt;&lt;span&gt; sectors of 1 * 512 = 512 bytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Sector&lt;&#x2F;span&gt;&lt;span&gt; size (logical&#x2F;physical)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; 512 bytes &#x2F; 512 bytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;I&#x2F;O&lt;&#x2F;span&gt;&lt;span&gt; size (minimum&#x2F;optimal)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; 512 bytes &#x2F; 512 bytes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以确认设备文件为 &lt;code&gt;&#x2F;dev&#x2F;nvme0n1&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chuang-jian-fen-qu&quot;&gt;创建分区&lt;&#x2F;h2&gt;
&lt;p&gt;创建分区表:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo parted &#x2F;dev&#x2F;nvme0n1 mklabel gpt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Information:&lt;&#x2F;span&gt;&lt;span&gt; You may need to update &#x2F;etc&#x2F;fstab.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;创建主分区，并确认对齐:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo parted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -s -m&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;nvme0n1 mkpart primary ext4 1 100%
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo parted &#x2F;dev&#x2F;nvme0n1 align-check opt 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; aligned
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看分区详细信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo parted &#x2F;dev&#x2F;nvme0n1 print
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Model:&lt;&#x2F;span&gt;&lt;span&gt; WDS100T3X0C-00SJG0 (nvme)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Disk&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;nvme0n1: 1000GB
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Sector&lt;&#x2F;span&gt;&lt;span&gt; size (logical&#x2F;physical)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; 512B&#x2F;512B
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Partition&lt;&#x2F;span&gt;&lt;span&gt; Table: gpt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Disk&lt;&#x2F;span&gt;&lt;span&gt; Flags:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Number&lt;&#x2F;span&gt;&lt;span&gt;  Start   End     Size    File system  Name     Flags
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;      1049kB  1000GB  1000GB               primary
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;shi-yong-ci-pan&quot;&gt;使用磁盘&lt;&#x2F;h2&gt;
&lt;p&gt;创建文件系统:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mkfs.ext4 &#x2F;dev&#x2F;nvme0n1p1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mke2fs&lt;&#x2F;span&gt;&lt;span&gt; 1.45.5 (07-Jan-2020)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Discarding&lt;&#x2F;span&gt;&lt;span&gt; device blocks: done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; filesystem with 244190208 4k blocks and 61054976 inodes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Filesystem&lt;&#x2F;span&gt;&lt;span&gt; UUID: b5424944-2d8c-4c5f-8bb4-0e538db5592b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Superblock&lt;&#x2F;span&gt;&lt;span&gt; backups stored on blocks:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;32768,&lt;&#x2F;span&gt;&lt;span&gt; 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4096000,&lt;&#x2F;span&gt;&lt;span&gt; 7962624, 11239424, 20480000, 23887872, 71663616, 78675968,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;102400000,&lt;&#x2F;span&gt;&lt;span&gt; 214990848
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Allocating&lt;&#x2F;span&gt;&lt;span&gt; group tables: done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Writing&lt;&#x2F;span&gt;&lt;span&gt; inode tables: done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; journal (262144 blocks)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Writing&lt;&#x2F;span&gt;&lt;span&gt; superblocks and filesystem accounting information: done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;挂载磁盘:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;nvme
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount &#x2F;dev&#x2F;nvme0n1p1 &#x2F;nvme
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; df&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Filesystem&lt;&#x2F;span&gt;&lt;span&gt;      Size  Used Avail Use% Mounted on
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;dev&#x2F;nvme0n1p1&lt;&#x2F;span&gt;&lt;span&gt;  916G   77M  870G   1% &#x2F;nvme
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ce-shi-ci-pan&quot;&gt;测试磁盘&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd &#x2F;nvme
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ioengine: 可以指定为 psync &#x2F; libaio
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# numjobs: 测试线程数，线程之间的测试相互独立，成倍占用 size 指定的大小
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# rw: 读写方式
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#     read: 顺序读
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#     write: 顺序写
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#     randread: 随机读
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#     randwrite: 随机写
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# bs: 每次读写块大小
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo fio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -direct&lt;&#x2F;span&gt;&lt;span&gt;=1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -iodepth&lt;&#x2F;span&gt;&lt;span&gt; 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -thread -rw&lt;&#x2F;span&gt;&lt;span&gt;=randread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -ioengine&lt;&#x2F;span&gt;&lt;span&gt;=psync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -bs&lt;&#x2F;span&gt;&lt;span&gt;=4k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -size&lt;&#x2F;span&gt;&lt;span&gt;=100G&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -numjobs&lt;&#x2F;span&gt;&lt;span&gt;=4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -group_reporting -name&lt;&#x2F;span&gt;&lt;span&gt;=file
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes DaemonSet</title>
		<published>2020-10-28T14:41:29+00:00</published>
		<updated>2020-10-28T14:41:29+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-daemonset/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-daemonset/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;DaemonSet&lt;&#x2F;strong&gt; 确保全部 (或者某些) 节点上运行一个 Pod 的副本。 当有节点加入集群时，也会为他们新增一个 Pod 。当有节点从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。&lt;&#x2F;p&gt;
&lt;p&gt;DaemonSet 的一些典型用法:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在每个节点上运行集群守护进程
&lt;ul&gt;
&lt;li&gt;比如: 网络插件，存储插件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;在每个节点上运行日志收集守护进程&lt;&#x2F;li&gt;
&lt;li&gt;在每个节点上运行监控守护进程&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chuang-jian-daemonset&quot;&gt;创建 DaemonSet&lt;&#x2F;h2&gt;
&lt;p&gt;下面的 &lt;strong&gt;daemonset.yaml&lt;&#x2F;strong&gt; 文件描述了一个运行 &lt;strong&gt;fluentd-elasticsearch&lt;&#x2F;strong&gt; Docker 镜像的 DaemonSet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DaemonSet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fluentd-elasticsearch
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kube-system
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k8s-app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fluentd-logging
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fluentd-elasticsearch
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fluentd-elasticsearch
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tolerations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# this toleration is to have the daemonset runnable on master nodes
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# remove it if your masters can&amp;#39;t run pods
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;node-role.kubernetes.io&#x2F;master
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;effect&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NoSchedule
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fluentd-elasticsearch
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;quay.io&#x2F;fluentd_elasticsearch&#x2F;fluentd:v2.5.2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;200Mi
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;100m
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;200Mi
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;varlog
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;log
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;varlibdockercontainers
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readOnly&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;terminationGracePeriodSeconds&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;varlog
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostPath&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;log
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;varlibdockercontainers
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostPath&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用 &lt;strong&gt;yaml&lt;&#x2F;strong&gt; 文件创建 &lt;strong&gt;DaemonSet&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;controllers&#x2F;daemonset.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ru-he-diao-du-daemon-pods&quot;&gt;如何调度 Daemon Pods&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;tong-guo-mo-ren-diao-du-qi-diao-du&quot;&gt;通过默认调度器调度&lt;&#x2F;h3&gt;
&lt;p&gt;DaemonSet 确保所有符合条件的节点都运行该 Pod 的一个副本。 通常，运行 Pod 的节点由 Kubernetes 调度器选择。不过，DaemonSet pods 由 DaemonSet 控制器创建和调度。这就带来了以下问题:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pod 行为的不一致性: 正常 Pod 在被创建后等待调度时处于 Pending 状态， DaemonSet Pods 创建后不会处于 Pending 状态下。这使用户感到困惑。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;pod-priority-preemption&#x2F;&quot;&gt;Pod 抢占&lt;&#x2F;a&gt; 由默认调度器处理。启用抢占后，DaemonSet 控制器将在不考虑 Pod 优先级和抢占 的情况下制定调度决策。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;ScheduleDaemonSetPods&lt;&#x2F;strong&gt; 控制 Kubernetes 使用 &lt;strong&gt;默认调度器&lt;&#x2F;strong&gt; 而不是 &lt;strong&gt;DaemonSet 控制器&lt;&#x2F;strong&gt; 来调度 DaemonSets，通过将 &lt;strong&gt;yaml&lt;&#x2F;strong&gt; 配置文件中 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 部分的 &lt;strong&gt;.spec.nodeName&lt;&#x2F;strong&gt; 替换为 &lt;strong&gt;.spec.affinity.nodeAffinity&lt;&#x2F;strong&gt;。更多内容请点击 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;scheduling-eviction&#x2F;assign-pod-node&#x2F;#affinity-and-anti-affinity&quot;&gt;Assigning Pods to Nodes: Affinity and anti-affinity&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;with-node-affinity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;affinity&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeAffinity&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeSelectorTerms&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchExpressions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubernetes.io&#x2F;e2e-az-name
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operator&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;In
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;e2e-az1
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;e2e-az2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preference&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchExpressions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;another-node-label-key
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operator&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;In
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;another-node-label-value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;with-node-affinity
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;pause:2.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt;: 必须将 Pod 部署到满足条件的节点上，否则不断重试&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt;: 优先将 Pod 部署到满足条件的节点上，否则忽略该条件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;此外，系统会自动添加 &lt;strong&gt;node.kubernetes.io&#x2F;unschedulable: NoSchedule&lt;&#x2F;strong&gt; 容忍度到 &lt;strong&gt;DaemonSet Pods&lt;&#x2F;strong&gt;。在调度 DaemonSet Pod 时，默认调度器会忽略 &lt;strong&gt;unschedulable&lt;&#x2F;strong&gt; 节点。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;daemonset&#x2F;&quot;&gt;Kubernetes DaemonSet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;pod-priority-preemption&#x2F;&quot;&gt;Pod Priority and Preemption&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;scheduling-eviction&#x2F;assign-pod-node&#x2F;#affinity-and-anti-affinity&quot;&gt;Assigning Pods to Nodes: Affinity and anti-affinity&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes StatefulSet</title>
		<published>2020-10-27T11:58:31+00:00</published>
		<updated>2020-10-27T11:58:31+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-statefulset/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-statefulset/</id>
		<content type="html">&lt;p&gt;StatefulSet 是用来管理有状态应用的工作负载 API 对象。&lt;&#x2F;p&gt;
&lt;p&gt;StatefulSet 用来管理 Deployment 和扩展一组 Pod，并且能为这些 Pod 提供序号和唯一性保证。&lt;&#x2F;p&gt;
&lt;p&gt;和 Deployment 相同的是，StatefulSet 管理了基于相同容器定义的一组 Pod。但和 Deployment 不同的是，StatefulSet 为它们的每个 Pod 维护了一个固定的 ID。这些 Pod 是基于相同的声明来创建的，但是不能相互替换：无论怎么调度，每个 Pod 都有一个永久不变的 ID。&lt;&#x2F;p&gt;
&lt;p&gt;StatefulSet 和其他控制器使用相同的工作模式。你在 StatefulSet 对象 中定义你期望的状态，然后 StatefulSet 的 控制器 就会通过各种更新来达到那种你想要的状态。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-yong-statefulsets&quot;&gt;使用 StatefulSets&lt;&#x2F;h2&gt;
&lt;p&gt;StatefulSets 对于需要满足以下一个或多个需求的应用程序很有价值:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;稳定的、唯一的网络标识符。&lt;&#x2F;li&gt;
&lt;li&gt;稳定的、持久的存储。&lt;&#x2F;li&gt;
&lt;li&gt;有序的、优雅的部署和缩放。&lt;&#x2F;li&gt;
&lt;li&gt;有序的、自动的滚动更新。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在上面，稳定意味着 Pod 调度或重调度的整个过程是有持久性的。如果应用程序不需要任何稳定的标识符或有序的部署、删除或伸缩，则应该使用由一组无状态的副本控制器提供的工作负载来部署应用程序，比如 Deployment 或者 ReplicaSet 可能更适用于您的无状态应用部署需要。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xian-zhi&quot;&gt;限制&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;给定 Pod 的存储必须由 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;examples&#x2F;tree&#x2F;master&#x2F;staging&#x2F;persistent-volume-provisioning&#x2F;README.md&quot;&gt;PersistentVolume&lt;&#x2F;a&gt; 驱动 基于所请求的 &lt;strong&gt;storage class&lt;&#x2F;strong&gt; 来提供，或者由管理员预先提供。&lt;&#x2F;li&gt;
&lt;li&gt;删除或者收缩 StatefulSet 并 &lt;strong&gt;不会删除&lt;&#x2F;strong&gt; 它关联的存储卷。这样做是为了保证数据安全，它通常比自动清除 StatefulSet 所有相关的资源更有价值。&lt;&#x2F;li&gt;
&lt;li&gt;StatefulSet 当前需要 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;service&#x2F;#headless-services&quot;&gt;Headless Services&lt;&#x2F;a&gt; 来负责 Pod 的网络标识。用户需要负责创建此服务。&lt;&#x2F;li&gt;
&lt;li&gt;当删除 StatefulSets 时，StatefulSet 不提供任何终止 Pod 的保证。为了实现 StatefulSet 中的 Pod 可以有序和优雅的终止，可以在删除之前将 StatefulSet 缩放为 0。&lt;&#x2F;li&gt;
&lt;li&gt;在默认 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;statefulset&#x2F;#pod-management-policies&quot;&gt;Pod 管理策略&lt;&#x2F;a&gt;(&lt;strong&gt;OrderedReady&lt;&#x2F;strong&gt;) 时使用 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;statefulset&#x2F;#rolling-updates&quot;&gt;滚动更新&lt;&#x2F;a&gt;，可能进入需要 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;statefulset&#x2F;#forced-rollback&quot;&gt;人工干预&lt;&#x2F;a&gt; 才能修复的损坏状态。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zu-jian&quot;&gt;组件&lt;&#x2F;h2&gt;
&lt;p&gt;下面的示例演示了 StatefulSet 的组件。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;web
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterIP&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+++
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;StatefulSet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;web
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# has to match .spec.template.metadata.labels
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serviceName&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# by default is 1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# has to match .spec.selector.matchLabels
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;terminationGracePeriodSeconds&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;nginx-slim:0.8
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;web
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;www
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeClaimTemplates&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;www
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;accessModes&lt;&#x2F;span&gt;&lt;span&gt;: [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ReadWriteOnce&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;storageClassName&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-storage-class&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;storage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1Gi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;名为 &lt;strong&gt;nginx&lt;&#x2F;strong&gt; 的 Headless Service 用来控制网络域名。&lt;&#x2F;li&gt;
&lt;li&gt;名为 &lt;strong&gt;web&lt;&#x2F;strong&gt; 的 StatefulSet 有一个 Spec，它表明将在独立的 3 个 Pod 副本中启动 nginx 容器。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;volumeClaimTemplates&lt;&#x2F;strong&gt; 将通过 PersistentVolumes 驱动提供的 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;persistent-volumes&#x2F;&quot;&gt;PersistentVolumes&lt;&#x2F;a&gt; 来提供稳定的存储。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;StatefulSet 对象的 &lt;strong&gt;name&lt;&#x2F;strong&gt; 必须是合法的 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;working-with-objects&#x2F;names#dns-subdomain-names&quot;&gt;DNS 域名&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pod-selector&quot;&gt;Pod Selector&lt;&#x2F;h2&gt;
&lt;p&gt;必须将 StatefullSet 的 &lt;strong&gt;.spec.selector&lt;&#x2F;strong&gt; 字段与 &lt;strong&gt;.spec.template.metadata.labels&lt;&#x2F;strong&gt; 设置相同的值。&lt;&#x2F;p&gt;
&lt;p&gt;在 Kubernetes 1.8 版本之前，忽略 &lt;strong&gt;.spec.selector&lt;&#x2F;strong&gt; 字段会获得默认设置值。在 1.8 及以后的版本中，未指定匹配的 Pod Selector 将在创建 StatefulSet 期间导致验证错误。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;statefulset&#x2F;&quot;&gt;Kubernetes StatefulSet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes Deployment</title>
		<published>2020-10-27T10:48:23+00:00</published>
		<updated>2020-10-27T10:48:23+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-deployment/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-deployment/</id>
		<content type="html">&lt;p&gt;一个 Deployment 控制器为 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;&quot;&gt;Pods&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;replicaset&#x2F;&quot;&gt;ReplicaSets&lt;&#x2F;a&gt; 提供声明式的更新能力。&lt;&#x2F;p&gt;
&lt;p&gt;用户负责描述 Deployment 中的 &lt;strong&gt;目标状态&lt;&#x2F;strong&gt;，而 Deployment 控制器以受控速率更改 &lt;strong&gt;实际状态&lt;&#x2F;strong&gt;，使其变为 &lt;strong&gt;期望状态&lt;&#x2F;strong&gt;。用户可以定义 Deployment 以创建新的 ReplicaSet，或删除现有 Deployment， 并通过新的 Deployment 接收(adopt)其资源。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;&#x2F;strong&gt;： 不要管理 Deployment 所拥有的 ReplicaSet 。 如果存在下面未覆盖的使用场景，请考虑在 Kubernetes 仓库中提出 Issue。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;yong-li&quot;&gt;用例&lt;&#x2F;h2&gt;
&lt;p&gt;以下是 Deployments 的典型用例：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;deployment&#x2F;#creating-a-deployment&quot;&gt;创建 Deployment 使 ReplicaSet 上线(rollout)&lt;&#x2F;a&gt;。 ReplicaSet 在后台创建 Pods。 检查 ReplicaSet 的上线状态，查看其是否成功。&lt;&#x2F;li&gt;
&lt;li&gt;通过更新 Deployment 的 PodTemplateSpec，声明 Pod 的新状态 。 新的 ReplicaSet 会被创建，Deployment 以受控速率将 Pod 从旧 ReplicaSet 迁移到新 ReplicaSet。 每个新的 ReplicaSet 都会更新 Deployment 的修订版本。&lt;&#x2F;li&gt;
&lt;li&gt;如果 Deployment 的当前状态不稳定，回滚到较早的 Deployment 版本。 每次回滚都会更新 Deployment 的修订版本。&lt;&#x2F;li&gt;
&lt;li&gt;扩大 Deployment 规模以承担更多负载。&lt;&#x2F;li&gt;
&lt;li&gt;暂停 Deployment 以应用对 PodTemplateSpec 所作的多项修改， 然后恢复其执行以启动新的上线版本。&lt;&#x2F;li&gt;
&lt;li&gt;使用 Deployment 状态 来判定上线过程是否出现停滞。&lt;&#x2F;li&gt;
&lt;li&gt;清理较旧的不再需要的 ReplicaSet。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chuang-jian-deployment&quot;&gt;创建 Deployment&lt;&#x2F;h2&gt;
&lt;p&gt;下面是 Deployment 示例。Deployment 创建一个 ReplicaSet，负责启动三个 &lt;strong&gt;nginx&lt;&#x2F;strong&gt; Pods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx:1.14.2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在该例中:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建名为 &lt;strong&gt;nginx-deployment&lt;&#x2F;strong&gt; (由 &lt;strong&gt;.metadata.name&lt;&#x2F;strong&gt; 字段标明) 的 Deployment。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;该 Deployment 创建三个 (由 &lt;strong&gt;.spec.replicas&lt;&#x2F;strong&gt; 字段标明) Pod 副本。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;.spec.selector&lt;&#x2F;strong&gt; 字段定义 Deployment 如何查找要管理的 Pods。 在这里，你只需选择在 Pod 模板中定义的标签（app: nginx）。 不过，更复杂的选择规则是也可能的，只要 Pod 模板&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;&#x2F;strong&gt;： &lt;strong&gt;matchLabels&lt;&#x2F;strong&gt; 字段是 {key,value} 字典映射。在 &lt;strong&gt;matchLabels&lt;&#x2F;strong&gt; 映射中的单个 {key,value} 映射等效于 &lt;strong&gt;matchExpressions&lt;&#x2F;strong&gt; 中的一个元素，即其 key 字段是 “key”，operator 为 “In”，value 数组仅包含 “value”。在 &lt;strong&gt;matchLabels&lt;&#x2F;strong&gt; 和 &lt;strong&gt;matchExpressions&lt;&#x2F;strong&gt; 中给出的所有条件都必须满足才能匹配。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;.spec.template&lt;&#x2F;strong&gt; 字段包含以下子字段:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;strong&gt;.metadata.labels&lt;&#x2F;strong&gt; 字段为 Pod 设置标签 &lt;strong&gt;app: nginx&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;.template.spec&lt;&#x2F;strong&gt; 字段表示 Pod 的模板，指示 Pods 运行一个 &lt;strong&gt;nginx&lt;&#x2F;strong&gt; 容器，该容器运行 &lt;strong&gt;nginx:1.14.2&lt;&#x2F;strong&gt; 镜像。&lt;&#x2F;li&gt;
&lt;li&gt;创建一个容器，使用 &lt;strong&gt;.spec.template.spec.containers[0].name&lt;&#x2F;strong&gt; 字段 &lt;strong&gt;nginx&lt;&#x2F;strong&gt; 作为名字&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;开始之前，请确保的 Kubernetes 集群已启动并运行。 按照以下步骤创建上述 Deployment:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过运行以下命令创建 Deployment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;controllers&#x2F;nginx-deployment.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;检查 Deployment 是否已创建。如果仍在创建 Deployment， 则输出类似于:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get deployments
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;               READY   UP-TO-DATE   AVAILABLE   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt;   0&#x2F;3     0            0           1s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在检查集群中的 Deployment 时，所显示的字段有：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;NAME 列出了集群中 Deployment 的名称。&lt;&#x2F;li&gt;
&lt;li&gt;READY 显示应用程序的可用的 &lt;strong&gt;副本&lt;&#x2F;strong&gt; 数。显示的模式是“就绪个数&#x2F;期望个数”。&lt;&#x2F;li&gt;
&lt;li&gt;UP-TO-DATE 显示为了打到期望状态已经更新的副本数。&lt;&#x2F;li&gt;
&lt;li&gt;AVAILABLE 显示应用可供用户使用的副本数。&lt;&#x2F;li&gt;
&lt;li&gt;AGE 显示应用程序运行的时间。
请注意期望副本数是根据 &lt;strong&gt;.spec.replicas&lt;&#x2F;strong&gt; 字段设置 3。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;查看 Deployment 上线状态:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; rollout status deployment.v1.apps&#x2F;nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Waiting&lt;&#x2F;span&gt;&lt;span&gt; for rollout to finish: 2 out of 3 new replicas have been updated...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; successfully rolled out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;查看 Deployment 创建的 ReplicaSet (rs):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                          DESIRED   CURRENT   READY   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-75675f5897&lt;&#x2F;span&gt;&lt;span&gt;   3         3         3       18s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ReplicaSet 输出中包含以下字段:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;NAME 列出名字空间中 ReplicaSet 的名称；&lt;&#x2F;li&gt;
&lt;li&gt;DESIRED 显示应用的期望副本个数，即在创建 Deployment 时所定义的值。 此为期望状态；&lt;&#x2F;li&gt;
&lt;li&gt;CURRENT 显示当前运行状态中的副本个数；&lt;&#x2F;li&gt;
&lt;li&gt;READY 显示应用中有多少副本可以为用户提供服务；&lt;&#x2F;li&gt;
&lt;li&gt;AGE 显示应用已经运行的时间长度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;&#x2F;strong&gt;: ReplicaSet 的名称始终被格式化为 &lt;strong&gt;[Deployment名称]-[随机字符串]&lt;&#x2F;strong&gt;。 其中的随机字符串是使用 &lt;strong&gt;pod-template-hash&lt;&#x2F;strong&gt; 作为种子随机生成的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;查看每个 Pod 自动生成的标签:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get pods&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --show-labels
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                READY     STATUS    RESTARTS   AGE       LABELS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-75675f5897-7ci7o&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1       Running   0          18s       app=nginx,pod-template-hash=3123191453
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-75675f5897-kzszj&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1       Running   0          18s       app=nginx,pod-template-hash=3123191453
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-75675f5897-qqcnn&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1       Running   0          18s       app=nginx,pod-template-hash=3123191453
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所创建的 ReplicaSet 确保总是存在三个 &lt;strong&gt;nginx&lt;&#x2F;strong&gt; Pod。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;&#x2F;strong&gt;: 必须在 Deployment 中指定适当的 &lt;strong&gt;.spec.selector&lt;&#x2F;strong&gt; 和 &lt;strong&gt;.spec.template.metadata.labels&lt;&#x2F;strong&gt;。不要与其他控制器重叠。 Kubernetes 不会阻止这样做，但是如果多个控制器具有重叠的 selector，它们可能会发生冲突 执行难以预料的操作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;pod-template-hash-biao-qian&quot;&gt;Pod-template-hash 标签&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;&#x2F;strong&gt;: 不要更改此标签&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Deployment 控制器将 &lt;strong&gt;pod-template-hash&lt;&#x2F;strong&gt; 标签添加到 Deployment 所创建或接收(adopt) 的 每个 ReplicaSet 。&lt;&#x2F;p&gt;
&lt;p&gt;此标签可确保 Deployment 的子 ReplicaSets 不重叠。 标签是通过对 ReplicaSet 的 PodTemplate 进行哈希处理。 所生成的哈希值被添加到 ReplicaSet 的 &lt;strong&gt;selector&lt;&#x2F;strong&gt;、Pod 的 &lt;strong&gt;label&lt;&#x2F;strong&gt;，并存在于在 ReplicaSet 可能拥有的任何现有 Pod 中。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;geng-xin-deployment&quot;&gt;更新 Deployment&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;&#x2F;strong&gt;: 仅当 Deployment 的 &lt;strong&gt;.spec.template&lt;&#x2F;strong&gt; 发生改变时，例如模板的标签或容器镜像被更新，才会触发 Deployment 上线。其他更新(如对 Deployment 执行扩缩容的操作) 不会触发上线动作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;按照以下步骤更新 Deployment:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;更新 &lt;strong&gt;nginx&lt;&#x2F;strong&gt; Pod 镜像，从 &lt;strong&gt;nginx:1.14.2&lt;&#x2F;strong&gt; 到 &lt;strong&gt;nginx:1.16.1&lt;&#x2F;strong&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --record&lt;&#x2F;span&gt;&lt;span&gt; deployment.apps&#x2F;nginx-deployment set image \
&lt;&#x2F;span&gt;&lt;span&gt;   deployment.v1.apps&#x2F;nginx-deployment nginx=nginx:1.16.1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt; image updated
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者使用下面的命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl set image deployment&#x2F;nginx-deployment nginx=nginx:1.16.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --record
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt; image updated
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者，可以 &lt;strong&gt;edit&lt;&#x2F;strong&gt; Deployment 并将 &lt;strong&gt;.spec.template.spec.containers[0].image&lt;&#x2F;strong&gt; 从 &lt;strong&gt;nginx:1.14.2&lt;&#x2F;strong&gt; 更改至 &lt;strong&gt;nginx:1.16.1&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl edit deployment.v1.apps&#x2F;nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt; edited
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;查看上线状态，运行:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl rollout status deployment.v1.apps&#x2F;nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Waiting&lt;&#x2F;span&gt;&lt;span&gt; for rollout to finish: 2 out of 3 new replicas have been updated...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 或者
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; successfully rolled out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;获取关于已更新的 Deployment 的更多信息:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看 Deployment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get deployments
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt;   3         3         3            3           36s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;查看 Deployment 通过创建新的 ReplicaSet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                          DESIRED   CURRENT   READY   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-1564180365&lt;&#x2F;span&gt;&lt;span&gt;   3         3         3       6s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-2035384211&lt;&#x2F;span&gt;&lt;span&gt;   0         0         0       36s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;查看 Deployment 的 Pod&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get pods
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                READY     STATUS    RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-1564180365-khku8&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1       Running   0          14s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-1564180365-nacti&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1       Running   0          14s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-1564180365-z9gth&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1       Running   0          14s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Deployment 可确保在更新时仅关闭一定数量的 Pod。默认情况下，它确保至少所需 Pods 数量的 &lt;strong&gt;75%&lt;&#x2F;strong&gt; 处于运行状态 (最大不可用比例为 25%)。&lt;&#x2F;p&gt;
&lt;p&gt;Deployment 还确保所创建 Pod 的数量只比期望 Pods 的数量超出一定数值。默认情况下，Deployment 可确保实际启动的 Pod 个数最大为期望值的 125%。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;获取 Deployment 的更多信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; describe deployments
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;&quot;&gt;Kubernetes Pods&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;replicaset&#x2F;&quot;&gt;Kubernetes ReplicaSets&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>&#x2F;opt&#x2F;cni - readonly filesystem</title>
		<published>2020-10-26T11:44:37+00:00</published>
		<updated>2020-10-26T11:44:37+00:00</updated>
		<link href="https://blog.kiyoko.io/opt-cni-is-readonly-directory/" type="text/html"/>
		<id>https://blog.kiyoko.io/opt-cni-is-readonly-directory/</id>
		<content type="html">&lt;p&gt;在部署 &lt;a href=&quot;https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;getting-started&#x2F;kubernetes&#x2F;flannel&#x2F;flannel&quot;&gt;Canal&lt;&#x2F;a&gt; 时遇到如下错误:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;查看 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 状态:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get pods&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --all-namespaces
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAMESPACE&lt;&#x2F;span&gt;&lt;span&gt;     NAME                                                              READY   STATUS                   RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kube-system&lt;&#x2F;span&gt;&lt;span&gt;   canal-5qk26                                                       0&#x2F;2     Init:RunContainerError   0          10m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kube-system&lt;&#x2F;span&gt;&lt;span&gt;   kube-proxy-tt2qn                                                  0&#x2F;1     CrashLoopBackOff         10         11m
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;查看 &lt;strong&gt;canal-5qk26&lt;&#x2F;strong&gt; 事件:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; kube-system describe pod canal-5qk26
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Events:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;     Reason          Age                     From                Message
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;----&lt;&#x2F;span&gt;&lt;span&gt;     ------          ----                    ----                -------
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Normal&lt;&#x2F;span&gt;&lt;span&gt;   Scheduled       6m41s                   default-scheduler   Successfully assigned kube-system&#x2F;canal-5qk26 to ubuntu-01
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Warning&lt;&#x2F;span&gt;&lt;span&gt;  Failed          6m40s                   kubelet, ubuntu-01  Error: failed to start container &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;install-cni&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: Error response from daemon: can&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;t join IPC of container 1f3affaa9eba3f1087ac2309f7c4147a54e2cbad09be733e9c394ce7a8ba583b: container 1f3affaa9eba3f1087ac2309f7c4147a54e2cbad09be733e9c394ce7a8ba583b is not running
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  Warning  Failed          6m39s                   kubelet, ubuntu-01  Error: failed to start container &amp;quot;install-cni&amp;quot;: Error response from daemon: cannot join network of a non running container: 1861c340dfadba101b333af1163329a88a8e02fd25e5d657b4e0954acd09d3d5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  Warning  Failed          6m37s                   kubelet, ubuntu-01  Error: failed to start container &amp;quot;install-cni&amp;quot;: Error response from daemon: error while creating mount source path &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&#x2F;opt&#x2F;cni&#x2F;bin&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: mkdir &#x2F;opt&#x2F;cni: read-only file system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  Warning  BackOff         6m34s (x3 over 6m38s)   kubelet, ubuntu-01  Back-off restarting failed container
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  Normal   Pulled          6m33s (x5 over 6m40s)   kubelet, ubuntu-01  Container image &amp;quot;calico&#x2F;cni:v3.16.4&amp;quot; already present on machine
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  Normal   Created         6m33s (x5 over 6m40s)   kubelet, ubuntu-01  Created container install-cni
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  Normal   SandboxChanged  100s (x269 over 6m39s)  kubelet, ubuntu-01  Pod sandbox changed, it will be killed and re-created.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;查看 &lt;strong&gt;kube-proxy-tt2qn&lt;&#x2F;strong&gt; 事件:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; kube-system describe pod kube-proxy-tt2qn
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Events:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;     Reason          Age                      From                Message
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;----&lt;&#x2F;span&gt;&lt;span&gt;     ------          ----                     ----                -------
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Normal&lt;&#x2F;span&gt;&lt;span&gt;   Scheduled       11m                      default-scheduler   Successfully assigned kube-system&#x2F;kube-proxy-tt2qn to ubuntu-01
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Normal&lt;&#x2F;span&gt;&lt;span&gt;   Pulled          11m (x2 over 11m)        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubelet,&lt;&#x2F;span&gt;&lt;span&gt; ubuntu-01  Container image &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;registry.aliyuncs.com&#x2F;google_containers&#x2F;kube-proxy:v1.19.3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; already present on machine
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Normal&lt;&#x2F;span&gt;&lt;span&gt;   Created         11m (x2 over 11m)        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubelet,&lt;&#x2F;span&gt;&lt;span&gt; ubuntu-01  Created container kube-proxy
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Warning&lt;&#x2F;span&gt;&lt;span&gt;  Failed          11m                      kubelet, ubuntu-01  Error: failed to start container &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kube-proxy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: Error response from daemon: cannot join network of a non running container: 119388927b173ad23226c1049db0c1269ada343b133774807a1615cc79442246
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Warning&lt;&#x2F;span&gt;&lt;span&gt;  BackOff         11m (x9 over 11m)        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubelet,&lt;&#x2F;span&gt;&lt;span&gt; ubuntu-01  Back-off restarting failed container
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Normal&lt;&#x2F;span&gt;&lt;span&gt;   SandboxChanged  11m (x10 over 11m)       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubelet,&lt;&#x2F;span&gt;&lt;span&gt; ubuntu-01  Pod sandbox changed, it will be killed and re-created.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;查看 &lt;strong&gt;Worker&lt;&#x2F;strong&gt; 节点上 &lt;strong&gt;Kubelet&lt;&#x2F;strong&gt; 与 &lt;strong&gt;Docker&lt;&#x2F;strong&gt; 日志:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; journalctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt; Logs begin at Mon 2020-10-19 10:09:50 UTC. --
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Oct&lt;&#x2F;span&gt;&lt;span&gt; 26 02:31:35 ubuntu-01 docker.dockerd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1781&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: time=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2020-10-26T02:31:35.429587085Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; level=error msg=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Handler for POST &#x2F;v1.40&#x2F;containers&#x2F;aef879b89cd75d23249e76091a4716c1303855b904979e983920aae02da01d18&#x2F;start returned error: error while creating mount source path &amp;#39;&#x2F;opt&#x2F;cni&#x2F;bin&amp;#39;: mkdir &#x2F;opt&#x2F;cni: read-only file system&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Oct&lt;&#x2F;span&gt;&lt;span&gt; 26 02:31:35 ubuntu-01 kubelet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;281110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: E1026 02:31:35.474035  281110 remote_runtime.go:248] StartContainer &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aef879b89cd75d23249e76091a4716c1303855b904979e983920aae02da01d18&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; from runtime service failed: rpc error: code = Unknown desc = failed to start container &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aef879b89cd75d23249e76091a4716c1303855b904979e983920aae02da01d18&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: Error response from daemon: error while creating mount source path &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;opt&#x2F;cni&#x2F;bin&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: mkdir &#x2F;opt&#x2F;cni: read-only file system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Oct&lt;&#x2F;span&gt;&lt;span&gt; 26 02:31:35 ubuntu-01 kubelet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;281110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: E1026 02:31:35.474175  281110 pod_workers.go:191] Error syncing pod 5f45d450-c4e9-45dc-b2c6-52a95570ba71 (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;canal-5qk26_kube-system(5f45d450-c4e9-45dc-b2c6-52a95570ba71)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; skipping: failed to &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;StartContainer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; for &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;install-cni&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; with RunContainerError: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to start container &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aef879b89cd75d23249e76091a4716c1303855b904979e983920aae02da01d18&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: Error response from daemon: error while creating mount source path &amp;#39;&#x2F;opt&#x2F;cni&#x2F;bin&amp;#39;: mkdir &#x2F;opt&#x2F;cni: read-only file system&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Oct&lt;&#x2F;span&gt;&lt;span&gt; 26 02:31:36 ubuntu-01 audit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;315954&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: AVC apparmor=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DENIED&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; operation=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; info=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no new privs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; error=-1 profile=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;snap.docker.dockerd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; name=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pause&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; pid=315954 comm=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runc:[2:INIT]&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; requested_mask=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; denied_mask=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; fsuid=0 ouid=0 target=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker-default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Oct&lt;&#x2F;span&gt;&lt;span&gt; 26 02:31:36 ubuntu-01 kernel: audit: type=1400 audit(1603679496.465:6039)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; apparmor=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DENIED&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; operation=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; info=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no new privs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; error=-1 profile=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;snap.docker.dockerd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; name=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pause&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; pid=315954 comm=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runc:[2:INIT]&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; requested_mask=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; denied_mask=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; fsuid=0 ouid=0 target=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker-default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Oct&lt;&#x2F;span&gt;&lt;span&gt; 26 02:31:36 ubuntu-01 kubelet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;281110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: W1026 02:31:36.635730  281110 cni.go:239] Unable to update cni config: no networks found in &#x2F;etc&#x2F;cni&#x2F;net.d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;根据上述日志信息，可以确认根本错误出现在 &lt;strong&gt;Docker&lt;&#x2F;strong&gt; 中:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;error while creating mount source path &amp;#39;&#x2F;opt&#x2F;cni&#x2F;bin&amp;#39;: mkdir &#x2F;opt&#x2F;cni: read-only file system
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但宿主机目录 &lt;strong&gt;&#x2F;opt&#x2F;cni&lt;&#x2F;strong&gt; 的权限为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; stat &#x2F;opt&#x2F;cni&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File:&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;opt&#x2F;cni&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size:&lt;&#x2F;span&gt;&lt;span&gt; 4096            Blocks: 8          IO Block: 4096   directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Device:&lt;&#x2F;span&gt;&lt;span&gt; fd00h&#x2F;64768d    Inode: 917533      Links: 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; (0755&#x2F;drwxr-xr-x)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Uid:&lt;&#x2F;span&gt;&lt;span&gt; (    0&#x2F;    root)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gid:&lt;&#x2F;span&gt;&lt;span&gt; (    0&#x2F;    root)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-26 01:41:07.222221020 +0000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Modify:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-20 13:00:36.461719609 +0000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Change:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-20 13:00:36.461719609 +0000
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Birth:&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因此，推测为 &lt;strong&gt;Docker&lt;&#x2F;strong&gt; 服务的问题。最终，通过重启 &lt;strong&gt;Docker&lt;&#x2F;strong&gt; 解决问题:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart docker.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>MPI Operator</title>
		<published>2020-10-24T18:17:12+00:00</published>
		<updated>2020-10-24T18:17:12+00:00</updated>
		<link href="https://blog.kiyoko.io/mpi-operator/" type="text/html"/>
		<id>https://blog.kiyoko.io/mpi-operator/</id>
		<content type="html">&lt;h2 id=&quot;an-zhuang&quot;&gt;安装&lt;&#x2F;h2&gt;
&lt;p&gt;部署默认配置的 &lt;strong&gt;mpi-operator&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;kubeflow&#x2F;mpi-operator
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; mpi-operator
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; deploy&#x2F;v1&#x2F;mpi-operator.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;验证是否安装成功:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get crd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# NAME                                          CREATED AT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# mpijobs.kubeflow.org                          2020-10-23T08:40:15Z
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;can-shu-xuan-xiang&quot;&gt;参数选项&lt;&#x2F;h3&gt;
&lt;p&gt;在使用 &lt;strong&gt;v1&lt;&#x2F;strong&gt; 版本时，需要注意几个选项:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-namespace&lt;&#x2F;strong&gt;: 不为空时，只监控指定 &lt;strong&gt;namespace&lt;&#x2F;strong&gt; 的 &lt;strong&gt;MPIJob&lt;&#x2F;strong&gt;，否则将监控所有的 &lt;strong&gt;namespace&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;-gang-scheduling&lt;&#x2F;strong&gt;: 指定使用的 &lt;strong&gt;gang scheduler&lt;&#x2F;strong&gt; 的名字，此时会启动 &lt;strong&gt;gang scheduling&lt;&#x2F;strong&gt; 调度策略&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;launcher-runs-workloads&lt;&#x2F;strong&gt;: 在 &lt;strong&gt;launcher&lt;&#x2F;strong&gt; 拥有 &lt;strong&gt;GPU&lt;&#x2F;strong&gt; 时执行任务&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;shi-yong&quot;&gt;使用&lt;&#x2F;h2&gt;
&lt;p&gt;创建一个 &lt;strong&gt;MPIJob&lt;&#x2F;strong&gt; 的配置文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubeflow.org&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MPIJob
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openmpi-helloworld
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slotsPerWorker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cleanPodPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Running
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mpiReplicaSpecs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Launcher&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;divinerapier&#x2F;openmpi-helloworld:0.0.1
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openmpi-helloworld
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mpirun
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--allow-run-as-root
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-np
&lt;&#x2F;span&gt;&lt;span&gt;             - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;helloworld&#x2F;mpi_hello_world
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1Gi
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1Gi
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;divinerapier&#x2F;openmpi-helloworld:0.0.1
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openmpi-helloworld
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1Gi
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1Gi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;部署到 &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 上:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;openmpi-helloworld.yml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubeflow&#x2F;mpi-operator&quot;&gt;GitHub: MPI Operator&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;kubeflow&#x2F;introduction-to-kubeflow-mpi-operator-and-industry-adoption-296d5f2e6edc&quot;&gt;Introduction to Kubeflow MPI Operator and Industry Adoption&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.kubeflow.org&#x2F;docs&#x2F;components&#x2F;training&#x2F;mpi&#x2F;&quot;&gt;MPI Training&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>在 Docker 中使用 OpenMPI</title>
		<published>2020-10-24T16:57:06+00:00</published>
		<updated>2020-10-24T16:57:06+00:00</updated>
		<link href="https://blog.kiyoko.io/openmpi-in-docker/" type="text/html"/>
		<id>https://blog.kiyoko.io/openmpi-in-docker/</id>
		<content type="html">&lt;h2 id=&quot;gou-jian-base-jing-xiang&quot;&gt;构建 Base 镜像&lt;&#x2F;h2&gt;
&lt;p&gt;基于 &lt;strong&gt;Ubuntu 20.04 + OpenMPI 4.0.5&lt;&#x2F;strong&gt; 构建 &lt;strong&gt;Base&lt;&#x2F;strong&gt; 镜像:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; ubuntu:20.04
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;apt update
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;apt install -y wget gcc g++ make
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install OpenSSH for MPI to communicate between containers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;apt-get install -y --no-install-recommends openssh-client openssh-server &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    mkdir -p &#x2F;var&#x2F;run&#x2F;sshd
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Allow OpenSSH to talk to containers without asking for confirmation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;cat &#x2F;etc&#x2F;ssh&#x2F;ssh_config | grep -v StrictHostKeyChecking &amp;gt; &#x2F;etc&#x2F;ssh&#x2F;ssh_config.new &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    StrictHostKeyChecking no&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &#x2F;etc&#x2F;ssh&#x2F;ssh_config.new &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    mv &#x2F;etc&#x2F;ssh&#x2F;ssh_config.new &#x2F;etc&#x2F;ssh&#x2F;ssh_config
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install Open MPI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;mkdir &#x2F;tmp&#x2F;openmpi &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    cd &#x2F;tmp&#x2F;openmpi &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    wget https:&#x2F;&#x2F;www.open-mpi.org&#x2F;software&#x2F;ompi&#x2F;v4.0&#x2F;downloads&#x2F;openmpi-4.0.5.tar.gz &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    tar zxf openmpi-4.0.5.tar.gz &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    cd openmpi-4.0.5 &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    .&#x2F;configure --enable-orterun-prefix-by-default &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    make -j $(nproc) all &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    make install &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    ldconfig
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fa-bu-jing-xiang&quot;&gt;发布镜像&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; divinerapier&#x2F;openmpi:4.0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt;=.&#x2F;dockerfile .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; push divinerapier&#x2F;openmpi:4.0.5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ying-yong-cheng-xu&quot;&gt;应用程序&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cheng-xu-dai-ma&quot;&gt;程序代码&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mpi.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 初始化 MPI 环境
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MPI_Init&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 通过调用以下方法来得到所有可以工作的进程数量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; world_size;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MPI_Comm_size&lt;&#x2F;span&gt;&lt;span&gt;(MPI_COMM_WORLD, &amp;amp;world_size);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 得到当前进程的秩
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; world_rank;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MPI_Comm_rank&lt;&#x2F;span&gt;&lt;span&gt;(MPI_COMM_WORLD, &amp;amp;world_rank);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 得到当前进程的名字
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; processor_name[MPI_MAX_PROCESSOR_NAME];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; name_len;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MPI_Get_processor_name&lt;&#x2F;span&gt;&lt;span&gt;(processor_name, &amp;amp;name_len);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 打印一条带有当前进程名字，秩以及
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 整个 communicator 的大小的 hello world 消息。
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello world from processor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, rank &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; out of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; processors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;           processor_name, world_rank, world_size);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 释放 MPI 的一些资源
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MPI_Finalize&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;makefile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-makefile &quot;&gt;&lt;code class=&quot;language-makefile&quot; data-lang=&quot;makefile&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MPICC &lt;&#x2F;span&gt;&lt;span&gt;?= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mpicc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main.c
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MPICC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-o&lt;&#x2F;span&gt;&lt;span&gt; mpi_hello_world main.c
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;clean&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rm -rf&lt;&#x2F;span&gt;&lt;span&gt; mpi_hello_world
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; divinerapier&#x2F;openmpi:4.0.5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F; &#x2F;helloworld
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;cd &#x2F;helloworld \
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;amp;&amp;amp; make
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;yun-xing-ying-yong-cheng-xu&quot;&gt;运行应用程序&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; divinerapier&#x2F;openmpi-helloworld:0.0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt;=.&#x2F;dockerfile .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --rm -it&lt;&#x2F;span&gt;&lt;span&gt; divinerapier&#x2F;openmpi-helloworld:0.0.1 mpirun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -allow-run-as-root -np&lt;&#x2F;span&gt;&lt;span&gt; 4 &#x2F;helloworld&#x2F;mpi_hello_world
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Hello world from processor fa74677bda6b, rank 0 out of 4 processors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Hello world from processor fa74677bda6b, rank 1 out of 4 processors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Hello world from processor fa74677bda6b, rank 2 out of 4 processors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Hello world from processor fa74677bda6b, rank 3 out of 4 processors
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>升级 Ubuntu 发行版</title>
		<published>2020-10-20T16:05:06+00:00</published>
		<updated>2020-10-20T16:05:06+00:00</updated>
		<link href="https://blog.kiyoko.io/upgrade-ubuntu-release/" type="text/html"/>
		<id>https://blog.kiyoko.io/upgrade-ubuntu-release/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Install all available updates for your release before upgrading.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt upgrade&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Reboot system.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; reboot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Install the Ubuntu update tool.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; update-manager-core
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Start the upgrade procdure.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; do-release-upgrade
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不建议升级过程通过 &lt;strong&gt;ssh&lt;&#x2F;strong&gt; 连接运行，可以运行在 &lt;strong&gt;tmux&lt;&#x2F;strong&gt; 会话中。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo do-release-upgrade
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Checking&lt;&#x2F;span&gt;&lt;span&gt; for a new Ubuntu release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get:1&lt;&#x2F;span&gt;&lt;span&gt; Upgrade tool signature &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1,554 B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get:2&lt;&#x2F;span&gt;&lt;span&gt; Upgrade tool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1,336 kB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fetched&lt;&#x2F;span&gt;&lt;span&gt; 1,338 kB in 0s (0 B&#x2F;s)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;authenticate &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;focal.tar.gz&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; against &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;focal.tar.gz.gpg&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extracting &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;focal.tar.gz&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Reading&lt;&#x2F;span&gt;&lt;span&gt; cache
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Checking&lt;&#x2F;span&gt;&lt;span&gt; package manager
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Continue&lt;&#x2F;span&gt;&lt;span&gt; running under SSH?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;This&lt;&#x2F;span&gt;&lt;span&gt; session appears to be running under ssh. It is not recommended
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt; perform a upgrade over ssh currently because in case of failure it
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt; harder to recover.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;If&lt;&#x2F;span&gt;&lt;span&gt; you continue, an additional ssh daemon will be started at port
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1022&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Do&lt;&#x2F;span&gt;&lt;span&gt; you want to continue?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Continue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;yN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Reboot the box.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; reboot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>使用 kubeadm 创建 kubernetes 集群</title>
		<published>2020-10-19T20:38:25+00:00</published>
		<updated>2020-10-19T20:38:25+00:00</updated>
		<link href="https://blog.kiyoko.io/using-kubeadm-to-create-a-kubernetes-cluster/" type="text/html"/>
		<id>https://blog.kiyoko.io/using-kubeadm-to-create-a-kubernetes-cluster/</id>
		<content type="html">&lt;p&gt;在 &lt;strong&gt;Ubuntu 20.04&lt;&#x2F;strong&gt; 系统上搭建 &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 集群。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-zhuang-docker&quot;&gt;安装 Docker&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get remove docker docker-engine docker.io containerd runc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;    apt-transport-https \
&lt;&#x2F;span&gt;&lt;span&gt;    ca-certificates \
&lt;&#x2F;span&gt;&lt;span&gt;    curl \
&lt;&#x2F;span&gt;&lt;span&gt;    gnupg-agent \
&lt;&#x2F;span&gt;&lt;span&gt;    software-properties-common
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -fsSL&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-key add -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-key fingerprint 0EBFCD88
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; add-apt-repository \
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deb [arch=amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lsb_release -cs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;   stable&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --fix-missing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; docker-ce docker-ce-cli containerd.io
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;docker&#x2F;daemon.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;quot;exec-opts&amp;quot;: [&amp;quot;native.cgroupdriver=systemd&amp;quot;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;quot;log-driver&amp;quot;: &amp;quot;json-file&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;quot;log-opts&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &amp;quot;max-size&amp;quot;: &amp;quot;100m&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;quot;storage-driver&amp;quot;: &amp;quot;overlay2&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart docker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable docker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;xia-zai-kubernetes-xiang-guan-cheng-xu&quot;&gt;下载 Kubernetes 相关程序&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get update &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; apt-transport-https curl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -s&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;packages.cloud.google.com&#x2F;apt&#x2F;doc&#x2F;apt-key.gpg | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-key add -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F; kubernetes-xenial main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --fix-missing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; kubelet kubeadm kubectl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-mark hold kubelet kubeadm kubectl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;pei-zhi-qiao-jie-wang-luo-fang-huo-qiang&quot;&gt;配置桥接网络防火墙&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;net.bridge.bridge-nf-call-ip6tables = 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;net.bridge.bridge-nf-call-iptables = 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; sysctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --system
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;guan-bi-swap&quot;&gt;关闭 swap&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 临时关闭
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;swapoff -a
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 永久关闭，注释 swap 配置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vi&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;fstab
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;guan-bi-fang-huo-qiang&quot;&gt;关闭防火墙&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl stop firewalld
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl disable firewalld
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;guan-bi-selinux&quot;&gt;关闭 selinux&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; sed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -i &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s&#x2F;enforcing&#x2F;disabled&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &#x2F;etc&#x2F;selinux&#x2F;config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; setenforce 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;la-qu-gcr-jing-xiang&quot;&gt;拉取 gcr 镜像&lt;&#x2F;h2&gt;
&lt;p&gt;需要在所有的 &lt;strong&gt;Master&lt;&#x2F;strong&gt; 节点与 &lt;strong&gt;Worker&lt;&#x2F;strong&gt; 节点拉取镜像。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;bash&lt;&#x2F;strong&gt; 环境使用如下脚本:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_list&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubeadm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; config images list)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; image &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_list&lt;&#x2F;span&gt;&lt;span&gt;} ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cut -d&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; pull registry.aliyuncs.com&#x2F;google_containers&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; image tag registry.aliyuncs.com&#x2F;google_containers&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt; k8s.gcr.io&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; image rm registry.aliyuncs.com&#x2F;google_containers&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;zsh&lt;&#x2F;strong&gt; 环境使用如下脚本:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zsh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zsh &quot;&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_list&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubeadm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; config images list)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;images&lt;&#x2F;span&gt;&lt;span&gt;=(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_list&lt;&#x2F;span&gt;&lt;span&gt;} | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tr &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39; &amp;#39;`)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; image &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;images&lt;&#x2F;span&gt;&lt;span&gt;} ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cut -d&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; pull registry.aliyuncs.com&#x2F;google_containers&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; image tag registry.aliyuncs.com&#x2F;google_containers&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt; k8s.gcr.io&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; image rm registry.aliyuncs.com&#x2F;google_containers&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;chu-shi-hua-master-jie-dian&quot;&gt;初始化 Master 节点&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;strong&gt;Master&lt;&#x2F;strong&gt; 节点执行命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; kubeadm init \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --apiserver-advertise-address &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname -i&lt;&#x2F;span&gt;&lt;span&gt;) \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --pod-network-cidr&lt;&#x2F;span&gt;&lt;span&gt; 10.244.0.0&#x2F;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --v&lt;&#x2F;span&gt;&lt;span&gt;=5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Your&lt;&#x2F;span&gt;&lt;span&gt; Kubernetes control-plane has initialized successfully!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt; start using your cluster, you need to run the following as a regular user:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chown $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -u&lt;&#x2F;span&gt;&lt;span&gt;):$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -g&lt;&#x2F;span&gt;&lt;span&gt;) $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;You&lt;&#x2F;span&gt;&lt;span&gt; should now deploy a pod network to the cluster.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Run &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubectl apply -f [podnetwork].yaml&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; with one of the options listed at:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Then&lt;&#x2F;span&gt;&lt;span&gt; you can join any number of worker nodes by running the following on each as root:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubeadm&lt;&#x2F;span&gt;&lt;span&gt; join 192.168.50.5:6443&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --token&lt;&#x2F;span&gt;&lt;span&gt; 7zjyq9.x3xkoatt6pb1cbsu \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --discovery-token-ca-cert-hash&lt;&#x2F;span&gt;&lt;span&gt; sha256:1c78c44bc57e6e887c5f81e7a9c6c3e52f098e1ba9255f5303ac78129d410774
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者省略下载镜像步骤，直接创建集群:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; kubeadm init \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --apiserver-advertise-address&lt;&#x2F;span&gt;&lt;span&gt;=$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname -i&lt;&#x2F;span&gt;&lt;span&gt;) \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --image-repository&lt;&#x2F;span&gt;&lt;span&gt; registry.aliyuncs.com&#x2F;google_containers \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --service-cidr&lt;&#x2F;span&gt;&lt;span&gt;=10.5.0.0&#x2F;16 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --pod-network-cidr&lt;&#x2F;span&gt;&lt;span&gt;=10.244.0.0&#x2F;16
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后配置 &lt;strong&gt;kubeconfig&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chown $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -u&lt;&#x2F;span&gt;&lt;span&gt;):$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -g&lt;&#x2F;span&gt;&lt;span&gt;) $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;pei-zhi-wang-luo&quot;&gt;配置网络&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;calico&quot;&gt;Calico&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;manifests&#x2F;canal.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;tian-jia-worker-jie-dian&quot;&gt;添加 Worker 节点&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;strong&gt;Worker&lt;&#x2F;strong&gt; 节点执行命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; kubeadm join 192.168.50.5:6443&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --token&lt;&#x2F;span&gt;&lt;span&gt; 4n2pwp.hq9jyo3auaibma3q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;     --discovery-token-ca-cert-hash&lt;&#x2F;span&gt;&lt;span&gt; sha256:750da2c87a67b96bfec73ade40888d22b61e045fdd28bbb7a4ff2c6ce3e0309c
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;This&lt;&#x2F;span&gt;&lt;span&gt; node has joined the cluster:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; Certificate signing request was sent to apiserver and a response was received.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; The Kubelet was informed of the new secure connection details.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Run &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubectl get nodes&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; on the control-plane to see this node join the cluster.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ce-shi-ji-qun&quot;&gt;测试集群&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kubernetes&#x2F;website&#x2F;master&#x2F;content&#x2F;en&#x2F;examples&#x2F;application&#x2F;nginx-app.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;qing-li-ji-qun&quot;&gt;清理集群&lt;&#x2F;h2&gt;
&lt;p&gt;在期望清理的节点执行:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; kubeadm reset
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; rm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -rf&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;cni&#x2F;net.d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rm -rf ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;install&#x2F;ubuntu&#x2F;&quot;&gt;Install Docker Engine on Ubuntu&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;production-environment&#x2F;container-runtimes&#x2F;&quot;&gt;Container runtimes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;production-environment&#x2F;tools&#x2F;kubeadm&#x2F;install-kubeadm&#x2F;&quot;&gt;Installing kubeadm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;production-environment&#x2F;tools&#x2F;kubeadm&#x2F;create-cluster-kubeadm&#x2F;&quot;&gt;Creating a cluster with kubeadm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudnativelabs&#x2F;kube-router&#x2F;blob&#x2F;master&#x2F;docs&#x2F;kubeadm.md&quot;&gt;Deploying kube-router with kubeadm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;getting-started&#x2F;kubernetes&#x2F;flannel&#x2F;flannel&quot;&gt;Install Calico for policy and flannel (aka Canal) for networking&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Ubuntu 20.04 配置静态网络</title>
		<published>2020-10-19T18:55:44+00:00</published>
		<updated>2020-10-19T18:55:44+00:00</updated>
		<link href="https://blog.kiyoko.io/configure-networks-on-ubuntu-20-04/" type="text/html"/>
		<id>https://blog.kiyoko.io/configure-networks-on-ubuntu-20-04/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Ubuntu 20.04&lt;&#x2F;strong&gt; 的网络配置文件位于 &lt;strong&gt;&#x2F;etc&#x2F;netplan&#x2F;00-installer-config.yaml&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This is the network config written by &amp;#39;subiquity&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;network&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ethernets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ens33&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dhcp4&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addresses&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;192.168.50.30&#x2F;24&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gateway4&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;192.168.50.1
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nameservers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addresses&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;192.168.50.1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8.8.8.8&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;更新配置:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root@ubuntu-00:~#&lt;&#x2F;span&gt;&lt;span&gt; netplan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --debug&lt;&#x2F;span&gt;&lt;span&gt; apply
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt; (generate:3768)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; DEBUG: 11:49:11.734: Processing input file &#x2F;etc&#x2F;netplan&#x2F;00-installer-config.yaml..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt; (generate:3768)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; DEBUG: 11:49:11.734: starting new processing pass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt; (generate:3768)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; DEBUG: 11:49:11.735: We have some netdefs, pass them through a final round of validation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt; (generate:3768)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; DEBUG: 11:49:11.735: ens33: setting default backend to 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt; (generate:3768)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; DEBUG: 11:49:11.735: Configuration is valid
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt; (generate:3768)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; DEBUG: 11:49:11.736: Generating output files..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt; (generate:3768)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; DEBUG: 11:49:11.736: NetworkManager: definition ens33 is not for us (backend 1)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate:3768&lt;&#x2F;span&gt;&lt;span&gt;): GLib-DEBUG: 11:49:11.736: posix_spawn avoided (fd close requested)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DEBUG:netplan&lt;&#x2F;span&gt;&lt;span&gt; generated networkd configuration changed, restarting networkd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title></title>
		<published>2020-10-18T21:02:27+00:00</published>
		<updated>2020-10-18T21:02:27+00:00</updated>
		<link href="https://blog.kiyoko.io/command-configure-not-found-in-docker/" type="text/html"/>
		<id>https://blog.kiyoko.io/command-configure-not-found-in-docker/</id>
		<content type="html">&lt;p&gt;通过进入基于 &lt;code&gt;ubuntu:20.04&lt;&#x2F;code&gt; 镜像运行的容器中安装 &lt;strong&gt;openmpi&lt;&#x2F;strong&gt; 的一系列指令得到了如下 &lt;strong&gt;dockerfile&lt;&#x2F;strong&gt; 片段:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span&gt;RUN wget https:&#x2F;&#x2F;download.open-mpi.org&#x2F;release&#x2F;open-mpi&#x2F;v4.0&#x2F;openmpi-4.0.5.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;RUN tar xzf openmpi-4.0.5.tar.gz -C &#x2F;tmp
&lt;&#x2F;span&gt;&lt;span&gt;RUN cd &#x2F;tmp&#x2F;openmpi-4.0.5
&lt;&#x2F;span&gt;&lt;span&gt;RUN .&#x2F;configure --with-threads=posix --enable-mpi-thread-multiple
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以上命令可以在容器中逐条执行，但却在构建镜像时失败:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;bin&#x2F;sh:&lt;&#x2F;span&gt;&lt;span&gt; 1: .&#x2F;configure: not found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;提示 &lt;strong&gt;configure&lt;&#x2F;strong&gt; 不存在。&lt;&#x2F;p&gt;
&lt;p&gt;修复办法是将 &lt;strong&gt;configure&lt;&#x2F;strong&gt; 命令与前一条命令合并:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span&gt;RUN wget https:&#x2F;&#x2F;download.open-mpi.org&#x2F;release&#x2F;open-mpi&#x2F;v4.0&#x2F;openmpi-4.0.5.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;RUN tar xzf openmpi-4.0.5.tar.gz -C &#x2F;tmp
&lt;&#x2F;span&gt;&lt;span&gt;RUN cd &#x2F;tmp&#x2F;openmpi-4.0.5 \
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;amp;&amp;amp; .&#x2F;configure --with-threads=posix --enable-mpi-thread-multiple \
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;amp;&amp;amp; make -j \
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;amp;&amp;amp; make -j install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;推测原因: &lt;strong&gt;docker&lt;&#x2F;strong&gt; 镜像的每一层基于不同的 &lt;strong&gt;workdir&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>GPU 101 - Architecture</title>
		<published>2020-10-15T19:50:58+00:00</published>
		<updated>2020-10-15T19:50:58+00:00</updated>
		<link href="https://blog.kiyoko.io/gpu-101-architecture/" type="text/html"/>
		<id>https://blog.kiyoko.io/gpu-101-architecture/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;图形处理器单元(GPU)&lt;&#x2F;strong&gt; 主要是指运行高度图形化应用时使用的硬件设备，比如 &lt;strong&gt;3D建模软件&lt;&#x2F;strong&gt; 或 &lt;strong&gt;VDI基础设施&lt;&#x2F;strong&gt;。在消费市场上，GPU多用于加速游戏图形。如今，GPGPU(General Purpose GPU) 是现代高性能计算 (HPC) 场景中加速计算的普遍硬件选择。&lt;&#x2F;p&gt;
&lt;p&gt;会用到 GPU 的领域除了我们熟悉的 HPC，比如会用到图像识别的机器学习方向，也常用在医疗、保险和金融行业相关的垂直领域中使用的 &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;tabular-data-model&#x2F;&quot;&gt;表格数据 (Tabular Data)&lt;&#x2F;a&gt; 的计算。&lt;&#x2F;p&gt;
&lt;p&gt;因此，就引出一个问题: 为什么需要使用 GPU 而不是 CPU?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yan-chi-yu-tun-tu-liang&quot;&gt;延迟与吞吐量&lt;&#x2F;h2&gt;
&lt;p&gt;首先，来看看 CPU 和 GPU 的主要区别。&lt;&#x2F;p&gt;
&lt;p&gt;CPU 对速度与延迟方面进行了优化，在保持操作之间快速切换的能力的前提下，以尽可能低的延迟完成任务。它的本质就是以序列化的方式处理任务。&lt;&#x2F;p&gt;
&lt;p&gt;GPU 对吞吐量方面进行了优化，它允许一次推尽可能多的任务到内部，并通过并行方式处理每个任务。&lt;&#x2F;p&gt;
&lt;p&gt;下面的示例图显示了 CPU 和 GPU &lt;strong&gt;核心&lt;&#x2F;strong&gt; 的数量。显而易见地，GPU 具有更多的核心来处理一个任务。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;GPU-101-Architecture&#x2F;01-cpu-vs-gpu-cores.png&quot; alt=&quot;cpu-vs-gpu-cores&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yi-tong-dian&quot;&gt;异同点&lt;&#x2F;h2&gt;
&lt;p&gt;然而，这不仅仅是核心数量的问题。而当我们说到NVIDIA GPU中的核心时，我们指的是由ALU（算术逻辑单元）组成的CUDA核心。不同厂商的术语可能会有所不同。&lt;&#x2F;p&gt;
&lt;p&gt;从CPU和GPU的整体架构来看，我们可以看到两者之间有很多相似之处。两者都使用了缓存层、内存控制器和全局内存的内存构造。对现代CPU架构的高层概述表明，它都是通过使用重要的缓存内存层来实现低延迟的内存访问。让我们先看一张图，它显示了一个通用的、以内存为中心的现代CPU封装（注意：精确的布局强烈地取决于供应商&#x2F;型号）。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;GPU-101-Architecture&#x2F;02-cpu-hl-architecture.png&quot; alt=&quot;cpu-hl-architecture&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一个CPU包由核心组成，包含独立的数据层和指令层-1缓存，由层-2缓存支持。第3层高速缓存，也就是最后一层高速缓存，由多个核心共享。如果数据没有驻留在缓存层中，它将从全局DDR-4内存中获取数据。每个CPU的核心数量可以达到28个或32个，根据品牌和型号的不同，在Turbo模式下可以运行到2.5GHz或3.8GHz。缓存大小范围为每个核心最高2MB二级缓存。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tan-suo-gpujia-gou&quot;&gt;探索GPU架构&lt;&#x2F;h2&gt;
&lt;p&gt;如果我们检查GPU的高层架构概述（同样，强烈依赖make&#x2F;model），看起来GPU的本质就是把可用的核心投入工作，它不太注重低延迟的缓存内存访问。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;GPU-101-Architecture&#x2F;03-gpu-architecture.png&quot; alt=&quot;gpu-architecture&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;单个GPU设备由多个处理器集群（PC）组成，其中包含多个流式多处理器（SM）。每个SM容纳一个第1层指令缓存层与其相关的核心。通常情况下，一个SM在从全局GDDR-5内存中提取数据之前，会使用一个专用的第1层缓存和一个共享的第2层缓存。其架构对内存延迟的容忍度很高。&lt;&#x2F;p&gt;
&lt;p&gt;与CPU相比，GPU工作的内存缓存层数较少，而且相对较小。原因是GPU有更多的晶体管用于计算，这意味着它不太在乎从内存中检索数据所需的时间。只要GPU手头有足够的计算量，潜在的内存访问 &amp;quot;延迟 &amp;quot;就会被掩盖，使其保持忙碌。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A GPU is optimized for data parallel throughput computations.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;从核心数量来看，它很快就能让你看到它在并行方面的可能性。 当检查当前NVIDIA的旗舰产品Tesla V100时，一台设备包含80个SM，每个SM包含64个核心，总共有5120个核心！任务不是安排给单个核心，而是安排给处理器集群和SM。任务不是安排给单个核心，而是安排给处理器集群和SM。这就是它能够并行处理的原因。现在把这个强大的硬件设备和编程框架结合起来，应用就可以充分发挥GPU的计算能力。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nielshagoort.com&#x2F;2019&#x2F;03&#x2F;12&#x2F;exploring-the-gpu-architecture&#x2F;&quot;&gt;Exploring the GPU Architecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>WSL2 中无法连接 Docker 服务</title>
		<published>2020-10-15T17:21:20+00:00</published>
		<updated>2020-10-15T17:21:20+00:00</updated>
		<link href="https://blog.kiyoko.io/cannot-connect-to-docker-daemon-on-wsl2/" type="text/html"/>
		<id>https://blog.kiyoko.io/cannot-connect-to-docker-daemon-on-wsl2/</id>
		<content type="html">&lt;p&gt;在 &lt;strong&gt;WSL2&lt;&#x2F;strong&gt; 环境中使用 &lt;strong&gt;Docker&lt;&#x2F;strong&gt; 遇到错误:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker ps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cannot&lt;&#x2F;span&gt;&lt;span&gt; connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以通过如下操作解决:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;strong&gt;App and features&lt;&#x2F;strong&gt; 中卸载 &lt;strong&gt;Docker&lt;&#x2F;strong&gt; 程序&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;删除如下目录&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;C:\Program Files\Docker
&lt;&#x2F;span&gt;&lt;span&gt;C:\ProgramData\DockerDesktop
&lt;&#x2F;span&gt;&lt;span&gt;C:\Users\[USERNAME]\.docker
&lt;&#x2F;span&gt;&lt;span&gt;C:\Users\[USERNAME]\AppData\Local\Docker
&lt;&#x2F;span&gt;&lt;span&gt;C:\Users\[USERNAME]\AppData\Roaming\Docker
&lt;&#x2F;span&gt;&lt;span&gt;C:\Users\[USERNAME]\AppData\Roaming\Docker Desktop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;下载最 &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;docker-for-windows&#x2F;edge-release-notes&#x2F;&quot;&gt;新版本 &lt;strong&gt;Docker&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;启动 &lt;strong&gt;Docker&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;到此为止，问题应该已经被解决了(至少我解决了)。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;codesthq.com&#x2F;painless-way-to-wsl-2-with-docker&#x2F;&quot;&gt;Painless way to WSL 2 with Docker&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>初识 MPI</title>
		<published>2020-10-11T12:10:37+00:00</published>
		<updated>2020-10-11T12:10:37+00:00</updated>
		<link href="https://blog.kiyoko.io/started-with-mpi/" type="text/html"/>
		<id>https://blog.kiyoko.io/started-with-mpi/</id>
		<content type="html">&lt;h2 id=&quot;xiao-xi-chuan-di-mo-xing&quot;&gt;消息传递模型&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;消息传递模型(Message Passing Model)&lt;&#x2F;strong&gt; 指程序通过在进程间传递消息（消息可以理解成带有一些信息和数据的一个数据结构）来完成某些任务。在实践中，基于此模型，很容易开发 &lt;strong&gt;并发程序&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;举例来说:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;主进程(manager process) 可以通过向从进程(worker process) 发送一个描述工作的消息的方式，将工作分配给从进程。&lt;&#x2F;li&gt;
&lt;li&gt;一个并发的排序程序可以在当前进程中对当前进程可见的(我们称作本地的，locally) 数据进行排序，然后把排好序的数据发送到邻居进程上面来进行合并的操作。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;几乎所有的并行程序可以使用消息传递模型来描述。&lt;&#x2F;p&gt;
&lt;p&gt;之后，业界统一制定了一套消息传递模型的接口标准，即 &lt;strong&gt;Message Passing Interface —— MPI&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mpi-ji-chu-gai-nian&quot;&gt;MPI 基础概念&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;communicator&quot;&gt;Communicator&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;通讯器(communicator)&lt;&#x2F;strong&gt; 定义了一组能够互相发消息的进程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rank&quot;&gt;Rank&lt;&#x2F;h3&gt;
&lt;p&gt;在 &lt;strong&gt;通讯器(communicator)&lt;&#x2F;strong&gt; 中，每个进程会被分配一个序号，称作 &lt;strong&gt;秩(rank)&lt;&#x2F;strong&gt;，进程间显性地通过指定 &lt;strong&gt;rank&lt;&#x2F;strong&gt; 来进行通信。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tag&quot;&gt;Tag&lt;&#x2F;h3&gt;
&lt;p&gt;不同进程之间发送、接收操作是通信的基础。&lt;&#x2F;p&gt;
&lt;p&gt;作为发送者时，进程可以通过指定另一个进程的 &lt;strong&gt;rank&lt;&#x2F;strong&gt; 和一个独一无二的 &lt;strong&gt;消息标签(tag)&lt;&#x2F;strong&gt; 来发送消息给另一个进程。&lt;&#x2F;p&gt;
&lt;p&gt;作为接受者时，进程可以发送一个 &lt;strong&gt;接收特定标签标记的消息的请求 (或者忽略标签，接收任何消息)&lt;&#x2F;strong&gt;，然后依次处理接收到的数据。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;point-to-point-communications&quot;&gt;Point-to-Point Communications&lt;&#x2F;h3&gt;
&lt;p&gt;一个发送者，一个接受者的通信被称作 &lt;strong&gt;点对点(point-to-point) 通信&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;collective-communications&quot;&gt;Collective Communications&lt;&#x2F;h3&gt;
&lt;p&gt;在很多情况下，某个进程可能需要跟所有其他进程通信。比如主进程想发一个广播给所有的从进程。在这种情况下，如果通过写代码的方式来完成所有的发送和接收过程会很麻烦。并且，事实上，这种方式往往也不会以最佳方式使用网络。MPI 可以处理各种各样的这些涉及所有进程的 &lt;strong&gt;集体(Collective)通信&lt;&#x2F;strong&gt; 类型。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-yong-mpi&quot;&gt;使用 MPI&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;MPI&lt;&#x2F;strong&gt; 只是一套接口标准，无法直接使用。对此不必担心，业内已经存在很多符合标准的实现。其中 &lt;strong&gt;OpenMPI&lt;&#x2F;strong&gt; 就是最受欢迎的实现之一。因此，之后的内容基于 &lt;strong&gt;OpenMPI&lt;&#x2F;strong&gt; 展开。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-zhuang-openmpi&quot;&gt;安装 OpenMPI&lt;&#x2F;h3&gt;
&lt;p&gt;从 &lt;a href=&quot;https:&#x2F;&#x2F;www.open-mpi.org&#x2F;software&#x2F;ompi&#x2F;v4.0&#x2F;&quot;&gt;这里&lt;&#x2F;a&gt; 可以找到最新的版本，本文基于版本 &lt;a href=&quot;https:&#x2F;&#x2F;download.open-mpi.org&#x2F;release&#x2F;open-mpi&#x2F;v4.0&#x2F;openmpi-4.0.5.tar.gz&quot;&gt;4.0.5&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# download package
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; wget https:&#x2F;&#x2F;download.open-mpi.org&#x2F;release&#x2F;open-mpi&#x2F;v4.0&#x2F;openmpi-4.0.5.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# extract files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tar xzf openmpi-4.0.5.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd openmpi-4.0.5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# configure project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; build; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;configure --prefix&lt;&#x2F;span&gt;&lt;span&gt;=$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;build
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; make&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -j&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make -j&lt;&#x2F;span&gt;&lt;span&gt; install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mpitutorial.com&#x2F;tutorials&#x2F;mpi-introduction&#x2F;&quot;&gt;MPI Tutorial Introduction&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.open-mpi.org&#x2F;faq&#x2F;&quot;&gt;OpenMPI FAQ&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mpi-forum.org&#x2F;&quot;&gt;MPI Forum&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.citutor.org&#x2F;&#x2F;browse.php&quot;&gt;The &amp;quot;Introduction to MPI&amp;quot; and &amp;quot;Intermediate MPI&amp;quot; tutorials&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hpc.mediawiki.hull.ac.uk&#x2F;Applications&#x2F;OpenMPI&quot;&gt;UNIVERSITY OF HULL HPC: OpenMPI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>训练系统相关读物</title>
		<published>2020-10-11T11:44:32+00:00</published>
		<updated>2020-10-11T11:44:32+00:00</updated>
		<link href="https://blog.kiyoko.io/readings-about-training-system/" type="text/html"/>
		<id>https://blog.kiyoko.io/readings-about-training-system/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;images.nvidia.com&#x2F;events&#x2F;sc15&#x2F;pdfs&#x2F;NCCL-Woolley.pdf&quot;&gt;NCCL: ACCELERATED MULTI-GPU COLLECTIVE COMMUNICATIONS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;download?doi=10.1.1.95.2490&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;Message Passing, Remote Procedure Calls and Distributed Shared Memory as Communication Paradigms for Distributed Systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;50116885&quot;&gt;分布式训练的方案和效率对比&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gaocegege.com&#x2F;Blog&#x2F;mpi-1&quot;&gt;MPI，OpenMPI 与深度学习&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mpitutorial.com&#x2F;tutorials&#x2F;mpi-introduction&#x2F;zh_cn&#x2F;&quot;&gt;MPI 教程介绍&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mpi-forum.org&#x2F;&quot;&gt;MPI Forum&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;149771261&quot;&gt;2020 Rethinking GPU 集群上的分布式训练&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;40578792&quot;&gt;Horovod-基于TensorFlow分布式深度学习框架&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;horovod&#x2F;horovod&quot;&gt;Github: Horovod&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;manage-gpus&#x2F;scheduling-gpus&#x2F;&quot;&gt;Schedule GPUs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;extend-kubernetes&#x2F;compute-storage-net&#x2F;device-plugins&#x2F;&quot;&gt;Device Plugins&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;towardsdatascience.com&#x2F;distributed-deep-learning-training-with-horovod-on-kubernetes-6b28ac1d6b5d&quot;&gt;Distributed Deep Learning Training with Horovod on Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.nvidia.com&#x2F;kubernetes-gpu&quot;&gt;Kubernetes on NVIDIA GPUs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes 存储卷</title>
		<published>2020-10-07T17:37:14+00:00</published>
		<updated>2020-10-07T17:37:14+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-volumes/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-volumes/</id>
		<content type="html">&lt;h2 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;strong&gt;Docker&lt;&#x2F;strong&gt; 中，&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;storage&#x2F;&quot;&gt;Volume&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 概念表示磁盘上或者另外一个容器内的一个目录。 直到最近，Docker 才支持对基于本地磁盘的 Volume 的生存期进行管理。 虽然 Docker 现在也能提供 Volume 驱动程序，但是目前功能还非常有限 （例如，截至 Docker 1.7，每个容器只允许有一个 Volume 驱动程序，并且无法将参数传递给 Volume）。&lt;&#x2F;p&gt;
&lt;p&gt;而在 &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 中，&lt;strong&gt;Volume&lt;&#x2F;strong&gt; 具有明确的生命周期——与其所属 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 相同。 因此，&lt;strong&gt;Volume 比 Pod 中运行的任何容器的存活期都长&lt;&#x2F;strong&gt;，在容器重新启动时数据也会得到保留。 当然，&lt;strong&gt;当一个 Pod 不再存在时，卷也将不再存在&lt;&#x2F;strong&gt;。 更重要的是，&lt;strong&gt;Kubernetes 可以支持许多类型的卷，Pod 也能同时使用任意数量的卷&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Volume&lt;&#x2F;strong&gt; 的核心是包含一些数据的目录，Pod 中的容器可以访问该目录。 特定的卷类型可以决定这个目录是如何形成的，并能决定它支持何种介质，以及目录中存放什么内容。&lt;&#x2F;p&gt;
&lt;p&gt;使用 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 时, Pod 声明中需要提供卷的类型 (&lt;strong&gt;.spec.volumes&lt;&#x2F;strong&gt; 字段) 和 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 挂载的位置 (&lt;strong&gt;.spec.containers.volumeMounts&lt;&#x2F;strong&gt; 字段).&lt;&#x2F;p&gt;
&lt;p&gt;容器中的进程能看到由它们的 Docker 镜像和卷组成的文件系统视图。 &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;userguide&#x2F;dockerimages&#x2F;&quot;&gt;Docker 镜像&lt;&#x2F;a&gt; 位于文件系统层次结构的根部，并且任何 Volume 都挂载在镜像内的指定路径上。 卷不能挂载到其他卷，也不能与其他卷有硬链接。 Pod 中的每个容器必须独立地指定每个卷的挂载位置(&lt;strong&gt;Volumes&lt;&#x2F;strong&gt; 之间的挂载点应该相互独立)。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;volume-de-lei-xing&quot;&gt;Volume 的类型&lt;&#x2F;h2&gt;
&lt;p&gt;Kubernetes 支持下列类型的卷:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#Cephfs&quot;&gt;cephfs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#ConfigMap&quot;&gt;configMap&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#CSI&quot;&gt;csi&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#DownwardAPI&quot;&gt;downwardAPI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#EmptyDir&quot;&gt;emptyDir&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#HostPath&quot;&gt;hostPath&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#Local&quot;&gt;local&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#Nfs&quot;&gt;nfs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#PersistentVolumeClaim&quot;&gt;persistentVolumeClaim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#Projected&quot;&gt;projected&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#Secret&quot;&gt;secret&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;cephfs&quot;&gt;Cephfs&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;cephfs&lt;&#x2F;strong&gt; 允许用户将现存的 &lt;strong&gt;CephFS&lt;&#x2F;strong&gt; 卷挂载到 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 中。 与 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#EmptyDir&quot;&gt;emptyDir&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 不同的是，&lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 会在删除 Pod 的同时&lt;strong&gt;一并被删除&lt;&#x2F;strong&gt;，&lt;strong&gt;cephfs&lt;&#x2F;strong&gt; 卷的内容在删除 Pod 时会被保留，卷只是被卸载掉了。 这意味着 &lt;strong&gt;CephFS 卷可以被预先填充数据，并且这些数据可以在 Pod 之间&amp;quot;传递&amp;quot;&lt;&#x2F;strong&gt;。CephFS 卷可同时被多个写者挂载。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： 在您使用 Ceph 卷之前，您的 Ceph 服务器必须正常运行并且要使用的 share 被导出（exported）。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;更多信息请参考 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;examples&#x2F;tree&#x2F;master&#x2F;volumes&#x2F;cephfs&#x2F;&quot;&gt;CephFS 示例&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;configmap&quot;&gt;ConfigMap&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;configMap&lt;&#x2F;strong&gt; 资源提供了向 Pod &lt;strong&gt;注入配置数据&lt;&#x2F;strong&gt;的方法。 ConfigMap 对象中存储的数据可以被 configMap 类型的卷引用，然后被应用到 Pod 中运行的容器化应用。&lt;&#x2F;p&gt;
&lt;p&gt;当引用 configMap 对象时，你可以简单的在 Volume 中通过它名称来引用。 还可以自定义 ConfigMap 中特定条目所要使用的路径。 例如，要将名为 log-config 的 ConfigMap 挂载到名为 configmap-pod 的 Pod 中，您可以使用下面的 YAML:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;configmap-pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;busybox
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;config-vol
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;etc&#x2F;config
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;config-vol
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configMap&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log-config
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log_level
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log_level
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;csi&quot;&gt;CSI&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md&quot;&gt;容器存储接口 (CSI)&lt;&#x2F;a&gt; 为容器编排系统（如 Kubernetes）定义标准接口，以将任意存储系统暴露给它们的容器工作负载。&lt;&#x2F;p&gt;
&lt;p&gt;更多详情请阅读 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;community&#x2F;blob&#x2F;master&#x2F;contributors&#x2F;design-proposals&#x2F;storage&#x2F;container-storage-interface.md&quot;&gt;CSI 设计方案&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;CSI 的支持在 Kubernetes v1.9 中作为 alpha 特性引入，在 Kubernetes v1.10 中转为 beta 特性，并在 Kubernetes v1.13 正式 GA。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明:&lt;&#x2F;strong&gt; CSI驱动程序可能并非在所有Kubernetes版本中都兼容。 请查看特定CSI驱动程序的文档，以获取每个 Kubernetes 版本所支持的部署步骤以及兼容性列表。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;一旦在 &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 集群上部署了 CSI 兼容卷驱动程序，用户就可以使用 &lt;strong&gt;csi&lt;&#x2F;strong&gt; 作为卷类型来关联、挂载 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 暴露出来的卷。&lt;&#x2F;p&gt;
&lt;p&gt;允许如下三种方式，在 Pod 中使用 &lt;strong&gt;csi&lt;&#x2F;strong&gt; 类型的卷:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;strong&gt;PersistentVolumeClaim&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;通过 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;ephemeral-volumes&#x2F;#generic-ephemeral-volumes&quot;&gt;Generic ephemeral volumes&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;通过 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;ephemeral-volumes&#x2F;#csi-ephemeral-volumes&quot;&gt;CSI ephemeral volumes&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;存储管理员可以使用以下字段来配置 CSI 持久卷(CSI persistent volume):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;driver&lt;&#x2F;strong&gt;：指定要使用的卷 驱动程序(CSI Driver) 名称的字符串值。 这个值必须与 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 的 &lt;strong&gt;&lt;a href=&quot;(https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#getplugininfo)&quot;&gt;GetPluginInfoResponse&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 的 &lt;strong&gt;name&lt;&#x2F;strong&gt; 字段相同。 &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 使用所给的值来标识要调用的 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt;；&lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 也使用该值来&lt;strong&gt;辨识哪些 PV 对象属于该 CSI Driver&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;volumeHandle&lt;&#x2F;strong&gt;：唯一标识卷的字符串值。 该值必须与 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 的 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#createvolume&quot;&gt;CreateVolumeResponse&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 的 &lt;strong&gt;volume.id&lt;&#x2F;strong&gt; 字段相同。 在所有对 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 的调用中，引用该 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 时都使用此值作为 &lt;strong&gt;volume_id&lt;&#x2F;strong&gt; 参数。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;readOnly&lt;&#x2F;strong&gt;：一个可选的布尔值，指示通过 &lt;strong&gt;ControllerPublished&lt;&#x2F;strong&gt; 关联该卷时是否设置该卷为只读。 &lt;strong&gt;默认值是 false&lt;&#x2F;strong&gt;。 该值通过 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#controllerpublishvolume&quot;&gt;ControllerPublishVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 中的 &lt;strong&gt;readonly&lt;&#x2F;strong&gt; 字段传递给 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;fsType&lt;&#x2F;strong&gt;：如果 &lt;strong&gt;PV&lt;&#x2F;strong&gt; 的 &lt;strong&gt;VolumeMode&lt;&#x2F;strong&gt; 为 &lt;strong&gt;Filesystem&lt;&#x2F;strong&gt;，则该字段指定挂载卷时应该使用的文件系统。 倘若 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 尚未完成格式化，且支持格式化，则该值将被用于格式化。 可以通过 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#controllerpublishvolume&quot;&gt;ControllerPublishVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;、&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#nodestagevolume&quot;&gt;NodeStageVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 和 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#nodepublishvolume&quot;&gt;NodePublishVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 的 &lt;strong&gt;volume_capability&lt;&#x2F;strong&gt; 字段将该值传递给 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;volumeAttributes&lt;&#x2F;strong&gt;：一个 &lt;strong&gt;map[string]string&lt;&#x2F;strong&gt; 类型的映射表，用来设置 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 的静态属性。 该映射表必须与 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 返回的 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#createvolume&quot;&gt;CreateVolumeResponse&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 中的 volume.attributes 字段的映射相对应。 该映射表通过 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#controllerpublishvolume&quot;&gt;ControllerPublishVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;、&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#nodestagevolume&quot;&gt;NodeStageVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;、和 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#nodepublishvolume&quot;&gt;NodePublishVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 中的 &lt;strong&gt;volume_attributes&lt;&#x2F;strong&gt; 字段传递给 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;&#x2F;strong&gt;: 在 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md&quot;&gt;spec&lt;&#x2F;a&gt; 中只看到了 &lt;strong&gt;volume_context&lt;&#x2F;strong&gt;，并没有 &lt;strong&gt;attributes&lt;&#x2F;strong&gt;，根据注释与数据类型来分析，或许是指这个字段？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;controllerPublishSecretRef&lt;&#x2F;strong&gt;：对包含敏感信息的 secret 对象的引用；该敏感信息会被传递给 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 来完成 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#controllerpublishvolume&quot;&gt;ControllerPublishVolume&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 和 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#controllerunpublishvolume&quot;&gt;ControllerUnpublishVolume&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 调用。 该字段为可选字段；为空表示不需要 secret。 如果 secret 对象包含多个 secret，则所有的 secret 都会被传递。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nodeStageSecretRef&lt;&#x2F;strong&gt;：对包含敏感信息的 secret 对象的引用，以传递给 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 来完成 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#nodestagevolume&quot;&gt;NodeStageVolume&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 调用。 该字段为可选字段；为空表示不需要 secret。 如果 secret 对象包含多个 secret，则所有的 secret 都会被传递。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nodePublishSecretRef&lt;&#x2F;strong&gt;：对包含敏感信息的 secret 对象的引用，以传递给 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 来完成 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#nodepublishvolume&quot;&gt;NodePublishVolume&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 调用。 该字段为可选字段；为空表示不需要 secret。 如果 secret 对象包含多个 secret，则所有的 secret 都会被传递。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;downwardapi&quot;&gt;DownwardAPI&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;downwardAPI&lt;&#x2F;strong&gt; 类型的 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 被用于使 &lt;strong&gt;downward API&lt;&#x2F;strong&gt; 数据对应用程序可见。其表现形式为，挂载一个目录，并将请求的数据写入到纯文本文件中。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;emptydir&quot;&gt;EmptyDir&lt;&#x2F;h3&gt;
&lt;p&gt;当 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 被指定到某个节点上时，首先创建的是一个 &lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 类型的 &lt;strong&gt;Volume&lt;&#x2F;strong&gt;，并且只要 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 保持在该节点上运行，&lt;strong&gt;Volume&lt;&#x2F;strong&gt; 就一直存在。正如名字所说的那样，&lt;strong&gt;Volume&lt;&#x2F;strong&gt; 的初始状态为空。虽然 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 中的容器挂载 &lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 类型 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 的路径可能不尽相同，但这都不重要，重要的是，这些容器都可以读写 &lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 类型 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 中的相同的文件。 无论因何种原因，只要 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 从节点上被删除，&lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 类型的 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 中的数据也会被永久删除。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;&#x2F;strong&gt;: 容器崩溃并不会导致 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 从节点上被移除，因此容器崩溃时 &lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 类型 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 中的数据是安全的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;有如下需求可以考虑使用 &lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 类型 &lt;strong&gt;Volume&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;缓存空间，例如基于磁盘的归并排序。&lt;&#x2F;li&gt;
&lt;li&gt;为耗时较长的计算任务提供检查点，以便任务能方便地从崩溃前状态恢复执行。&lt;&#x2F;li&gt;
&lt;li&gt;在 Web 服务器容器服务数据时，保存内容管理器容器获取的文件。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;默认情况下， &lt;strong&gt;emptyDir volume&lt;&#x2F;strong&gt; 所使用的的实际存储介质由节点使用何种存储介质决定: 可以是 &lt;strong&gt;HDD&lt;&#x2F;strong&gt; 或 &lt;strong&gt;SSD&lt;&#x2F;strong&gt; 或 &lt;strong&gt;NFS&lt;&#x2F;strong&gt; 等。但是，可以令 &lt;strong&gt;emptyDir.medium = Memory&lt;&#x2F;strong&gt; 使 &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 安装 &lt;strong&gt;tmpfs&lt;&#x2F;strong&gt;。但需要考虑到，&lt;strong&gt;tmpfs&lt;&#x2F;strong&gt; 的优势与劣势都很突出:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;优势: 基于 &lt;strong&gt;RAM&lt;&#x2F;strong&gt; 的文件系统，速度非常快&lt;&#x2F;li&gt;
&lt;li&gt;劣势: 随节点重启被清除，且写入的所有文件都会计入容器的内存消耗，受容器内存限制约束&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;emptydir-shi-li&quot;&gt;EmptyDir 示例&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-pd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;test-webserver
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-container
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;cache
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cache-volume
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cache-volume
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emptyDir&lt;&#x2F;span&gt;&lt;span&gt;: {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;hostpath&quot;&gt;HostPath&lt;&#x2F;h3&gt;
&lt;p&gt;A hostPath volume mounts a file or directory from the host node&#x27;s filesystem into your Pod. This is not something that most Pods will need, but it offers a powerful escape hatch for some applications.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;hostPath&lt;&#x2F;strong&gt; 类型的 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 会将宿主机节点的路径挂载到&lt;&#x2F;p&gt;
&lt;p&gt;For example, some uses for a hostPath are:&lt;&#x2F;p&gt;
&lt;p&gt;running a Container that needs access to Docker internals; use a hostPath of &#x2F;var&#x2F;lib&#x2F;docker
running cAdvisor in a Container; use a hostPath of &#x2F;sys
allowing a Pod to specify whether a given hostPath should exist prior to the Pod running, whether it should be created, and what it should exist as
In addition to the required path property, user can optionally specify a type for a hostPath volume.&lt;&#x2F;p&gt;
&lt;p&gt;The supported values for field type are:&lt;&#x2F;p&gt;
&lt;p&gt;Value Behavior  Empty string (default) is for backward compatibility, which means that no checks will be performed before mounting the hostPath volume. DirectoryOrCreate If nothing exists at the given path, an empty directory will be created there as needed with permission set to 0755, having the same group and ownership with Kubelet. Directory A directory must exist at the given path FileOrCreate If nothing exists at the given path, an empty file will be created there as needed with permission set to 0644, having the same group and ownership with Kubelet. File A file must exist at the given path Socket A UNIX socket must exist at the given path CharDevice A character device must exist at the given path BlockDevice A block device must exist at the given path
Watch out when using this type of volume, because:&lt;&#x2F;p&gt;
&lt;p&gt;Pods with identical configuration (such as created from a podTemplate) may behave differently on different nodes due to different files on the nodes
when Kubernetes adds resource-aware scheduling, as is planned, it will not be able to account for resources used by a hostPath
the files or directories created on the underlying hosts are only writable by root. You either need to run your process as root in a privileged Container or modify the file permissions on the host to be able to write to a hostPath volume&lt;&#x2F;p&gt;
&lt;h3 id=&quot;local&quot;&gt;Local&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;nfs&quot;&gt;Nfs&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;persistentvolumeclaim&quot;&gt;PersistentVolumeClaim&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;projected&quot;&gt;Projected&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;secret&quot;&gt;Secret&lt;&#x2F;h3&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;volumes&#x2F;&quot;&gt;Volumes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes 持久卷</title>
		<published>2020-10-07T17:30:27+00:00</published>
		<updated>2020-10-07T17:30:27+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-persistent-volume/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-persistent-volume/</id>
		<content type="html"></content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes 控制器</title>
		<published>2020-10-06T13:13:35+00:00</published>
		<updated>2020-10-06T13:13:35+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-controllers/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-controllers/</id>
		<content type="html">&lt;p&gt;在机器人技术和自动化领域，控制回路（Control Loop）是一个非终止回路，用于调节系统状态。&lt;&#x2F;p&gt;
&lt;p&gt;这是一个控制环的例子：房间里的温度自动调节器。&lt;&#x2F;p&gt;
&lt;p&gt;当你设置了温度，告诉了温度自动调节器你的期望状态（Desired State）。 房间的实际温度是当前状态（Current State）。 通过对设备的开关控制，温度自动调节器让其当前状态接近期望状态。&lt;&#x2F;p&gt;
&lt;p&gt;控制器通过 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kube-apiserver&#x2F;&quot;&gt;apiserver&lt;&#x2F;a&gt; 监控集群的公共状态，并致力于将当前状态转变为期望的状态。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kong-zhi-qi-mo-shi&quot;&gt;控制器模式&lt;&#x2F;h2&gt;
&lt;p&gt;一个控制器至少追踪一种类型的 Kubernetes 资源。这些 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;working-with-objects&#x2F;kubernetes-objects&#x2F;&quot;&gt;对象&lt;&#x2F;a&gt; 有一个代表期望状态的 spec 字段。 该资源的控制器负责确保其当前状态接近期望状态。&lt;&#x2F;p&gt;
&lt;p&gt;控制器可能会自行执行操作；在 Kubernetes 中更常见的是一个控制器会发送信息给 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kube-apiserver&#x2F;&quot;&gt;API 服务器&lt;&#x2F;a&gt;，这会有副作用。 具体可参看后文的例子。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-guo-api-fu-wu-qi-lai-kong-zhi&quot;&gt;通过 API 服务器来控制&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;jobs-run-to-completion&quot;&gt;Job&lt;&#x2F;a&gt; 控制器是一个 Kubernetes 内置控制器的例子。 内置控制器通过和集群 API 服务器交互来管理状态。&lt;&#x2F;p&gt;
&lt;p&gt;Job 是一种 Kubernetes 资源，它运行一个或者多个 Pod， 来执行一个任务然后停止。 （一旦被调度了，对 kubelet 来说 Pod 对象就会变成了期望状态的一部分）。&lt;&#x2F;p&gt;
&lt;p&gt;在集群中，当 Job 控制器拿到新任务时，它会保证一组 Node 节点上的 kubelet 可以运行正确数量的 Pod 来完成工作。 Job 控制器不会自己运行任何的 Pod 或者容器。Job 控制器是通知 API 服务器来创建或者移除 Pod。&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;glossary&#x2F;?all=true#term-control-plane&quot;&gt;控制面&lt;&#x2F;a&gt;中的其它组件 根据新的消息作出反应（调度并运行新 Pod）并且最终完成工作。&lt;&#x2F;p&gt;
&lt;p&gt;创建新 Job 后，所期望的状态就是完成这个 Job。Job 控制器会让 Job 的当前状态不断接近期望状态：创建为 Job 要完成工作所需要的 Pod，使 Job 的状态接近完成。&lt;&#x2F;p&gt;
&lt;p&gt;控制器也会更新配置对象。例如：一旦 Job 的工作完成了，Job 控制器会更新 Job 对象的状态为 Finished。&lt;&#x2F;p&gt;
&lt;p&gt;（这有点像温度自动调节器关闭了一个灯，以此来告诉你房间的温度现在到你设定的值了）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-jie-kong-zhi&quot;&gt;直接控制&lt;&#x2F;h3&gt;
&lt;p&gt;相比 Job 控制器，有些控制器需要对集群外的一些东西进行修改。&lt;&#x2F;p&gt;
&lt;p&gt;例如，如果你使用一个控制环来保证集群中有足够的&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;architecture&#x2F;nodes&#x2F;&quot;&gt;节点&lt;&#x2F;a&gt;，那么控制就需要当前集群外的一些服务在需要时创建新节点。&lt;&#x2F;p&gt;
&lt;p&gt;和外部状态交互的控制器从 API 服务器获取到它想要的状态，然后直接和外部系统进行通信并使当前状态更接近期望状态。&lt;&#x2F;p&gt;
&lt;p&gt;（实际上有一个控制器可以水平地扩展集群中的节点。请参阅 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;administer-cluster&#x2F;cluster-management&#x2F;#cluster-autoscaling&quot;&gt;集群自动扩缩容&lt;&#x2F;a&gt;）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;she-ji&quot;&gt;设计&lt;&#x2F;h2&gt;
&lt;p&gt;作为设计原则之一，Kubernetes 使用了很多控制器，每个控制器管理集群状态的一个特定方面。 最常见的一个特定的控制器使用一种类型的资源作为它的期望状态， 控制器管理控制另外一种类型的资源向它的期望状态演化。&lt;&#x2F;p&gt;
&lt;p&gt;使用简单的控制器而不是一组相互连接的单体控制回路是很有用的。 控制器会失败，所以 Kubernetes 的设计正是考虑到了这一点。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：
可以有多个控制器来创建或者更新相同类型的对象。 在后台，Kubernetes 控制器确保它们只关心与其控制资源相关联的资源。&lt;&#x2F;p&gt;
&lt;p&gt;例如，你可以创建 Deployment 和 Job；它们都可以创建 Pod。 Job 控制器不会删除 Deployment 所创建的 Pod，因为有信息 （&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;working-with-objects&#x2F;labels&#x2F;&quot;&gt;标签&lt;&#x2F;a&gt;）让控制器可以区分这些 Pod。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;yun-xing-kong-zhi-qi-de-fang-shi&quot;&gt;运行控制器的方式&lt;&#x2F;h2&gt;
&lt;p&gt;Kubernetes 内置一组控制器，运行在 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;command-line-tools-reference&#x2F;kube-controller-manager&#x2F;&quot;&gt;kube-controller-manager&lt;&#x2F;a&gt; 内。 这些内置的控制器提供了重要的核心功能。&lt;&#x2F;p&gt;
&lt;p&gt;Deployment 控制器和 Job 控制器是 Kubernetes 内置控制器的典型例子。 Kubernetes 允许你运行一个稳定的控制平面，这样即使某些内置控制器失败了， 控制平面的其他部分会接替它们的工作。&lt;&#x2F;p&gt;
&lt;p&gt;你会遇到某些控制器运行在控制面之外，用以扩展 Kubernetes。 或者，如果你愿意，你也可以自己编写新控制器。 你可以以一组 Pod 来运行你的控制器，或者运行在 Kubernetes 之外。 最合适的方案取决于控制器所要执行的功能是什么。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ju-li-shuo-ming&quot;&gt;举例说明&lt;&#x2F;h2&gt;
&lt;p&gt;以 &lt;strong&gt;Deployment&lt;&#x2F;strong&gt; 为例:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx:1.7.9
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;该 Deployment 定义的编排动作要求: 确保携带了 &lt;strong&gt;app=nginx&lt;&#x2F;strong&gt; 标签的 Pod 的个数，永远等于 &lt;strong&gt;spec.replicas&lt;&#x2F;strong&gt; 指定的个数，即 &lt;strong&gt;2&lt;&#x2F;strong&gt; 个。&lt;&#x2F;p&gt;
&lt;p&gt;集群会根据携带 &lt;strong&gt;app=nginx&lt;&#x2F;strong&gt; 标签的 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 的实际数量来执行创建或者删除 Pod 操作，使数量收敛于 &lt;strong&gt;2&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;这时，你也许就会好奇：究竟是 Kubernetes 项目中的哪个组件，在执行这些操作呢？&lt;&#x2F;p&gt;
&lt;p&gt;在上一小节提到的 &lt;strong&gt;kube-controller-manager&lt;&#x2F;strong&gt; 就是负责管理 &lt;strong&gt;Controllers&lt;&#x2F;strong&gt; 的服务组件。并且，&lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 项目已经包含了若干的 &lt;strong&gt;Controllers&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd kubernetes&#x2F;pkg&#x2F;controller&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d &lt;&#x2F;span&gt;&lt;span&gt;*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;             job&#x2F;                    podautoscaler&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cloud&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;                  disruption&#x2F;             namespace&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicaset&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;             serviceaccount&#x2F;         volume&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cronjob&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;                garbagecollector&#x2F;       nodelifecycle&#x2F;          replication&#x2F;            statefulset&#x2F;            daemon&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kong-zhi-xun-huan&quot;&gt;控制循环&lt;&#x2F;h3&gt;
&lt;p&gt;正如本文开篇所说，&lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 的 &lt;strong&gt;Controllers&lt;&#x2F;strong&gt; 遵循 &lt;strong&gt;控制回路（Control Loop）&lt;&#x2F;strong&gt; 的工作模式。&lt;&#x2F;p&gt;
&lt;p&gt;比如，对于编排的对象 X，可以用一段 Go 语言风格的伪代码，来描述其 Controller 的控制循环：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;实际状态 &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;获取集群中对象X的实际状态&lt;&#x2F;span&gt;&lt;span&gt;（&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Actual State&lt;&#x2F;span&gt;&lt;span&gt;）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;期望状态 &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;获取集群中对象X的期望状态&lt;&#x2F;span&gt;&lt;span&gt;（&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Desired State&lt;&#x2F;span&gt;&lt;span&gt;）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;实际状态 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;期望状态&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;什么都不做
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;执行编排动作&lt;&#x2F;span&gt;&lt;span&gt;，&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;将实际状态调整为期望状态
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一般情况:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实际状态来自于 Kubernetes 集群本身&lt;&#x2F;strong&gt;: 比如，kubelet 通过心跳汇报的容器状态和节点状态，或者监控系统中保存的应用监控数据，或者控制器主动收集的它自己感兴趣的信息，这些都是常见的实际状态的来源。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;期望状态来自于用户提交的 YAML 文件&lt;&#x2F;strong&gt;: 比如，Deployment 对象中 Replicas 字段的值。很明显，这些信息往往都保存在 Etcd 中。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;具体到本示例，Deployment 控制器的工作流程为:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;从 Etcd 中获取到所有携带了 &lt;strong&gt;app: nginx&lt;&#x2F;strong&gt; 标签的 Pod，统计其数量，作为实际状态&lt;&#x2F;li&gt;
&lt;li&gt;从 Template 中获取 Deployment 对象的 &lt;strong&gt;spec.replicas&lt;&#x2F;strong&gt; 值，作为期望状态&lt;&#x2F;li&gt;
&lt;li&gt;将两个状态做比较，然后根据比较结果，确定是创建 Pod，还是删除已有的 Pod&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;以上即为 &lt;strong&gt;Kubernetes Controller&lt;&#x2F;strong&gt; 的工作模式。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;architecture&#x2F;controller&#x2F;&quot;&gt;Architecture-Controllers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;&quot;&gt;Workloads-Controllers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>使用 NFS</title>
		<published>2020-10-02T16:18:20+00:00</published>
		<updated>2020-10-02T16:18:20+00:00</updated>
		<link href="https://blog.kiyoko.io/how-to-use-nfs/" type="text/html"/>
		<id>https://blog.kiyoko.io/how-to-use-nfs/</id>
		<content type="html">&lt;p&gt;查看被分享目录的属性:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; stat &#x2F;public
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File:&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;public
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size:&lt;&#x2F;span&gt;&lt;span&gt; 4096            Blocks: 8          IO Block: 4096   directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Device:&lt;&#x2F;span&gt;&lt;span&gt; 802h&#x2F;2050d      Inode: 58982401    Links: 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; (0777&#x2F;drwxrwxrwx)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Uid:&lt;&#x2F;span&gt;&lt;span&gt; (    0&#x2F;    root)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gid:&lt;&#x2F;span&gt;&lt;span&gt; (    0&#x2F;    root)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-02 16:25:03.129246127 +0800
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Modify:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-02 16:24:56.129203697 +0800
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Change:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-02 16:24:56.129203697 +0800
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Birth:&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo exportfs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -avrf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exporting &lt;&#x2F;span&gt;&lt;span&gt;*:&#x2F;public
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;服务端 &lt;strong&gt;&#x2F;etc&#x2F;exports&lt;&#x2F;strong&gt; 配置如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&#x2F;public *(rw,sync,no_subtree_check)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;确认被 NFS 导出的本地文件系统:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo exportfs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -avrf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exporting &lt;&#x2F;span&gt;&lt;span&gt;*:&#x2F;public
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在客户端查看远端配置:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; showmount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -e&lt;&#x2F;span&gt;&lt;span&gt; 192.168.50.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Export&lt;&#x2F;span&gt;&lt;span&gt; list for 192.168.50.5:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;public                               &lt;&#x2F;span&gt;&lt;span&gt;*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;客户端挂载 NFS 文件系统:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; rw,nolock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; nfs 192.168.50.5:&#x2F;public .&#x2F;tmp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当出现如下报错信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;mount.nfs: Operation not permitted
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;请修改 &lt;strong&gt;&#x2F;etc&#x2F;exports&lt;&#x2F;strong&gt; 内容为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&#x2F;public *(rw,sync,all_squash,no_subtree_check,insecure)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后重新执行命令挂载。&lt;&#x2F;p&gt;
&lt;p&gt;如果希望指定 &lt;code&gt;user&lt;&#x2F;code&gt; 与 &lt;code&gt;group&lt;&#x2F;code&gt; 来操作文件，可以通过在 &lt;strong&gt;&#x2F;etc&#x2F;exports&lt;&#x2F;strong&gt; 中增加选项: &lt;strong&gt;anonuid=1026,anongid=100&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;252812&#x2F;user-permissions-in-nfs-mounted-directory&quot;&gt;User permissions in NFS mounted directory&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;access.redhat.com&#x2F;solutions&#x2F;3773891&quot;&gt;Mount failed with mount: mount.nfs: access denied by server while mounting error&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>理解 Kubernetes 对象</title>
		<published>2020-09-30T17:19:21+00:00</published>
		<updated>2020-09-30T17:19:21+00:00</updated>
		<link href="https://blog.kiyoko.io/understanding-kubernetes-objects/" type="text/html"/>
		<id>https://blog.kiyoko.io/understanding-kubernetes-objects/</id>
		<content type="html">&lt;p&gt;在 Kubernetes 系统中，Kubernetes 对象 是持久化的实体。 Kubernetes 使用这些实体去表示整个集群的状态。特别地，它们描述了如下信息：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;哪些容器化应用在运行（以及在哪些节点上）&lt;&#x2F;li&gt;
&lt;li&gt;可以被应用使用的资源&lt;&#x2F;li&gt;
&lt;li&gt;关于应用运行时表现的策略，比如重启策略、升级策略，以及容错策略&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Kubernetes 对象是 &lt;strong&gt;目标性记录&lt;&#x2F;strong&gt;，即一旦创建对象，Kubernetes 系统将持续工作以确保对象存在。 通过创建对象，本质上是在告知 Kubernetes 系统，所需要的集群工作负载看起来是什么样子的， 这就是 Kubernetes 集群的 &lt;strong&gt;期望状态（Desired State）&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;操作 Kubernetes 对象 —— 无论是创建、修改，或者删除 —— 需要使用 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;kubernetes-api&quot;&gt;Kubernetes API&lt;&#x2F;a&gt;。 比如，当使用 kubectl 命令行接口时，CLI 会执行必要的 Kubernetes API 调用， 也可以在程序中使用 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;using-api&#x2F;client-libraries&#x2F;&quot;&gt;客户端库&lt;&#x2F;a&gt; 直接调用 Kubernetes API。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dui-xiang-gui-yue-spec-yu-zhuang-tai-status&quot;&gt;对象规约（Spec）与状态（Status）&lt;&#x2F;h2&gt;
&lt;p&gt;几乎每个 Kubernetes 对象包含两个嵌套的对象字段，它们负责管理对象的配置： 对象 spec（规约） 和 对象 status（状态） 。 对于具有 spec 的对象，你必须在创建对象时设置其内容，描述你希望对象所具有的特征： 期望状态（Desired State） 。&lt;&#x2F;p&gt;
&lt;p&gt;status 描述了对象的 当前状态（Current State），它是由 Kubernetes 系统和组件 设置并更新的。在任何时刻，Kubernetes &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;glossary&#x2F;?all=true#term-control-plane&quot;&gt;控制平面&lt;&#x2F;a&gt; 都一直积极地管理着对象的实际状态，以使之与期望状态相匹配。&lt;&#x2F;p&gt;
&lt;p&gt;例如，Kubernetes 中的 Deployment 对象能够表示运行在集群中的应用。 当创建 Deployment 时，可能需要设置 Deployment 的 spec，以指定该应用需要有 3 个副本运行。 Kubernetes 系统读取 Deployment 规约，并启动我们所期望的应用的 3 个实例 —— 更新状态以与规约相匹配。 如果这些实例中有的失败了（一种状态变更），Kubernetes 系统通过执行修正操作 来响应规约和状态间的不一致 —— 在这里意味着它会启动一个新的实例来替换。&lt;&#x2F;p&gt;
&lt;p&gt;关于对象 spec、status 和 metadata 的更多信息，可参阅 &lt;a href=&quot;https:&#x2F;&#x2F;git.k8s.io&#x2F;community&#x2F;contributors&#x2F;devel&#x2F;sig-architecture&#x2F;api-conventions.md&quot;&gt;Kubernetes API 约定&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;miao-shu-kubernetes-dui-xiang&quot;&gt;描述 Kubernetes 对象&lt;&#x2F;h2&gt;
&lt;p&gt;创建 Kubernetes 对象时，必须提供对象的规约，用来描述该对象的期望状态， 以及关于对象的一些基本信息（例如名称）。 当使用 Kubernetes API 创建对象时（或者直接创建，或者基于kubectl）， API 请求必须在请求体中包含 JSON 格式的信息。 &lt;strong&gt;大多数情况下，需要在 .yaml 文件中为 kubectl 提供这些信息&lt;&#x2F;strong&gt;。 kubectl 在发起 API 请求时，将这些信息转换成 JSON 格式。&lt;&#x2F;p&gt;
&lt;p&gt;这里有一个 .yaml 示例文件，展示了 Kubernetes Deployment 的必需字段和对象规约：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# for versions before 1.9.0 use apps&#x2F;v1beta2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# tells deployment to run 2 pods matching the template
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx:1.14.2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用类似于上面的 .yaml 文件来创建 Deployment的一种方式是使用 kubectl 命令行接口（CLI）中的 kubectl apply 命令， 将 .yaml 文件作为参数。下面是一个示例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;application&#x2F;deployment.yaml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --record
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出类似如下这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;deployment.apps&#x2F;nginx-deployment created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bi-xu-zi-duan&quot;&gt;必需字段&lt;&#x2F;h3&gt;
&lt;p&gt;在想要创建的 Kubernetes 对象对应的 .yaml 文件中，需要配置如下的字段：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;apiVersion - 创建该对象所使用的 Kubernetes API 的版本&lt;&#x2F;li&gt;
&lt;li&gt;kind - 想要创建的对象的类别&lt;&#x2F;li&gt;
&lt;li&gt;metadata - 帮助唯一性标识对象的一些数据，包括一个 name 字符串、UID 和可选的 namespace&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;你也需要提供对象的 spec 字段。 对象 spec 的精确格式对每个 Kubernetes 对象来说是不同的，包含了特定于该对象的嵌套字段。 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.19&#x2F;&quot;&gt;Kubernetes API 参考&lt;&#x2F;a&gt; 能够帮助我们找到任何我们想创建的对象的 spec 格式。 例如，可以从 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.19&#x2F;#podspec-v1-core&quot;&gt;core&#x2F;v1 PodSpec&lt;&#x2F;a&gt; 查看 Pod 的 spec 格式， 并且可以从 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.19&#x2F;#deploymentspec-v1-apps&quot;&gt;apps&#x2F;v1 DeploymentSpec&lt;&#x2F;a&gt; 查看 Deployment 的 spec 格式。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;working-with-objects&#x2F;kubernetes-objects&#x2F;&quot;&gt;理解 Kubernetes 对象&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;glossary&#x2F;?all=true#term-control-plane&quot;&gt;控制平面&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>B 树</title>
		<published>2020-09-10T19:29:43+00:00</published>
		<updated>2020-09-10T19:29:43+00:00</updated>
		<link href="https://blog.kiyoko.io/b-tree/" type="text/html"/>
		<id>https://blog.kiyoko.io/b-tree/</id>
		<content type="html">&lt;h2 id=&quot;gai-shu&quot;&gt;概述&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;B-Tree&lt;&#x2F;strong&gt; 属于&lt;strong&gt;自平衡树&lt;&#x2F;strong&gt;的一种。其他种类的自平衡树，比如，&lt;strong&gt;AVL&lt;&#x2F;strong&gt;、&lt;strong&gt;Red-Black Tree&lt;&#x2F;strong&gt; 等，都是假设所有数据均保存在内存中。而 &lt;strong&gt;B-Tree&lt;&#x2F;strong&gt; 是用于内存无法保存所有数据的超大数据量场景。&lt;&#x2F;p&gt;
&lt;p&gt;当 &lt;strong&gt;key&lt;&#x2F;strong&gt; 的数量庞大，需要以 &lt;strong&gt;block&lt;&#x2F;strong&gt; 的形式从磁盘中读取数据时，相较于从内存中读取数据而言，访问磁盘需要很长的时间。&lt;strong&gt;B-Tree&lt;&#x2F;strong&gt; 的主要目标，或者说核心思想就是为了减少访问磁盘的次数。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-jian-fu-za-du&quot;&gt;时间复杂度&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;ALGORITHM&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;TIME COMPLEXITY&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Search&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;O(log n)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Insert&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;O(log n)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Delete&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;O(log n)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;n&lt;&#x2F;strong&gt;: &lt;strong&gt;B-Tree&lt;&#x2F;strong&gt; 的节点总数。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;xing-zhi&quot;&gt;性质&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;所有的叶子节点在同一级。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;B-Tree&lt;&#x2F;strong&gt; 的 &lt;strong&gt;度(degree)&lt;&#x2F;strong&gt; 取决于磁盘块大小。&lt;&#x2F;li&gt;
&lt;li&gt;除根节点之外，其余节点必须至少包含 &lt;strong&gt;t-1&lt;&#x2F;strong&gt; 个 &lt;strong&gt;key&lt;&#x2F;strong&gt;；跟节点至少包含 &lt;strong&gt;1&lt;&#x2F;strong&gt; 个 &lt;strong&gt;key&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;包括根节点在内，所有节点至多包含 &lt;strong&gt;2t-1&lt;&#x2F;strong&gt; 个 &lt;strong&gt;key&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;节点的子节点数量等于节点中 &lt;strong&gt;key&lt;&#x2F;strong&gt; 的数量 &lt;strong&gt;+1&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;节点的所有 &lt;strong&gt;key&lt;&#x2F;strong&gt; 按照升序排列，在 &lt;strong&gt;key: k1, k2&lt;&#x2F;strong&gt; 之间的所有子节点包含 &lt;strong&gt;[k1, k2]&lt;&#x2F;strong&gt; 范围内的所有 &lt;strong&gt;key&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;不同于 &lt;strong&gt;BST&lt;&#x2F;strong&gt; 向下生长，向下收缩。&lt;strong&gt;B-Tree&lt;&#x2F;strong&gt; 从根节点开始生长和收缩。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;yi-ge-jian-dan-de-li-zi&quot;&gt;一个简单的例子&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;b-tree&#x2F;01.PNG&quot; alt=&quot;01.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在上面的例子中，可以观察到:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;所有的叶子结点均处于同一级别&lt;&#x2F;li&gt;
&lt;li&gt;所有非叶子节点都没有空的子树&lt;&#x2F;li&gt;
&lt;li&gt;所有非叶子节点 &lt;strong&gt;key&lt;&#x2F;strong&gt; 的数量比其自带数 &lt;strong&gt;少 1&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;can-kao-yue-du&quot;&gt;参考阅读&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.geeksforgeeks.org&#x2F;introduction-of-b-tree-2&quot;&gt;Introduction of B-Tree&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Windows Terminal</title>
		<published>2020-09-05T09:41:34+00:00</published>
		<updated>2020-09-05T09:41:34+00:00</updated>
		<link href="https://blog.kiyoko.io/windows-terminal/" type="text/html"/>
		<id>https://blog.kiyoko.io/windows-terminal/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;terminal&#x2F;&quot;&gt;&lt;code&gt;Windows Terminal&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; 是继 &lt;code&gt;WSL&lt;&#x2F;code&gt; 之后出品的又一个开发者友好的现代化应用程序。在支持原有的 &lt;code&gt;CMD&lt;&#x2F;code&gt;、&lt;code&gt;Powershell&lt;&#x2F;code&gt; 之外，还支持 &lt;code&gt;WSL&lt;&#x2F;code&gt; 子系统。其主要特性包括: 多 &lt;code&gt;tab&lt;&#x2F;code&gt;，多 &lt;code&gt;panes&lt;&#x2F;code&gt;，支持显示 &lt;code&gt;Unicode&lt;&#x2F;code&gt; 与 &lt;code&gt;UTF-8&lt;&#x2F;code&gt; 字符，使用 &lt;code&gt;GPU&lt;&#x2F;code&gt; 加速的文本渲染引擎，内置 &lt;code&gt;SSH&lt;&#x2F;code&gt; 客户端，更允许用户自定义主题及文本样式，颜色，背景，快捷键等。&lt;&#x2F;p&gt;
&lt;p&gt;更多内容请阅读&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;terminal&#x2F;&quot;&gt;官方文档&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wo-de-pei-zhi-wen-jian&quot;&gt;我的配置文件&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$schema&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;aka.ms&#x2F;terminal-profiles-schema&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;defaultProfile&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{a5a97cb8-8961-5535-816d-772efe0c6a3f}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;copyOnSelect&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;copyFormatting&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;theme&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dark&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tabWidthMode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;titleLength&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;profiles&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;defaults&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;colorScheme&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Dracula&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guid&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Windows PowerShell&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;commandline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;powershell.exe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hidden&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guid&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{0caa0dad-35be-5f56-a8ff-afceeeaa6101}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Command Prompt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;commandline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cmd.exe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hidden&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guid&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{a5a97cb8-8961-5535-816d-772efe0c6a3f}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hidden&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Arch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tabTitle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Arch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;suppressApplicationTitle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;antialiasingMode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cleartype&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;quot;grayscale&amp;quot;、&amp;quot;cleartype&amp;quot;、&amp;quot;aliased&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;icon&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ms-appdata:&#x2F;&#x2F;&#x2F;roaming&#x2F;archlinux-512.webp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Windows.Terminal.Wsl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;acrylicOpacity&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;useAcrylic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        ]
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;schemes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Dracula&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cursorColor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#F8F8F2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;selectionBackground&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#44475A&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;background&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#282A36&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foreground&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#F8F8F2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;black&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#21222C&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;blue&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#BD93F9&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cyan&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#8BE9FD&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;green&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#50FA7B&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;purple&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#FF79C6&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;red&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#FF5555&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;white&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#F8F8F2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yellow&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#F1FA8C&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brightBlack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#6272A4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brightBlue&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#D6ACFF&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brightCyan&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#A4FFFF&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brightGreen&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#69FF94&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brightPurple&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#FF92DF&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brightRed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#FF6E6E&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brightWhite&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#FFFFFF&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brightYellow&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#FFFFA5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keybindings&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;singleLine&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ctrl+c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;paste&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ctrl+v&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ctrl+shift+f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;splitPane&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;splitMode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duplicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alt+shift+d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;splitPane&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;horizontal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;splitMode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duplicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alt+shift+-&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;splitPane&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vertical&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;splitMode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duplicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alt+shift+|&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;quan-ju-she-zhi&quot;&gt;全局设置&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;terminal&#x2F;customize-settings&#x2F;global-settings#default-profile&quot;&gt;&lt;strong&gt;defaultProfile&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;: 默认使用的终端配置，可以是 &lt;code&gt;profiles.list&lt;&#x2F;code&gt; 中的某一个。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;terminal&#x2F;customize-settings&#x2F;global-settings#darklight-theme&quot;&gt;&lt;strong&gt;theme&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;: 窗体配色，可以是 &lt;code&gt;system&lt;&#x2F;code&gt;, &lt;code&gt;dark&lt;&#x2F;code&gt;, &lt;code&gt;light&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;terminal&#x2F;customize-settings&#x2F;global-settings#tab-width-mode&quot;&gt;&lt;strong&gt;tabWidthMode&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;: &lt;code&gt;tab&lt;&#x2F;code&gt; 显示长度，可以是 &lt;code&gt;equal&lt;&#x2F;code&gt;, &lt;code&gt;titleLength&lt;&#x2F;code&gt;, &lt;code&gt;compact&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pei-zhi-zhong-duan&quot;&gt;配置终端&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;profiles&lt;&#x2F;code&gt; 用于配置具体的终端，其包含如下两部分:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;profiles&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;defaults&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; SETTINGS TO APPLY TO ALL PROFILES
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PROFILE OBJECTS
&lt;&#x2F;span&gt;&lt;span&gt;        ]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mo-ren-zhong-duan-pei-zhi&quot;&gt;默认终端配置&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;profiles.defaults&lt;&#x2F;strong&gt;: 中的配置对所有的终端有效。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;profiles.list&lt;&#x2F;strong&gt;: 包含所有可用的终端，配置只对当前终端。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;guid&lt;&#x2F;strong&gt;: 配置文件可将 &lt;code&gt;GUID&lt;&#x2F;code&gt; 用作唯一标识符。 若要将某个配置文件设置为默认配置文件，则需要 &lt;code&gt;defaultProfile&lt;&#x2F;code&gt; 全局设置的 &lt;code&gt;GUID&lt;&#x2F;code&gt;，为必填项&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;colorScheme&lt;&#x2F;strong&gt;: 终端使用的配色方案，需要在 &lt;code&gt;schemes&lt;&#x2F;code&gt; 中目标配色方案&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;hidden&lt;&#x2F;strong&gt;: 在下拉列表中是否隐藏，默认为 &lt;code&gt;false&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;name&lt;&#x2F;strong&gt;: &amp;quot;在下拉列表中显示的名字&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;tabTitle&lt;&#x2F;strong&gt;: 在 &lt;code&gt;tab&lt;&#x2F;code&gt; 上显示的名字，会覆盖 &lt;strong&gt;name&lt;&#x2F;strong&gt;，需要与 &lt;strong&gt;suppressApplicationTitle&lt;&#x2F;strong&gt; 一起使用才会生效。若要了解如何使 shell 设置标题，请访问&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;terminal&#x2F;tutorials&#x2F;tab-title&quot;&gt;tab title tutorial&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;suppressApplicationTitle&lt;&#x2F;strong&gt;: 设置为 &lt;strong&gt;true&lt;&#x2F;strong&gt; 时，&lt;strong&gt;tabTitle&lt;&#x2F;strong&gt; 会替代 &lt;code&gt;tab&lt;&#x2F;code&gt; 的默认标题，并将禁止应用程序的任何标题更改消息。 如果未设置 &lt;strong&gt;tabTitle&lt;&#x2F;strong&gt;，将改为使用 &lt;strong&gt;name&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;antialiasingMode&lt;&#x2F;strong&gt;: 抗锯齿模式，可以为 &lt;strong&gt;grayscale&lt;&#x2F;strong&gt;、&lt;strong&gt;cleartype&lt;&#x2F;strong&gt;、&lt;strong&gt;aliased&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;icon&lt;&#x2F;strong&gt;: 显示图标，&amp;quot;ms-appdata:&#x2F;&#x2F;&#x2F;roaming&#x2F;archlinux-512.webp&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;acrylicOpacity&lt;&#x2F;strong&gt;: 窗口透明度，&lt;strong&gt;[0, 1]&lt;&#x2F;strong&gt; 之内的浮点数，需要配合 &lt;strong&gt;useAcrylic&lt;&#x2F;strong&gt; 一起使用&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;useAcrylic&lt;&#x2F;strong&gt;: 是否是否透明效果&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;startingDirectory&lt;&#x2F;strong&gt;: 起始目录位置，比如 &lt;code&gt;\\\\wsl$\\Ubuntu-20.04\\home\\alice&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;ms-appdata-zai-shi-yao-wei-zhi&quot;&gt;ms-appdata 在什么位置&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Windows Terminal&lt;&#x2F;code&gt; 是一个 &lt;code&gt;UWP&lt;&#x2F;code&gt; 应用(如果是在应用商店下载的话)，会有属于自己的 &lt;strong&gt;appdata&lt;&#x2F;strong&gt; 目录，位于:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;%LOCALAPPDATA%\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\RoamingState
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在文件管理器中打开这个目录放入数据，&lt;code&gt;Windows Terminal&lt;&#x2F;code&gt; 即可通过 &lt;code&gt;ms-appdata:\\\&lt;&#x2F;code&gt; 的方式获取到。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pei-se-fang-an&quot;&gt;配色方案&lt;&#x2F;h2&gt;
&lt;p&gt;可以在 &lt;strong&gt;themes&lt;&#x2F;strong&gt; 定义一系列的配色方案，要求每个配色方案要有一个唯一的 &lt;strong&gt;name&lt;&#x2F;strong&gt;。除 &lt;strong&gt;name&lt;&#x2F;strong&gt; 以外，每个设置都接受十六进制格式 (&lt;strong&gt;#rgb&lt;&#x2F;strong&gt; 或 &lt;strong&gt;#rrggbb&lt;&#x2F;strong&gt;) 的字符串形式的颜色。 &lt;strong&gt;cursorColor&lt;&#x2F;strong&gt; 和 &lt;strong&gt;selectionBackground&lt;&#x2F;strong&gt; 设置是可选的。&lt;&#x2F;p&gt;
&lt;p&gt;如果要在一个命令行配置文件中设置配色方案，请添加 &lt;strong&gt;colorScheme&lt;&#x2F;strong&gt; 属性，并将配色方案的 &lt;strong&gt;name&lt;&#x2F;strong&gt; 作为值。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zi-ding-yi-kuai-jie-jian&quot;&gt;自定义快捷键&lt;&#x2F;h2&gt;
&lt;p&gt;内容太多，请查看&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;terminal&#x2F;customize-settings&#x2F;key-bindings&quot;&gt;官方文档&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;terminal&#x2F;&quot;&gt;Windows Terminal&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.howtogeek.com&#x2F;426346&#x2F;how-to-customize-the-new-windows-terminal-app&#x2F;&quot;&gt;How to Customize the New Windows Terminal App&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;terminal&#x2F;customize-settings&#x2F;key-bindings&quot;&gt;Custom key bindings in Windows Terminal&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;draculatheme.com&#x2F;windows-terminal&#x2F;&quot;&gt;draculatheme&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>投射数据卷 (TBC)</title>
		<published>2020-09-04T08:39:17+00:00</published>
		<updated>2020-09-04T08:39:17+00:00</updated>
		<link href="https://blog.kiyoko.io/projected-volumes/" type="text/html"/>
		<id>https://blog.kiyoko.io/projected-volumes/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;投射数据卷&lt;&#x2F;strong&gt; 的官方名称为: &lt;code&gt;projected volume&lt;&#x2F;code&gt;。&lt;code&gt;Project&lt;&#x2F;code&gt; 在这里的意思为 &lt;a href=&quot;https:&#x2F;&#x2F;cn.bing.com&#x2F;dict&#x2F;search?q=project&amp;amp;qs=n&amp;amp;form=Z9LH5&amp;amp;sp=-1&amp;amp;pq=project&amp;amp;sc=8-7&amp;amp;sk=&amp;amp;cvid=A2B01F96E5A847E7A67FEC9AE0A97060&quot;&gt;&lt;strong&gt;投射&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;。感谢 &lt;code&gt;k8s&lt;&#x2F;code&gt; 帮助我学习英语。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;volumes&#x2F;#projected&quot;&gt;官方定义为&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A projected volume maps several existing volume sources into the same directory.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;Projected Volumes&lt;&#x2F;code&gt; 存在的意义不是为了存放容器里的数据，也不是用来进行容器和宿主机之间的数据交换。而是为容器提供预先定义好的数据。所以，从容器的角度来看，这些 &lt;code&gt;Volume&lt;&#x2F;code&gt; 里的信息就是仿佛是被 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; &lt;strong&gt;投射&lt;&#x2F;strong&gt; (Project) 进入容器当中的。到目前为止，Kubernetes 支持的 Projected Volume 一共有四种:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Secret&lt;&#x2F;li&gt;
&lt;li&gt;ConfigMap&lt;&#x2F;li&gt;
&lt;li&gt;Downward API&lt;&#x2F;li&gt;
&lt;li&gt;ServiceAccountToken。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;下面是官方给出的一个&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;volumes&#x2F;#example-pod-with-a-secret-a-downward-api-and-a-configmap&quot;&gt;例子&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;volume-test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;container-test
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;busybox
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;all-in-one
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;projected-volume&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readOnly&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;all-in-one
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;projected&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mysecret
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-group&#x2F;my-username
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;downwardAPI&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metadata.labels
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cpu_limit&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceFieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;container-test
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;limits.cpu
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configMap&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;myconfigmap
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;config
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-group&#x2F;my-config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首先，可以看到 &lt;code&gt;volumes&lt;&#x2F;code&gt; 与 &lt;code&gt;containers&lt;&#x2F;code&gt; 是同级的属性字段，同属于 &lt;code&gt;pod&lt;&#x2F;code&gt; 的信息。其次，在上述示例中，使用了三种 &lt;code&gt;Projected Volume&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;在有了初步认识之后，接下来对每一种 &lt;code&gt;Projected Volume&lt;&#x2F;code&gt; 做出更详细的说明。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;secret&quot;&gt;Secret&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Secret&lt;&#x2F;code&gt; 最常见的用法是保存认证信息，比如数据库等。这些数据会被保存在内部的 &lt;code&gt;ETCD&lt;&#x2F;code&gt; 中，可以通过将 &lt;code&gt;Secret&lt;&#x2F;code&gt; 以 &lt;code&gt;Volume&lt;&#x2F;code&gt; 的形式挂载到 &lt;code&gt;Pod&lt;&#x2F;code&gt; 上的方式，允许 &lt;code&gt;Pod&lt;&#x2F;code&gt; 使用 &lt;code&gt;Secret&lt;&#x2F;code&gt; 中的数据。&lt;&#x2F;p&gt;
&lt;p&gt;接下来介绍两种创建 &lt;code&gt;Secret&lt;&#x2F;code&gt; 以及使用的方式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ming-ling-xing-fang-shi&quot;&gt;命令行方式&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;tong-guo-ming-ling-xing-chuang-jian-secret&quot;&gt;通过命令行创建 Secret&lt;&#x2F;h4&gt;
&lt;p&gt;使用如下命令创建两个 &lt;code&gt;Secret&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;admin&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;gt; .&#x2F;user.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;gt; .&#x2F;pass.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; create secret generic user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --from-file&lt;&#x2F;span&gt;&lt;span&gt;=.&#x2F;user.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; create secret generic pass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --from-file&lt;&#x2F;span&gt;&lt;span&gt;=.&#x2F;pass.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;cha-xun-secret&quot;&gt;查询 Secret&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get secrets
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                  TYPE                                  DATA   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pass&lt;&#x2F;span&gt;&lt;span&gt;                  Opaque                                1      13s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;                  Opaque                                1      18s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;zai-pod-zhong-shi-yong-secret&quot;&gt;在 Pod 中使用 Secret&lt;&#x2F;h4&gt;
&lt;p&gt;生成一个 &lt;code&gt;yaml&lt;&#x2F;code&gt; 文件，引用上面的 &lt;code&gt;Secret&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 生成 yaml，在 volumes.projected 中指定上面的 user 与 pass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; busybox.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apiVersion: v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kind: Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metadata:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  name: test-projected-volume
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;spec:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  containers:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  - name: test-secret-volume
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    image: busybox
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    args:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    - sleep
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    - &amp;quot;86400&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    volumeMounts:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    - name: mysql-cred
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      mountPath: &amp;quot;&#x2F;projected-volume&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      readOnly: true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  volumes:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  - name: mysql-cred
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    projected:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      sources:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - secret:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          name: user
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - secret:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          name: pass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建 pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;busybox.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pod&#x2F;test-projected-volume&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;zai-pod-zhong-cha-kan-secret-shu-ju&quot;&gt;在 Pod 中查看 Secret 数据&lt;&#x2F;h4&gt;
&lt;p&gt;进入到 &lt;code&gt;Pod&lt;&#x2F;code&gt; 中:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -ti&lt;&#x2F;span&gt;&lt;span&gt; test-projected-volume -- sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看 &lt;code&gt;Secret&lt;&#x2F;code&gt; 数据:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ls &#x2F;projected-volume&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pass.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# cat &#x2F;projected-volume&#x2F;user.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;admin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# cat &#x2F;projected-volume&#x2F;pass.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，在 &lt;code&gt;mountPath&lt;&#x2F;code&gt; 指定的路径下面有预先定义好的 &lt;code&gt;Secret&lt;&#x2F;code&gt;，并且文件名就是 &lt;code&gt;--from-file&lt;&#x2F;code&gt; 指定的参数。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yaml-fang-shi&quot;&gt;yaml 方式&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;tong-guo-yaml-chuang-jian-secret&quot;&gt;通过 yaml 创建 Secret&lt;&#x2F;h4&gt;
&lt;p&gt;创建 &lt;code&gt;Secret&lt;&#x2F;code&gt; 的配置文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; secret.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apiVersion: v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kind: Secret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metadata:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  name: mysecret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type: Opaque
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  user: YWRtaW4=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  pass: cGFzc3dvcmQ=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 中创建 &lt;code&gt;Secret&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;secret.yml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;secret&#x2F;mysecret&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;cha-xun-secret-1&quot;&gt;查询 Secret&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get secrets
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                  TYPE                                  DATA   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mysecret&lt;&#x2F;span&gt;&lt;span&gt;              Opaque                                2      3m23s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;结果与使用命令行的方式有一些区别。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zai-pod-zhong-shi-yong-secret-1&quot;&gt;在 Pod 中使用 Secret&lt;&#x2F;h4&gt;
&lt;p&gt;生成一个 &lt;code&gt;yaml&lt;&#x2F;code&gt; 文件，引用上面的 &lt;code&gt;Secret&lt;&#x2F;code&gt;，需要注意 &lt;code&gt;secret.name&lt;&#x2F;code&gt; 应使用 &lt;code&gt;mysecret&lt;&#x2F;code&gt;，同时，数量从刚才的 &lt;strong&gt;2个&lt;&#x2F;strong&gt; 变成了 &lt;strong&gt;1个&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; busybox.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apiVersion: v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kind: Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metadata:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  name: test-projected-volume
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;spec:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  containers:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  - name: test-secret-volume
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    image: busybox
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    args:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    - sleep
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    - &amp;quot;86400&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    volumeMounts:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    - name: mysql-cred
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      mountPath: &amp;quot;&#x2F;projected-volume&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      readOnly: true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  volumes:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  - name: mysql-cred
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    projected:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      sources:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - secret:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          name: mysecret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建 pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;busybox.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pod&#x2F;test-projected-volume&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;zai-pod-zhong-cha-kan-secret-shu-ju-1&quot;&gt;在 Pod 中查看 Secret 数据&lt;&#x2F;h4&gt;
&lt;p&gt;进入到 &lt;code&gt;Pod&lt;&#x2F;code&gt; 中:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -ti&lt;&#x2F;span&gt;&lt;span&gt; test-projected-volume -- sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看 &lt;code&gt;Secret&lt;&#x2F;code&gt; 数据:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ls &#x2F;projected-volume&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pass&lt;&#x2F;span&gt;&lt;span&gt;  user
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# cat &#x2F;projected-volume&#x2F;user
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;admin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# cat &#x2F;projected-volume&#x2F;pass.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，在 &lt;code&gt;mountPath&lt;&#x2F;code&gt; 指定的路径下面有预先定义好的 &lt;code&gt;Secret&lt;&#x2F;code&gt;，并且文件名就是创建 &lt;code&gt;Secret&lt;&#x2F;code&gt; 的 &lt;code&gt;yaml&lt;&#x2F;code&gt; 文件中，&lt;code&gt;data&lt;&#x2F;code&gt; 字段的 &lt;code&gt;key&lt;&#x2F;code&gt;，内容为对应 &lt;code&gt;value&lt;&#x2F;code&gt; 经过 &lt;code&gt;base64&lt;&#x2F;code&gt; 解码之后的结果。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;config-map&quot;&gt;Config Map&lt;&#x2F;h2&gt;
&lt;p&gt;与 &lt;code&gt;Secret&lt;&#x2F;code&gt; 相同的是，&lt;code&gt;ConfigMap&lt;&#x2F;code&gt; 也用于保存用户定义的配置信息；不同的是，&lt;code&gt;ConfigMap&lt;&#x2F;code&gt; 中的数据使用保持明文形式。&lt;&#x2F;p&gt;
&lt;p&gt;比如，原始配置保存在 &lt;code&gt;example&#x2F;ui.properties&lt;&#x2F;code&gt; 中，通过该文件创建一个 &lt;code&gt;ConfigMap&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# .properties文件的内容
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat example&#x2F;ui.properties
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color.good&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;purple
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color.bad&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yellow
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow.textmode&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;how.nice.to.look&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fairlyNice
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 从 .properties 文件创建 ConfigMap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl create configmap ui-config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --from-file&lt;&#x2F;span&gt;&lt;span&gt;=example&#x2F;ui.properties
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 以 yaml 格式查看 ConfigMap 里保存的信息(data)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get configmaps ui-config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion:&lt;&#x2F;span&gt;&lt;span&gt; v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ui.properties: &lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color.good&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;purple
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color.bad&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yellow
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow.textmode&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;how.nice.to.look&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fairlyNice
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind:&lt;&#x2F;span&gt;&lt;span&gt; ConfigMap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name:&lt;&#x2F;span&gt;&lt;span&gt; ui-config
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;downward-api&quot;&gt;Downward API&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A downwardAPI volume is used to make downward API data available to applications. It mounts a directory and writes the requested data in plain text files.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;让 &lt;code&gt;Pod&lt;&#x2F;code&gt; 里的容器能够直接获取到这个 &lt;code&gt;Pod API&lt;&#x2F;code&gt; 对象本身的信息。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Kubernets&lt;&#x2F;code&gt; 提供了两种方式使用 &lt;code&gt;Downward API&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Environment variables&lt;&#x2F;li&gt;
&lt;li&gt;Volume File&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shi-yong-pod-de-zi-duan-zuo-wei-huan-jing-bian-liang&quot;&gt;使用 Pod 的字段作为环境变量&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dapi-envars-fieldref
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-container
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;busybox
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;while true; do
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo -en &amp;#39;\n&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;printenv MY_NODE_NAME MY_POD_NAME MY_POD_NAMESPACE;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;printenv MY_POD_IP MY_POD_SERVICE_ACCOUNT;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sleep 10;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;done;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MY_NODE_NAME
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueFrom&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;spec.nodeName
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MY_POD_NAME
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueFrom&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metadata.name
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MY_POD_NAMESPACE
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueFrom&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metadata.namespace
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MY_POD_IP
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueFrom&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;status.podIP
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MY_POD_SERVICE_ACCOUNT
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueFrom&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;spec.serviceAccountName
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restartPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Never
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上述配置文件中，包含了五个环境变量。字段 &lt;code&gt;env&lt;&#x2F;code&gt; 是 &lt;a href=&quot;https:&#x2F;&#x2F;v1-16.docs.kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.16&#x2F;#envvar-v1-core&quot;&gt;EnvVars&lt;&#x2F;a&gt; 类型的数组。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;fieldRef&lt;&#x2F;strong&gt; 表示选择 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 的字段，允许使用:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;metadata.name&lt;&#x2F;li&gt;
&lt;li&gt;metadata.namespace&lt;&#x2F;li&gt;
&lt;li&gt;metadata.labels&lt;&#x2F;li&gt;
&lt;li&gt;metadata.annotations&lt;&#x2F;li&gt;
&lt;li&gt;spec.nodeName&lt;&#x2F;li&gt;
&lt;li&gt;spec.serviceAccountName&lt;&#x2F;li&gt;
&lt;li&gt;status.hostIP&lt;&#x2F;li&gt;
&lt;li&gt;status.podIP&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;由 &lt;code&gt;command&lt;&#x2F;code&gt; 字段与 &lt;code&gt;args&lt;&#x2F;code&gt; 字段可以得知，这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的功能为打印在 &lt;code&gt;env&lt;&#x2F;code&gt; 中定义的环境变量。&lt;&#x2F;p&gt;
&lt;p&gt;创建 &lt;code&gt;Pod&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;pods&#x2F;inject&#x2F;dapi-envars-pod.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看 &lt;code&gt;Pod&lt;&#x2F;code&gt; 是否为运行状态:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get pods
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看日志:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; logs dapi-envars-fieldref
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;得到如下输出:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minikube
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dapi-envars-fieldref
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;172.17.0.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shi-yong-container-de-zi-duan-zuo-wei-huan-jing-bian-liang&quot;&gt;使用 Container 的字段作为环境变量&lt;&#x2F;h3&gt;
&lt;p&gt;与上面的示例类似，除了可以将 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的字段作为环境变量的值传入 &lt;code&gt;Container&lt;&#x2F;code&gt; 外，同样可以将 &lt;code&gt;Container&lt;&#x2F;code&gt; 的字段作为环境变量的值传入 &lt;code&gt;Container&lt;&#x2F;code&gt; 中。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dapi-envars-resourcefieldref
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-container
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;busybox:1.24
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;while true; do
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo -en &amp;#39;\n&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;printenv MY_CPU_REQUEST MY_CPU_LIMIT;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;printenv MY_MEM_REQUEST MY_MEM_LIMIT;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sleep 10;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;done;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;32Mi&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;125m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;64Mi&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;250m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MY_CPU_REQUEST
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueFrom&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceFieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-container
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;requests.cpu
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MY_CPU_LIMIT
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueFrom&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceFieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-container
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;limits.cpu
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MY_MEM_REQUEST
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueFrom&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceFieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-container
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;requests.memory
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MY_MEM_LIMIT
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueFrom&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceFieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-container
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;limits.memory
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restartPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Never
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;resourceFieldRef&lt;&#x2F;strong&gt; 表示选择 &lt;strong&gt;Container&lt;&#x2F;strong&gt; 的字段，允许使用 &lt;strong&gt;resources.limits&lt;&#x2F;strong&gt; 和 &lt;strong&gt;resources.requests&lt;&#x2F;strong&gt;，具体如下:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;limits.cpu&lt;&#x2F;li&gt;
&lt;li&gt;limits.memory&lt;&#x2F;li&gt;
&lt;li&gt;limits.ephemeral-storage&lt;&#x2F;li&gt;
&lt;li&gt;requests.cpu&lt;&#x2F;li&gt;
&lt;li&gt;requests.memory&lt;&#x2F;li&gt;
&lt;li&gt;requests.ephemeral-storage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;创建 &lt;code&gt;Pod&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;pods&#x2F;inject&#x2F;dapi-envars-container.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看 &lt;code&gt;Pod&lt;&#x2F;code&gt; 是否为运行状态:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get pods
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看日志:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; logs dapi-envars-resourcefieldref
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;得到如下输出:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;33554432
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;67108864
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jiang-pod-zi-duan-cun-chu-zai-wen-jian-zhong&quot;&gt;将 Pod 字段存储在文件中&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubernetes-downwardapi-volume-example
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zone&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;us-est-coast
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cluster&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-cluster1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rack&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rack-22
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;two
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;john-doe
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;client-container
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;busybox
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;while true; do
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;if [[ -e &#x2F;etc&#x2F;podinfo&#x2F;labels ]]; then
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo -en &amp;#39;\n\n&amp;#39;; cat &#x2F;etc&#x2F;podinfo&#x2F;labels; fi;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;if [[ -e &#x2F;etc&#x2F;podinfo&#x2F;annotations ]]; then
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo -en &amp;#39;\n\n&amp;#39;; cat &#x2F;etc&#x2F;podinfo&#x2F;annotations; fi;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sleep 5;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;done;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;podinfo
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;etc&#x2F;podinfo
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;podinfo
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;downwardAPI&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metadata.labels
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fieldPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metadata.annotations
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这个示例中，为 &lt;code&gt;Pod&lt;&#x2F;code&gt; 定义了 &lt;code&gt;downward API&lt;&#x2F;code&gt; 类型的 &lt;code&gt;Volume&lt;&#x2F;code&gt;，并且将这个 &lt;code&gt;Volume&lt;&#x2F;code&gt; 的挂载点位于 &lt;code&gt;&#x2F;etc&#x2F;podinfo&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;downwardAPI&lt;&#x2F;code&gt; 的 &lt;code&gt;item&lt;&#x2F;code&gt; 属性为 &lt;a href=&quot;https:&#x2F;&#x2F;v1-16.docs.kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.16&#x2F;#downwardapivolumefile-v1-core&quot;&gt;DownwardAPIVolumeFile&lt;&#x2F;a&gt; 类型的数组。具体属性为:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Field&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Type&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;fieldRef&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;v1-16.docs.kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.16&#x2F;#objectfieldselector-v1-core&quot;&gt;ObjectFieldSelector&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;必须: 从 annotations, labels, name and namespace 之中选择 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的一个字段&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;mode&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;integer&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;可选:文件属性，取值范围 [0, 0777]。缺省使用默认值。可能与其他影响改文件的参数产生冲突&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;path&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;string&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;必须: 文件相对路径，要求必须是相对路径，且不能包含 &lt;strong&gt;..&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;resourceFieldRef&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;v1-16.docs.kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.16&#x2F;#resourcefieldselector-v1-core&quot;&gt;ResourceFieldSelector&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;只支持 &lt;code&gt;Container&lt;&#x2F;code&gt; 的 &lt;code&gt;resources.limit&lt;&#x2F;code&gt; 与 &lt;code&gt;resources.requests&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;创建 &lt;code&gt;Pod&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;pods&#x2F;inject&#x2F;dapi-volume.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看 &lt;code&gt;Pod&lt;&#x2F;code&gt; 是否为运行状态:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get pods
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看日志:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; logs kubernetes-downwardapi-volume-example
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;得到如下输出:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cluster&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-cluster1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rack&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rack-22&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zone&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;us-est-coast&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;two&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;john-doe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;进入到 &lt;code&gt;Pod&lt;&#x2F;code&gt; 中:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -it&lt;&#x2F;span&gt;&lt;span&gt; kubernetes-downwardapi-volume-example -- sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看 &lt;code&gt;Volume&lt;&#x2F;code&gt; 文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;#&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;podinfo&#x2F;labels
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;得到如下内容:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cluster&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-cluster1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rack&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rack-22&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zone&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;us-est-coast&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;类似地，查看 &lt;code&gt;annotations&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;#&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;podinfo&#x2F;annotations
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jiang-container-zi-duan-cun-chu-zai-wen-jian-zhong&quot;&gt;将 Container 字段存储在文件中&lt;&#x2F;h3&gt;
&lt;p&gt;同样可以将 &lt;code&gt;Container&lt;&#x2F;code&gt; 的字段写入到文件中，并以 &lt;code&gt;Volume&lt;&#x2F;code&gt; 的形式挂载到 &lt;code&gt;Container&lt;&#x2F;code&gt; 中&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubernetes-downwardapi-volume-example-2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;client-container
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;busybox:1.24
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;while true; do
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo -en &amp;#39;\n&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;if [[ -e &#x2F;etc&#x2F;podinfo&#x2F;cpu_limit ]]; then
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo -en &amp;#39;\n&amp;#39;; cat &#x2F;etc&#x2F;podinfo&#x2F;cpu_limit; fi;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;if [[ -e &#x2F;etc&#x2F;podinfo&#x2F;cpu_request ]]; then
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo -en &amp;#39;\n&amp;#39;; cat &#x2F;etc&#x2F;podinfo&#x2F;cpu_request; fi;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;if [[ -e &#x2F;etc&#x2F;podinfo&#x2F;mem_limit ]]; then
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo -en &amp;#39;\n&amp;#39;; cat &#x2F;etc&#x2F;podinfo&#x2F;mem_limit; fi;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;if [[ -e &#x2F;etc&#x2F;podinfo&#x2F;mem_request ]]; then
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo -en &amp;#39;\n&amp;#39;; cat &#x2F;etc&#x2F;podinfo&#x2F;mem_request; fi;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sleep 5;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;done;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;32Mi&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;125m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;64Mi&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;250m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;podinfo
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;etc&#x2F;podinfo
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;podinfo
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;downwardAPI&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cpu_limit&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceFieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;client-container
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;limits.cpu
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;divisor&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1m
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cpu_request&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceFieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;client-container
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;requests.cpu
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;divisor&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1m
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mem_limit&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceFieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;client-container
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;limits.memory
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;divisor&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1Mi
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mem_request&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceFieldRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;client-container
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;requests.memory
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;divisor&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1Mi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;创建 &lt;code&gt;Pod&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;pods&#x2F;inject&#x2F;dapi-volume-resources.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;进入到 &lt;code&gt;Pod&lt;&#x2F;code&gt; 中:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -it&lt;&#x2F;span&gt;&lt;span&gt; kubernetes-downwardapi-volume-example-2 -- sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看 &lt;code&gt;Volume&lt;&#x2F;code&gt; 文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;#&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;podinfo&#x2F;cpu_limit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;volumes&#x2F;#projected&quot;&gt;Projected Volumes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;configure-projected-volume-storage&#x2F;&quot;&gt;Configure a Pod to Use a Projected Volume for Storage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;v1-16.docs.kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;volumes&#x2F;#downwardapi&quot;&gt;Donwload API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;v1-16.docs.kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;inject-data-application&#x2F;downward-api-volume-expose-pod-information&#x2F;&quot;&gt;Expose Pod Information to Containers Through Files&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;v1-16.docs.kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;inject-data-application&#x2F;environment-variable-expose-pod-information&#x2F;#use-pod-fields-as-values-for-environment-variables&quot;&gt;Use Pod fields as values for environment variables&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;v1-16.docs.kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;inject-data-application&#x2F;downward-api-volume-expose-pod-information&#x2F;#store-pod-fields&quot;&gt;Store Pod fields&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;v1-16.docs.kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.16&#x2F;#envvar-v1-core&quot;&gt;Kubernetes API: EnvVar v1 core&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;v1-16.docs.kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.16&#x2F;#envvarsource-v1-core&quot;&gt;Kubernetes API: EnvVarSource v1 core&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Play with Kubernetes</title>
		<published>2020-09-04T08:08:52+00:00</published>
		<updated>2020-09-04T08:08:52+00:00</updated>
		<link href="https://blog.kiyoko.io/play-with-k8s/" type="text/html"/>
		<id>https://blog.kiyoko.io/play-with-k8s/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;labs.play-with-k8s.com&#x2F;&quot;&gt;Play with Kubernetes&lt;&#x2F;a&gt; 是一个可以在浏览器使用的 &lt;code&gt;CentOS&lt;&#x2F;code&gt; 虚拟机环境，允许用户通过 &lt;code&gt;github&lt;&#x2F;code&gt; 账号登录。在这里，用户可以部署，学习使用 &lt;code&gt;k8s&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;跳过前面一些很简单的操作。在左侧添加 4 台虚拟机。每一台新创建的虚拟机控制台界面会有如下的提示:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt; 1. Initializes cluster master node:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; kubeadm init --apiserver-advertise-address $(hostname -i) --pod-network-cidr 10.5.0.0&#x2F;16
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; 2. Initialize cluster networking:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;cloudnativelabs&#x2F;kube-router&#x2F;master&#x2F;daemonset&#x2F;kubeadm-kuberouter.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; 3. (Optional) Create an nginx deployment:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kubernetes&#x2F;website&#x2F;master&#x2F;content&#x2F;en&#x2F;examples&#x2F;application&#x2F;nginx-app.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;da-jian-kubernetes-huan-jing&quot;&gt;搭建 Kubernetes 环境&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;code&gt;node-1&lt;&#x2F;code&gt; 中执行第一条命令，创建 &lt;code&gt;Master&lt;&#x2F;code&gt; 节点(虽然有 BLM 运动，但我不在乎)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubeadm init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --apiserver-advertise-address &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname -i&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --pod-network-cidr&lt;&#x2F;span&gt;&lt;span&gt; 10.5.0.0&#x2F;16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt; start using your cluster, you need to run the following as a regular user:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chown $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -u&lt;&#x2F;span&gt;&lt;span&gt;):$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -g&lt;&#x2F;span&gt;&lt;span&gt;) $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;You&lt;&#x2F;span&gt;&lt;span&gt; should now deploy a pod network to the cluster.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Run &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubectl apply -f [podnetwork].yaml&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; with one of the options listed at:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Then&lt;&#x2F;span&gt;&lt;span&gt; you can join any number of worker nodes by running the following on each as root:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubeadm&lt;&#x2F;span&gt;&lt;span&gt; join 192.168.0.38:6443&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --token&lt;&#x2F;span&gt;&lt;span&gt; xguam5.v5vgzeifjipno115 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --discovery-token-ca-cert-hash&lt;&#x2F;span&gt;&lt;span&gt; sha256:6ea81a284c1b7a5aeec9eb01c8856602f1f3e6f2edd5593816c27224bbccb960
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Waiting&lt;&#x2F;span&gt;&lt;span&gt; for api server to startup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Warning:&lt;&#x2F;span&gt;&lt;span&gt; kubectl apply should be used on resource created by either kubectl create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --save-config&lt;&#x2F;span&gt;&lt;span&gt; or kubectl apply
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemonset.apps&#x2F;kube-proxy&lt;&#x2F;span&gt;&lt;span&gt; configured
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;No&lt;&#x2F;span&gt;&lt;span&gt; resources found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后，从上述命令的输出中找到 &lt;code&gt;Worker&lt;&#x2F;code&gt; 节点加入 &lt;code&gt;Master&lt;&#x2F;code&gt; 节点的命令，在 &lt;code&gt;node[2-4]&lt;&#x2F;code&gt; 节点分别执行命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubeadm&lt;&#x2F;span&gt;&lt;span&gt; join 192.168.0.38:6443&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --token&lt;&#x2F;span&gt;&lt;span&gt; xguam5.v5vgzeifjipno115 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --discovery-token-ca-cert-hash&lt;&#x2F;span&gt;&lt;span&gt; sha256:6ea81a284c1b7a5aeec9eb01c8856602f1f3e6f2edd5593816c27224bbccb960
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;执行完成之后，&lt;code&gt;node[2-4]&lt;&#x2F;code&gt; 就成功加入了 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 集群中。在 &lt;code&gt;Master&lt;&#x2F;code&gt; 节点，即 &lt;code&gt;node-1&lt;&#x2F;code&gt; 上执行命令验证:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get nodes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;    STATUS     ROLES    AGE   VERSION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node1&lt;&#x2F;span&gt;&lt;span&gt;   Ready      master   14m   v1.18.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node2&lt;&#x2F;span&gt;&lt;span&gt;   Ready      &amp;lt;none&amp;gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;m   v1.18.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node3&lt;&#x2F;span&gt;&lt;span&gt;   NotReady   &amp;lt;none&amp;gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;s   v1.18.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node4&lt;&#x2F;span&gt;&lt;span&gt;   NotReady   &amp;lt;none&amp;gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;s    v1.18.4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最后部署网络插件 &lt;code&gt;kube-router&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;cloudnativelabs&#x2F;kube-router&#x2F;master&#x2F;daemonset&#x2F;kubeadm-kuberouter.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configmap&#x2F;kube-router-cfg&lt;&#x2F;span&gt;&lt;span&gt; unchanged
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemonset.apps&#x2F;kube-router&lt;&#x2F;span&gt;&lt;span&gt; configured
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serviceaccount&#x2F;kube-router&lt;&#x2F;span&gt;&lt;span&gt; unchanged
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrole.rbac.authorization.k8s.io&#x2F;kube-router&lt;&#x2F;span&gt;&lt;span&gt; unchanged
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrolebinding.rbac.authorization.k8s.io&#x2F;kube-router&lt;&#x2F;span&gt;&lt;span&gt; unchanged
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;部署完了，用去吧。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pod 的基本概念</title>
		<published>2020-09-02T21:06:17+00:00</published>
		<updated>2020-09-02T21:06:17+00:00</updated>
		<link href="https://blog.kiyoko.io/the-basics-of-pods/" type="text/html"/>
		<id>https://blog.kiyoko.io/the-basics-of-pods/</id>
		<content type="html">&lt;p&gt;前文提到，可以类比于虚拟机与应用程序之间的关系来理解 &lt;code&gt;Pod&lt;&#x2F;code&gt; 与 &lt;code&gt;Container&lt;&#x2F;code&gt; 之间的关系。这样就可以容易理解 &lt;strong&gt;凡是调度、网络、存储，以及安全相关的属性，基本都是 Pod 级别的&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;这些属性有一个共同点: 描述 &lt;strong&gt;机器&lt;&#x2F;strong&gt; 这个整体，而不是里面运行的 &lt;strong&gt;程序&lt;&#x2F;strong&gt;。比如:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;配置这个 &lt;strong&gt;机器&lt;&#x2F;strong&gt; 的网卡: &lt;code&gt;Pod&lt;&#x2F;code&gt; 的网络定义&lt;&#x2F;li&gt;
&lt;li&gt;配置这个 &lt;strong&gt;机器&lt;&#x2F;strong&gt; 的磁盘: &lt;code&gt;Pod&lt;&#x2F;code&gt; 的存储定义&lt;&#x2F;li&gt;
&lt;li&gt;配置这个 &lt;strong&gt;机器&lt;&#x2F;strong&gt; 的防火墙: &lt;code&gt;Pod&lt;&#x2F;code&gt; 的安全定义&lt;&#x2F;li&gt;
&lt;li&gt;这台 &lt;strong&gt;机器&lt;&#x2F;strong&gt; 运行在哪个服务器之上: &lt;code&gt;Pod&lt;&#x2F;code&gt; 的调度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;nodeselector&quot;&gt;NodeSelector&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;NodeSelector&lt;&#x2F;code&gt; 是一个供用户将 &lt;code&gt;Pod&lt;&#x2F;code&gt; 与 &lt;code&gt;Node&lt;&#x2F;code&gt; 进行绑定的字段，用法如下所示:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeSelector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disktype&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ssd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样的一个配置，意味着这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 永远只能运行在携带了 &lt;code&gt;disktype: ssd&lt;&#x2F;code&gt; 标签 &lt;code&gt;(Label)&lt;&#x2F;code&gt; 的节点上。否则，将调度失败。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nodename&quot;&gt;NodeName&lt;&#x2F;h2&gt;
&lt;p&gt;当 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 将 &lt;code&gt;Pod&lt;&#x2F;code&gt; 调度到某个 &lt;code&gt;Node&lt;&#x2F;code&gt; 上之后，会自动设置 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;NodeName&lt;&#x2F;code&gt; 字段。即，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 会认为所有已被赋值 &lt;code&gt;NodeName&lt;&#x2F;code&gt; 字段的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 都是被调度过的。因此，通过用户也可以设置该字段来 &lt;strong&gt;骗过&lt;&#x2F;strong&gt; 调度器，比如在测试或者调试阶段。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hostaliases&quot;&gt;HostAliases&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;HostAliases&lt;&#x2F;code&gt; 定义 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;hosts&lt;&#x2F;code&gt; 文件 &lt;code&gt;(比如 &#x2F;etc&#x2F;hosts)&lt;&#x2F;code&gt; 里的内容。&lt;&#x2F;p&gt;
&lt;p&gt;比如，在这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;YAML&lt;&#x2F;code&gt; 文件中设置了一组 &lt;code&gt;IP&lt;&#x2F;code&gt; 和 &lt;code&gt;Hostname&lt;&#x2F;code&gt; 的数据。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostAliases&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10.1.2.3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostnames&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo.remote&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bar.remote&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 &lt;code&gt;Pod&lt;&#x2F;code&gt; 启动后，&lt;code&gt;&#x2F;etc&#x2F;hosts&lt;&#x2F;code&gt; 文件的内容将如下所示:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;hosts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Kubernetes-managed hosts file.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;127.0.0.1&lt;&#x2F;span&gt;&lt;span&gt; localhost
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10.244.135.10&lt;&#x2F;span&gt;&lt;span&gt; hostaliases-pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10.1.2.3&lt;&#x2F;span&gt;&lt;span&gt; foo.remote
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10.1.2.3&lt;&#x2F;span&gt;&lt;span&gt; bar.remote
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中，最下面两行记录，就是通过 &lt;code&gt;HostAliases&lt;&#x2F;code&gt; 字段写入的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;特别注意&lt;&#x2F;strong&gt;: 在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 中，强烈建议使用这种方式设置 hosts 文件里的内容。如果使用直接修改 &lt;code&gt;hosts&lt;&#x2F;code&gt; 文件的方式，在 &lt;code&gt;Pod&lt;&#x2F;code&gt; 被删除重建之后，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 会还原被修改的内容。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shareprocessnamespace&quot;&gt;ShareProcessNamespace&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;凡是跟容器的 &lt;code&gt;Linux Namespace&lt;&#x2F;code&gt; 相关的属性，也一定是 &lt;code&gt;Pod&lt;&#x2F;code&gt; 级别的&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;设计 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的初衷，就是要让里面的容器尽可能多地共享 &lt;code&gt;Linux Namespace&lt;&#x2F;code&gt;，仅保留必要的隔离和限制能力。这样，&lt;code&gt;Pod&lt;&#x2F;code&gt; 之于 &lt;code&gt;Container&lt;&#x2F;code&gt; 就会更近似于虚拟机之于程序。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shareProcessNamespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shell
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;busybox
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tty&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;shareProcessNamespace: true&lt;&#x2F;code&gt; 表示: &lt;code&gt;Pod&lt;&#x2F;code&gt; 里的 &lt;code&gt;Containers&lt;&#x2F;code&gt; 要共享 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gong-xiang-su-zhu-ji-de-namespace&quot;&gt;共享宿主机的 Namespace&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HostPID&lt;&#x2F;strong&gt; - 控制 Pod 中容器是否可以共享宿主上的进程 ID 空间。 注意，如果与 ptrace 相结合，这种授权可能被利用，导致向容器外的特权逃逸 (默认情况下 ptrace 是被禁止的)。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HostIPC&lt;&#x2F;strong&gt; - 控制 Pod 容器是否可共享宿主上的 IPC 名字空间。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HostNetwork&lt;&#x2F;strong&gt; - 控制是否 Pod 可以使用节点的网络名字空间。 此类授权将允许 Pod 访问本地回路 (loopback) 设备、在本地主机 (localhost) 上监听的服务、还可能用来监听同一节点上其他 Pod 的网络活动。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HostPorts&lt;&#x2F;strong&gt; -提供可以在宿主网络名字空间中可使用的端口范围列表。 该属性定义为一组 HostPortRange 对象的列表，每个对象中包含 min(含) 与 max(含) 值的设置。 默认不允许访问宿主端口。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;例如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostNetwork&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostIPC&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostPID&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shell
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;busybox
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tty&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;lifecycle&quot;&gt;Lifecycle&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Container Lifecycle Hooks&lt;&#x2F;code&gt;。顾名思义，是在容器状态发生变化时触发一系列 &lt;strong&gt;钩子&lt;&#x2F;strong&gt;。我们来看这样一个例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lifecycle-demo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lifecycle-demo-container
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lifecycle&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postStart&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo Hello from the postStart handler &amp;gt; &#x2F;usr&#x2F;share&#x2F;message&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preStop&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;sbin&#x2F;nginx&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;quit&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PostStart&lt;&#x2F;strong&gt;: 这个回调在创建容器之后立即执行。 但是，不能保证回调会在容器入口点 &lt;code&gt;(ENTRYPOINT)&lt;&#x2F;code&gt; 之前执行。没有参数传递给处理程序。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PreStop&lt;&#x2F;strong&gt;: 在容器因 API 请求或者管理事件 &lt;strong&gt;(诸如存活态探针失败、资源抢占、资源竞争等)&lt;&#x2F;strong&gt; 而被终止之前，此回调会被调用。如果容器已经处于终止或者完成状态，则对 preStop 回调的调用将失败。此调用是阻塞的，也是同步调用，因此必须在删除容器的调用之前完成。没有参数传递给处理程序。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 只有在 &lt;code&gt;Pod&lt;&#x2F;code&gt; 结束 &lt;strong&gt;(Terminated)&lt;&#x2F;strong&gt; 的时候才会发送 preStop 事件，这意味着在 Pod 完成 &lt;strong&gt;(Completed)&lt;&#x2F;strong&gt; 时 preStop 的事件处理逻辑不会被触发。这个限制在 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes&#x2F;issues&#x2F;55807&quot;&gt;issue #55087&lt;&#x2F;a&gt; 中被追踪。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;有关终止行为的更详细描述，请参见 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;zh&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;pod-lifecycle&#x2F;#termination-of-pods&quot;&gt;终止 Pod&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;status&quot;&gt;Status&lt;&#x2F;h2&gt;
&lt;p&gt;Pending。Pod 已被 Kubernetes 系统接受 &lt;strong&gt;(YAML 文件已经提交给了 Kubernetes)&lt;&#x2F;strong&gt;，但有一个或者多个容器尚未创建亦未运行。此阶段包括等待 Pod 被调度的时间和通过网络下载镜像的时间，&lt;&#x2F;p&gt;
&lt;p&gt;Running。Pod 已经绑定到了某个节点，Pod 中所有的容器都已被创建。至少有一个容器仍在运行，或者正处于启动或重启状态。&lt;&#x2F;p&gt;
&lt;p&gt;Succeeded。Pod 中的所有容器都已成功终止，并且不会再重启。这种情况在运行一次性任务时最为常见。&lt;&#x2F;p&gt;
&lt;p&gt;Failed。Pod 中的所有容器都已终止，并且至少有一个容器是因为失败终止。也就是说，容器以非 &lt;code&gt;0&lt;&#x2F;code&gt; 状态退出或者被系统终止。这个状态的出现，意味着你得想办法 Debug 这个容器的应用，比如查看 Pod 的 Events 和日志。&lt;&#x2F;p&gt;
&lt;p&gt;Unknown。这是一个异常状态，意味着 Pod 的状态不能持续地被 kubelet 汇报给 kube-apiserver，这很有可能是主从节点(Master 和 Kubelet)间的通信出现了问题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;zh&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;share-process-namespace&#x2F;&quot;&gt;在 Pod 中的容器之间共享进程命名空间&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;share-process-namespace&#x2F;&quot;&gt;Share Process Namespace between Containers in a Pod&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;zh&#x2F;docs&#x2F;concepts&#x2F;policy&#x2F;pod-security-policy&#x2F;&quot;&gt;Pod 安全策略&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;policy&#x2F;pod-security-policy&#x2F;&quot;&gt;Pod Security Policies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;zh&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;pod-lifecycle&#x2F;&quot;&gt;Pod 的生命周期&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;pod-lifecycle&#x2F;&quot;&gt;Pod Lifecycle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;zh&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;attach-handler-lifecycle-event&#x2F;&quot;&gt;为容器的生命周期事件设置处理函数&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;zh&#x2F;docs&#x2F;concepts&#x2F;containers&#x2F;container-lifecycle-hooks&#x2F;&quot;&gt;容器生命周期回调&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>让你的 Hexo 博客支持 RSS</title>
		<published>2020-09-02T20:37:46+00:00</published>
		<updated>2020-09-02T20:37:46+00:00</updated>
		<link href="https://blog.kiyoko.io/enable-rss-on-hexo/" type="text/html"/>
		<id>https://blog.kiyoko.io/enable-rss-on-hexo/</id>
		<content type="html">&lt;p&gt;让博客支持 &lt;code&gt;RSS&lt;&#x2F;code&gt; 是一种美好的品德。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装 &lt;code&gt;RSS&lt;&#x2F;code&gt; 插件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;npm&lt;&#x2F;span&gt;&lt;span&gt; install hexo-generator-feed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;配置博客 &lt;code&gt;_config.uml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Extensions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plugins&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hexo-generator-feed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#Feed Atom
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feed&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;atom
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;atom.xml
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limit&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;配置主题 &lt;code&gt;_config.yml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# RSS订阅
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rss&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;atom.xml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;客户端订阅&lt;&#x2F;p&gt;
&lt;p&gt;使用 &lt;code&gt;RSS&lt;&#x2F;code&gt; 客户端订阅 &lt;code&gt;http(s):&#x2F;&#x2F;${YOUR_BLOG_HOST}&#x2F;atom.xml&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pod 的意义</title>
		<published>2020-08-31T16:34:52+00:00</published>
		<updated>2020-08-31T16:34:52+00:00</updated>
		<link href="https://blog.kiyoko.io/why-do-we-need-pods/" type="text/html"/>
		<id>https://blog.kiyoko.io/why-do-we-need-pods/</id>
		<content type="html">&lt;h2 id=&quot;rong-qi-de-ju-xian-xing&quot;&gt;容器的局限性&lt;&#x2F;h2&gt;
&lt;p&gt;既然要讨论 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的意义，或许可以想象一个如果没有 &lt;code&gt;Pod&lt;&#x2F;code&gt; 会是什么样子。&lt;&#x2F;p&gt;
&lt;p&gt;假设，有如下需求: 使用容器化来部署一个支持自动更新数据的文件服务。可以使用如下方法解决:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在一个容器中，同时运行两个进程，一个进程提供文件服务，一个进程定时更新数据。
&lt;ul&gt;
&lt;li&gt;优点:
&lt;ol&gt;
&lt;li&gt;无论是编码，还是部署都十分的容易，就像在物理机或者虚拟机里面一样&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;缺点:
&lt;ol&gt;
&lt;li&gt;容器的本质是进程，对操作系统而言是那个由 &lt;code&gt;entrypoint&lt;&#x2F;code&gt; 指定的进程，其他进程都是其子进程，或子进程的子进程等。而且，&lt;code&gt;entrypoint&lt;&#x2F;code&gt; 没有回收僵尸进程的能力。&lt;&#x2F;li&gt;
&lt;li&gt;耦合严重&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;每个进程分别位于各自的容器，两个容器之间通过挂载相同的外部 &lt;code&gt;volume&lt;&#x2F;code&gt; 实现容器间共享文件系统。
&lt;ul&gt;
&lt;li&gt;优点:
&lt;ol&gt;
&lt;li&gt;将两个容器解耦，保证功能单一性&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;缺点:
&lt;ol&gt;
&lt;li&gt;通过共享外部 &lt;code&gt;volume&lt;&#x2F;code&gt; 的方式无法保证数据安全性，其他容器，或宿主机也能直接访问 &lt;code&gt;volume&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;在上一个方法的基础上，通过 &lt;code&gt;--volume-from&lt;&#x2F;code&gt; 指定从其他的 &lt;code&gt;container&lt;&#x2F;code&gt; 挂载 &lt;code&gt;volume&lt;&#x2F;code&gt;。
&lt;ul&gt;
&lt;li&gt;优点:
&lt;ol&gt;
&lt;li&gt;避免对外直接暴露 &lt;code&gt;volume&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;到此为止，一切似乎很顺利，没有在创建 &lt;code&gt;Pod&lt;&#x2F;code&gt; 这样一个新的概念。&lt;&#x2F;p&gt;
&lt;p&gt;但上述方案有一个局限性，&lt;code&gt;--volume-from&lt;&#x2F;code&gt; 的目标容器只能是本地的其他 &lt;code&gt;container&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;假设，使用 &lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 部署服务。为了便于叙述，做出如下定义:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;集群中存在两个节点。&lt;strong&gt;&lt;code&gt;node-0&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; 剩余 &lt;code&gt;2G&lt;&#x2F;code&gt; 内存，&lt;strong&gt;&lt;code&gt;node-1&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; 剩余 &lt;code&gt;1.5G&lt;&#x2F;code&gt; 内存&lt;&#x2F;li&gt;
&lt;li&gt;两个容器 &lt;code&gt;container-0&lt;&#x2F;code&gt; 与 &lt;code&gt;container-1&lt;&#x2F;code&gt; 各需要 &lt;code&gt;1G&lt;&#x2F;code&gt; 内存&lt;&#x2F;li&gt;
&lt;li&gt;部署过程，先启动 &lt;code&gt;container-0&lt;&#x2F;code&gt;，后启动 &lt;code&gt;container-1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;因此，为了让两个容器能够运行在同一个 &lt;code&gt;Node&lt;&#x2F;code&gt; 上，需要在启动 &lt;code&gt;container-1&lt;&#x2F;code&gt; 时增加限制 &lt;code&gt;affinity=container-0&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;此时，如果 &lt;code&gt;container-0&lt;&#x2F;code&gt; 被调度到了 &lt;code&gt;node-1&lt;&#x2F;code&gt; 上，&lt;code&gt;node-1&lt;&#x2F;code&gt; 将剩余 &lt;code&gt;0.5G&lt;&#x2F;code&gt; 内存。接下来，调度 &lt;code&gt;container-1&lt;&#x2F;code&gt; 时，&lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 就会发现无法找到一个合适的 &lt;code&gt;Node&lt;&#x2F;code&gt; 来启动 &lt;code&gt;container-1&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;以上问题被称作 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Gang_scheduling&quot;&gt;Gang Scheduling&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;Kuberntes&lt;&#x2F;code&gt; 则通过 &lt;code&gt;Pod&lt;&#x2F;code&gt; 解决了这个问题。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Pod&lt;&#x2F;code&gt; 是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 中最小的可调度计算单元。在处理上述问题中，如果将 &lt;code&gt;container-0&lt;&#x2F;code&gt; 与 &lt;code&gt;container-1&lt;&#x2F;code&gt; 同时包含在一个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 中，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 在调度这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 时就只会考虑剩余内存不小于 &lt;code&gt;2G&lt;&#x2F;code&gt; 的 &lt;code&gt;node-0&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;对于上面这种，相互之间直接访问文件系统、使用 &lt;code&gt;localhost&lt;&#x2F;code&gt; 或 &lt;code&gt;socket&lt;&#x2F;code&gt; 文件进行本地通信，共享某些 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 的一组容器，称之为 &lt;strong&gt;超亲密关系&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pod-shi-xian-yuan-li&quot;&gt;Pod 实现原理&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Pod&lt;&#x2F;code&gt; 是一个逻辑概念。其本质是一组共享了 &lt;code&gt;Network Namespace&lt;&#x2F;code&gt;，并且可以声明共享同一个 &lt;code&gt;Volume&lt;&#x2F;code&gt; 的容器。&lt;&#x2F;p&gt;
&lt;p&gt;比如，一个包含了 &lt;code&gt;A&lt;&#x2F;code&gt; 与 &lt;code&gt;B&lt;&#x2F;code&gt; 两个容器的 &lt;code&gt;Pod&lt;&#x2F;code&gt;，按照 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;#what-is-a-pod&quot;&gt;定义&lt;&#x2F;a&gt; 的描述，可以使用如下 &lt;code&gt;Docker&lt;&#x2F;code&gt; 命令模拟:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# start container A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --net&lt;&#x2F;span&gt;&lt;span&gt;=B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --volumes-from&lt;&#x2F;span&gt;&lt;span&gt;=B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --name&lt;&#x2F;span&gt;&lt;span&gt;=A image-A ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但此时会发现，&lt;code&gt;Pod&lt;&#x2F;code&gt; 内的一组容器要遵循某个特定的顺序启动，容器与容器之间不再是对等关系，而是拓扑关系。&lt;&#x2F;p&gt;
&lt;p&gt;所以，在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目里，通过增加一个被称作 &lt;code&gt;Infra&lt;&#x2F;code&gt; 的容器作为 &lt;code&gt;Pod&lt;&#x2F;code&gt; 里第一个启动的容器。用户定义的其他容器通过 &lt;code&gt;Join Network Namespace&lt;&#x2F;code&gt; 的方式，关联到 &lt;code&gt;Infra&lt;&#x2F;code&gt; 容器。这样的组织关系，可以用下面这样一个示意图来表达:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;why-do-we-need-pods&#x2F;01.png&quot; alt=&quot;pause container&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如上图所示，这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 里有两个用户容器 &lt;code&gt;A&lt;&#x2F;code&gt; 和 &lt;code&gt;B&lt;&#x2F;code&gt;，还有一个 &lt;code&gt;Infra&lt;&#x2F;code&gt; 容器。这个特殊容器的镜像地址为 &lt;code&gt;k8s.gcr.io&#x2F;pause&lt;&#x2F;code&gt;，源代码位于 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes&#x2F;blob&#x2F;master&#x2F;build&#x2F;pause&#x2F;pause.c&quot;&gt;github&lt;&#x2F;a&gt;。同时，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 提供参数 &lt;code&gt;--pod-infra-container-image&lt;&#x2F;code&gt; 支持自定义镜像。&lt;&#x2F;p&gt;
&lt;p&gt;所以，当容器 &lt;code&gt;A&lt;&#x2F;code&gt;、&lt;code&gt;B&lt;&#x2F;code&gt; 加入到 &lt;code&gt;Infra&lt;&#x2F;code&gt; 容器的 &lt;code&gt;Network Namespace&lt;&#x2F;code&gt; 后，对于容器 &lt;code&gt;A&lt;&#x2F;code&gt;、&lt;code&gt;B&lt;&#x2F;code&gt; 而言:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;可以直接使用 &lt;code&gt;localhost&lt;&#x2F;code&gt; 进行通信&lt;&#x2F;li&gt;
&lt;li&gt;看到的网络设备跟 &lt;code&gt;Infra&lt;&#x2F;code&gt; 容器看到的完全一样&lt;&#x2F;li&gt;
&lt;li&gt;一个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 只有一个 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址，也就是这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;Network Namespace&lt;&#x2F;code&gt; 对应的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址&lt;&#x2F;li&gt;
&lt;li&gt;其他的所有网络资源，都是一个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 一份，并且被该 &lt;code&gt;Pod&lt;&#x2F;code&gt; 中的所有容器共享&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Pod&lt;&#x2F;code&gt; 的生命周期只跟 &lt;code&gt;Infra&lt;&#x2F;code&gt; 容器一致，而与容器 &lt;code&gt;A&lt;&#x2F;code&gt;、&lt;code&gt;B&lt;&#x2F;code&gt; 无关。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;而对于同一个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 里面的所有用户容器来说，它们的进出流量，也可以认为都是通过 &lt;code&gt;Infra&lt;&#x2F;code&gt; 容器完成的。这一点很重要，因此为 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 开发网络插件时，应该重点考虑的是如何配置这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;Network Namespace&lt;&#x2F;code&gt;，而不是每一个用户容器如何使用网络配置。&lt;&#x2F;p&gt;
&lt;p&gt;而且，在这这个设计模型之下，可以方便的共享 &lt;code&gt;volume&lt;&#x2F;code&gt;: &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目只要把所有 &lt;code&gt;volume&lt;&#x2F;code&gt; 的定义都设计在 &lt;code&gt;Pod&lt;&#x2F;code&gt; 层级即可。之后，&lt;code&gt;Pod&lt;&#x2F;code&gt; 内的容器再声明挂载这个 &lt;code&gt;volume&lt;&#x2F;code&gt; 从而达到共享 &lt;code&gt;volume&lt;&#x2F;code&gt; 的目的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;two-containers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restartPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Never
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shared-data
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostPath&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;data
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-container
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shared-data
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;debian-container
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;debian
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shared-data
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pod-data
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo Hello from the debian container &amp;gt; &#x2F;pod-data&#x2F;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rong-qi-she-ji-mo-shi&quot;&gt;容器设计模式&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Pod&lt;&#x2F;code&gt; 这种 &lt;strong&gt;超亲密关系&lt;&#x2F;strong&gt; 容器的设计思想，实际上就是希望，当用户想在一个容器里运行多个功能并不相关的应用时，应该优先考虑它们是不是更应该被描述成一个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 里的多个容器。&lt;&#x2F;p&gt;
&lt;p&gt;要理解这个概念，也很容易。只需要将 &lt;code&gt;Pod&lt;&#x2F;code&gt; 理解为原来的虚拟机即可。&lt;&#x2F;p&gt;
&lt;p&gt;在虚拟机时代，服务之间也存在一定的关系。有上述那样需要共享本地文件系统的关系，也有 &lt;code&gt;API Service&lt;&#x2F;code&gt; 与 &lt;code&gt;DB&lt;&#x2F;code&gt; 之间的关系。&lt;&#x2F;p&gt;
&lt;p&gt;当需要考虑是否需要将多个容器描述成一个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 时，可以想象一下: 如果使用虚拟机部署，是否应该将这些服务部署在同一台虚拟机上。如果需要部署在一台虚拟机才能工作，那么就需要描述为一个 &lt;code&gt;Pod&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;&quot;&gt;Kuberntes Documentation: Pod&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1513369&quot;&gt;为什么说容器是单进程模型&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;forums.docker.com&#x2F;t&#x2F;use-affinity-filter-in-docker-service-create&#x2F;78402&quot;&gt;Use “affinity filter” in “docker service create”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ianlewis.org&#x2F;en&#x2F;almighty-pause-container&quot;&gt;The Almighty Pause Container&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developers.redhat.com&#x2F;blog&#x2F;2019&#x2F;01&#x2F;15&#x2F;podman-managing-containers-pods&#x2F;&quot;&gt;Podman: Managing pods and containers in a local container runtime&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.usenix.org&#x2F;system&#x2F;files&#x2F;conference&#x2F;hotcloud16&#x2F;hotcloud16_burns.pdf&quot;&gt;Design patterns for container-based distributed systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Log Structured Merge Trees</title>
		<published>2020-08-26T21:37:03+00:00</published>
		<updated>2020-08-26T21:37:03+00:00</updated>
		<link href="https://blog.kiyoko.io/log-structured-merge-trees/" type="text/html"/>
		<id>https://blog.kiyoko.io/log-structured-merge-trees/</id>
		<content type="html">&lt;p&gt;转自 &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;swlh&#x2F;log-structured-merge-trees-9c8e2bea89e8&quot;&gt;Log Structured Merge Trees&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;LSM tree is at the heart of most storage systems that provide high write throughput, be it a key-value storage like dynamodb&#x2F;cassandra or a messaging system like pulsar which is backed by bookkeeper.&lt;&#x2F;p&gt;
&lt;p&gt;The various components of a typical LSM backed system are shown below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;log-structured-merge-trees&#x2F;01.png&quot; alt=&quot;01&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The main reason why LSM provides high write throughput is that every write request is actually performed only &lt;strong&gt;in-memory&lt;&#x2F;strong&gt; in contrast to traditional B-Tree based implementation where the updates are done to disk which can trigger an update to an index making it very expensive.&lt;&#x2F;p&gt;
&lt;p&gt;So the obvious question is, how does LSM achieve durability? that’s where WAL comes into the picture.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wal&quot;&gt;WAL&lt;&#x2F;h2&gt;
&lt;p&gt;WAL is a write-ahead log that is used to provide the durability of data during system failures, what it means is that when a request for write comes in, the data is first added to a WAL file (sometimes called journal) and flushed to the disk (using &lt;a href=&quot;https:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;en-us&#x2F;red_hat_enterprise_linux&#x2F;5&#x2F;html&#x2F;global_file_system&#x2F;s1-manage-direct-io&quot;&gt;direct io&lt;&#x2F;a&gt;) before updating the in-memory data structure.&lt;&#x2F;p&gt;
&lt;p&gt;This allows for systems to recover from the WAL if it crashes before persisting the in-memory data structure to disk.&lt;&#x2F;p&gt;
&lt;p&gt;Why not directly update the write to the disk instead of updating WAL? it’s because WAL updates are cheaper as it’s append-only and doesn’t require any restructuring of data on disk.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;memtable&quot;&gt;MemTable&lt;&#x2F;h2&gt;
&lt;p&gt;The in-memory data structure is called a memtable, there are various implementations of memtable, but you can think of memtable as just a binary search tree for the sake of simplicity.&lt;&#x2F;p&gt;
&lt;p&gt;So now for every write request, the data is appended to WAL and the memtable is updated and a successful response is returned to the client.&lt;&#x2F;p&gt;
&lt;p&gt;For java implementations, the memtable is usually stored off-heap (direct memory) to avoid GC load&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sstable-sorted-strings-table&quot;&gt;SSTable (Sorted Strings Table)&lt;&#x2F;h2&gt;
&lt;p&gt;As it’s obvious that we cannot keep adding data to memtable to bloat the RAM, the memtable is frequently flushed to disk as an SSTable.&lt;&#x2F;p&gt;
&lt;p&gt;SSTable, as the name indicates, is a sorted array of keys persisted on disk.&lt;&#x2F;p&gt;
&lt;p&gt;The reason it is sorted is to make it easy to look up the data for readings.&lt;&#x2F;p&gt;
&lt;p&gt;Okay, now that is the essence of how LSM provides high throughput using a WAL, MemTable &amp;amp; SSTable.&lt;&#x2F;p&gt;
&lt;p&gt;Usually, even every delete request for a key is also added to memtable with a marker indicating it’s deleted and the same information is flushed to the SSTable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compactor&quot;&gt;Compactor&lt;&#x2F;h2&gt;
&lt;p&gt;As we keep flushing SSTables to disk, the same key may be present in multiple SSTables, although the latest data of a key is present in the most recent SSTable, it’s presence in all previous SSTable needs to be cleaned up.&lt;&#x2F;p&gt;
&lt;p&gt;This is the job of a compactor which usually runs in the background, It merges SSTables by removing redundant &amp;amp; deleted keys and creating a compacted&#x2F;merged SSTables.&lt;&#x2F;p&gt;
&lt;p&gt;the compactor also is responsible for updating an index (typical B-Tree based index) to locate SSTable a key is present in.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;index&quot;&gt;Index&lt;&#x2F;h2&gt;
&lt;p&gt;The index data structure created is used to locate the correct SSTable for a key, once an SSTable is located, it is easy to locate the actual key inside the SSTable as it’s sorted, a binary search in-memory is sufficient.&lt;&#x2F;p&gt;
&lt;p&gt;Also, the size of SSTables is chosen in such a way that it corresponds to the operating system &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Page_(computer_memory)&quot;&gt;page size&lt;&#x2F;a&gt; (usually multiples of disk bock size) making it easier to load the data to memory faster.&lt;&#x2F;p&gt;
&lt;p&gt;Although the Index along with SSTable help in faster lookup of keys, all read requests are first consulted in the memtable as it should contain the most recent change. If the key is not in the memtable, then the index is used to identify the possible SSTable the key may be present and then search inside the SSTable in-memory.&lt;&#x2F;p&gt;
&lt;p&gt;Since every read has to check the memtable, index &amp;amp; SSTable to look for a key, it makes read requests very expensive especially for keys that are not present!&lt;&#x2F;p&gt;
&lt;p&gt;For keys that are recently updated, the read request will easily locate it in the memtable, but for keys not recently updated, and for keys that are not present in the system the read path is expensive!&lt;&#x2F;p&gt;
&lt;p&gt;Bloom Filters are used to improve read performance especially for the cases where the key is not present in the system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bloom-filter&quot;&gt;Bloom Filter&lt;&#x2F;h2&gt;
&lt;p&gt;A Bloom filter is a probabilistic data structure, which at a high level helps you check if a key is present or not in the system with O(1) complexity in memory.&lt;&#x2F;p&gt;
&lt;p&gt;With bloom filter, False positive match is possible, which means, it may indicate a key is present although it’s not in the system. But false-negative match won’t happen, which means if bloom filter indicates a key is not present, then it is definitely not present in the system, so we could avoid taking the expensive read path.&lt;&#x2F;p&gt;
&lt;p&gt;So the presence of a bloom filter improves the read performance for keys that are missing in the system but for the keys that are present in the system, the read is still expensive as we have to look into the memtable, index and the SSTable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;So every time you come across a system that promises high write throughput, you can assume there will be a variant of LSM tree underneath that helps achieve the throughput and also understand why reads are expensive.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>容器编排与 Kubernetes</title>
		<published>2020-08-24T20:58:07+00:00</published>
		<updated>2020-08-24T20:58:07+00:00</updated>
		<link href="https://blog.kiyoko.io/container-orchestration-and-kubernetes/" type="text/html"/>
		<id>https://blog.kiyoko.io/container-orchestration-and-kubernetes/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt; 容器依托于 &lt;code&gt;Linux Namespace&lt;&#x2F;code&gt;、&lt;code&gt;Cgroup&lt;&#x2F;code&gt;、&lt;code&gt;rootfs&lt;&#x2F;code&gt; 三方面，在宿主机之上为用户构建出互相隔离的进程运行环境。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rootfs&lt;&#x2F;code&gt; 作为容器镜像，是静态视图；&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Namespace&lt;&#x2F;code&gt; + &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 提供运行时隔离环境，是动态视图。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;显而易见，对于开发者而言，他们更关注于容器镜像。容器镜像，可以看做是以前的应用程序，它由开发者负责构建，并在开发、测试、发布等各个环节之间作为最核心的组件。&lt;&#x2F;p&gt;
&lt;p&gt;在这种前提之下，云服务提供商的职责就从原来的 &lt;strong&gt;将用户提交的应用在虚拟机上运行起来&lt;&#x2F;strong&gt;，转变为 &lt;strong&gt;将用户提交的镜像以容器的方式运行起来&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;因此，整个生态必将以容器镜像为核心连接点，在生态链路的各个节点，如 &lt;code&gt;CI&#x2F;CD&lt;&#x2F;code&gt;、监控、安全、网络、存储等，都需要转变为以容器镜像为根本。这将是一次云服务平台的结构化升级。&lt;&#x2F;p&gt;
&lt;p&gt;容器从一个开发者手里的小工具，一跃成为了云计算领域的绝对主角；而能够定义容器组织和管理规范的 &lt;strong&gt;容器编排&lt;&#x2F;strong&gt; 技术，则当仁不让地坐上了容器技术领域的 &lt;strong&gt;头把交椅&lt;&#x2F;strong&gt;。这其中，其中翘楚当属 &lt;code&gt;Docker&lt;&#x2F;code&gt; 公司的 &lt;code&gt;Compose+Swarm&lt;&#x2F;code&gt; 组合，以及 &lt;code&gt;Google&lt;&#x2F;code&gt; 与 &lt;code&gt;RedHat&lt;&#x2F;code&gt; 公司共同主导的 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目脱胎于 &lt;code&gt;Google&lt;&#x2F;code&gt; 的核心系统 &lt;code&gt;Borg&lt;&#x2F;code&gt;，在项目初期有有着很强的技术理论指导。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Borg&lt;&#x2F;code&gt; 系统，一直以来都被誉为 &lt;code&gt;Google&lt;&#x2F;code&gt; 公司内部最强大的 &lt;strong&gt;秘密武器&lt;&#x2F;strong&gt;。虽然略显夸张，但这个说法倒不算是吹牛。因为，相比于 &lt;code&gt;Spanner&lt;&#x2F;code&gt;、&lt;code&gt;BigTable&lt;&#x2F;code&gt; 等相对上层的项目，&lt;code&gt;Borg&lt;&#x2F;code&gt; 要承担的责任，是承载 &lt;code&gt;Google&lt;&#x2F;code&gt; 公司整个基础设施的核心依赖。在 &lt;code&gt;Google&lt;&#x2F;code&gt; 公司已经公开发表的基础设施体系论文中，&lt;code&gt;Borg&lt;&#x2F;code&gt; 项目当仁不让地位居整个基础设施技术栈的最底层。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;container-orchestration-and-kubernetes&#x2F;google-stack.png&quot; alt=&quot;google-stack&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上图，来自于 &lt;code&gt;Google Omega&lt;&#x2F;code&gt; 论文的第一作者的博士毕业论文。它描绘了当时 &lt;code&gt;Google&lt;&#x2F;code&gt; 已经公开发表的整个基础设施栈。在这个图里，你既可以找到 &lt;code&gt;MapReduce&lt;&#x2F;code&gt;、&lt;code&gt;BigTable&lt;&#x2F;code&gt; 等知名项目，也能看到 &lt;code&gt;Borg&lt;&#x2F;code&gt; 和它的继任者 &lt;code&gt;Omega&lt;&#x2F;code&gt; 位于整个技术栈的最底层。&lt;&#x2F;p&gt;
&lt;p&gt;正是由于这样的定位，&lt;code&gt;Borg&lt;&#x2F;code&gt; 可以说是 &lt;code&gt;Google&lt;&#x2F;code&gt; 最不可能开源的一个项目。而幸运的是，得益于 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目和容器技术的风靡，它终于得以以另一种方式与开源社区见面，这个方式就是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目。&lt;&#x2F;p&gt;
&lt;p&gt;所以，相比于 &lt;strong&gt;小打小闹&lt;&#x2F;strong&gt; 的 &lt;code&gt;Docker&lt;&#x2F;code&gt; 公司、&lt;strong&gt;旧瓶装新酒&lt;&#x2F;strong&gt; 的 &lt;code&gt;Mesos&lt;&#x2F;code&gt; 社区，&lt;strong&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目从一开始就比较幸运地站上了一个他人难以企及的高度&lt;&#x2F;strong&gt;: 在它的成长阶段，这个项目每一个核心特性的提出，几乎都脱胎于 &lt;code&gt;Borg&#x2F;Omega&lt;&#x2F;code&gt; 系统的设计与经验。更重要的是，这些特性在开源社区落地的过程中，又在整个社区的合力之下得到了极大的改进，修复了很多当年遗留在 &lt;code&gt;Borg&lt;&#x2F;code&gt; 体系中的缺陷和问题。&lt;&#x2F;p&gt;
&lt;p&gt;所以，尽管在发布之初被批评是 &lt;strong&gt;曲高和寡&lt;&#x2F;strong&gt;，但是在逐渐觉察到 &lt;code&gt;Docker&lt;&#x2F;code&gt; 技术栈的 &lt;strong&gt;稚嫩&lt;&#x2F;strong&gt; 和 &lt;code&gt;Mesos&lt;&#x2F;code&gt; 社区的 &lt;strong&gt;老迈&lt;&#x2F;strong&gt; 之后，这个社区很快就明白了: &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目在 &lt;code&gt;Borg&lt;&#x2F;code&gt; 体系的指导下，体现出了一种独有的 &lt;strong&gt;先进性&lt;&#x2F;strong&gt; 与 &lt;strong&gt;完备性&lt;&#x2F;strong&gt;，而这些特质才是一个基础设施领域开源项目赖以生存的核心价值。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kubernetes-jie-jue-liao-shi-yao-wen-ti&quot;&gt;Kubernetes 解决了什么问题&lt;&#x2F;h2&gt;
&lt;p&gt;在说明 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 解决了什么问题之前，先来讨论一下，用户期望 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 有什么样的功能。&lt;&#x2F;p&gt;
&lt;p&gt;对于大多数用户来说，他们希望 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目带来的体验是确定的: 现在我有了应用的容器镜像，请帮我在一个给定的集群上把这个应用运行起来。&lt;&#x2F;p&gt;
&lt;p&gt;更进一步地说，还希望 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 能给我提供路由 &lt;strong&gt;网关&lt;&#x2F;strong&gt;、&lt;strong&gt;水平扩展&lt;&#x2F;strong&gt;、&lt;strong&gt;监控&lt;&#x2F;strong&gt;、&lt;strong&gt;备份&lt;&#x2F;strong&gt;、&lt;strong&gt;灾难恢复&lt;&#x2F;strong&gt; 等一系列运维能力。&lt;&#x2F;p&gt;
&lt;p&gt;解决发现，这就是对于 &lt;code&gt;PaaS(Cloud Foundry)&lt;&#x2F;code&gt; 同等的诉求。&lt;&#x2F;p&gt;
&lt;p&gt;但是，这些功能完全可以通过 &lt;code&gt;Docker&lt;&#x2F;code&gt; 及其生态圈 &lt;code&gt;Docker Compose&lt;&#x2F;code&gt; + &lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 自行实现，完全不知道实现一个 &lt;strong&gt;百万行代码量级&lt;&#x2F;strong&gt; 的 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所以说，如果 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目只是停留在拉取用户镜像、运行容器，以及提供常见的运维功能的话，那么别说跟 &lt;strong&gt;原生&lt;&#x2F;strong&gt; 的 &lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 项目竞争了，哪怕跟经典的 &lt;code&gt;PaaS&lt;&#x2F;code&gt; 项目相比也难有什么优势可言。&lt;&#x2F;p&gt;
&lt;p&gt;而实际上，在定义核心功能的过程中，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目是站在巨人 &lt;code&gt;Borg&lt;&#x2F;code&gt; 项目的肩膀之上，凭借 &lt;code&gt;Borg&lt;&#x2F;code&gt; 超前的理论优势，在短短几个月内迅速站稳了脚跟，进而确定了一个如下图所示的全局架构:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;container-orchestration-and-kubernetes&#x2F;k8s-architecture.png&quot; alt=&quot;k8s-architecture&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目的架构与原型项目 &lt;code&gt;Borg&lt;&#x2F;code&gt; 非常类似，都由 &lt;code&gt;Master&lt;&#x2F;code&gt; 和 &lt;code&gt;Node&lt;&#x2F;code&gt; 两种节点组成，分别用作控制节点和计算节点。&lt;&#x2F;p&gt;
&lt;p&gt;其中，控制节点，即 &lt;code&gt;Master&lt;&#x2F;code&gt; 节点，由 &lt;strong&gt;三个&lt;&#x2F;strong&gt; 紧密协作的独立组件组合而成，它们分别是&lt;strong&gt;负责 &lt;code&gt;API&lt;&#x2F;code&gt; 服务的 &lt;code&gt;kube-apiserver&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;、&lt;strong&gt;负责调度的 &lt;code&gt;kube-scheduler&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;，以及 &lt;strong&gt;负责容器编排的 &lt;code&gt;kube-controller-manager&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;。整个集群的持久化数据，由 &lt;code&gt;kube-apiserver&lt;&#x2F;code&gt; 处理后保存在 &lt;code&gt;ETCD&lt;&#x2F;code&gt; 中。&lt;&#x2F;p&gt;
&lt;p&gt;而计算节点上最核心的部分，则是一个叫作 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 的组件。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 主要负责同容器运行时(比如 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目)打交道。而这个交互所依赖的，是一个称作 &lt;code&gt;CRI(Container Runtime Interface)&lt;&#x2F;code&gt; 的远程调用接口，这个接口定义了容器运行时的各项核心操作，比如: 启动一个容器需要的所有参数。&lt;&#x2F;p&gt;
&lt;p&gt;这也是为何，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目并不关心你部署的是什么容器运行时、使用的什么技术实现，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 &lt;code&gt;CRI&lt;&#x2F;code&gt; 接入到 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目当中。&lt;&#x2F;p&gt;
&lt;p&gt;而具体的容器运行时，比如 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目，则一般通过 &lt;code&gt;OCI&lt;&#x2F;code&gt; 这个容器运行时规范同底层的 &lt;code&gt;Linux&lt;&#x2F;code&gt; 操作系统进行交互，即: 把 &lt;code&gt;CRI&lt;&#x2F;code&gt; 请求翻译成对 &lt;code&gt;Linux&lt;&#x2F;code&gt; 操作系统的调用(操作 &lt;code&gt;Linux Namespace&lt;&#x2F;code&gt; 和 &lt;code&gt;Cgroups&lt;&#x2F;code&gt; 等)。&lt;&#x2F;p&gt;
&lt;p&gt;此外，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 还通过 &lt;code&gt;gRPC&lt;&#x2F;code&gt; 协议同一个叫作 &lt;code&gt;Device Plugin&lt;&#x2F;code&gt; 的插件进行交互。这个插件，是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目用来管理 &lt;code&gt;GPU&lt;&#x2F;code&gt; 等宿主机物理设备的主要组件，也是基于 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目进行机器学习训练、高性能作业支持等工作必须关注的功能。&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。这两个插件与 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 进行交互的接口，分别是 &lt;code&gt;CNI(Container Networking Interface)&lt;&#x2F;code&gt;和 &lt;code&gt;CSI(Container Storage Interface)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;实际上，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 这个奇怪的名字，来自于 &lt;code&gt;Borg&lt;&#x2F;code&gt; 项目里的同源组件 &lt;code&gt;Borglet&lt;&#x2F;code&gt;。不过，如果你浏览过 &lt;code&gt;Borg&lt;&#x2F;code&gt; 论文的话，就会发现，这个命名方式可能是 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 组件与 &lt;code&gt;Borglet&lt;&#x2F;code&gt; 组件的唯一相似之处。因为 &lt;code&gt;Borg&lt;&#x2F;code&gt; 项目，并不支持我们这里所讲的容器技术，而只是简单地使用了 &lt;code&gt;Linux Cgroups&lt;&#x2F;code&gt; 对进程进行限制。&lt;&#x2F;p&gt;
&lt;p&gt;这就意味着，像 &lt;code&gt;Docker&lt;&#x2F;code&gt; 这样的“容器镜像”在 &lt;code&gt;Borg&lt;&#x2F;code&gt; 中是不存在的，&lt;code&gt;Borglet&lt;&#x2F;code&gt; 组件也自然不需要像 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 这样考虑如何同 &lt;code&gt;Docker&lt;&#x2F;code&gt; 进行交互、如何对容器镜像进行管理的问题，也不需要支持 &lt;code&gt;CRI&lt;&#x2F;code&gt;、&lt;code&gt;CNI&lt;&#x2F;code&gt;、&lt;code&gt;CSI&lt;&#x2F;code&gt; 等诸多容器技术接口。&lt;&#x2F;p&gt;
&lt;p&gt;可以说，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 完全就是为了实现 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目对容器的管理能力而重新实现的一个组件，与 &lt;code&gt;Borg&lt;&#x2F;code&gt; 之间并没有直接的传承关系。&lt;&#x2F;p&gt;
&lt;p&gt;那么，&lt;code&gt;Borg&lt;&#x2F;code&gt; 对于 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目的指导作用又体现在哪里呢？&lt;&#x2F;p&gt;
&lt;p&gt;答案是，&lt;code&gt;Master&lt;&#x2F;code&gt; 节点。&lt;&#x2F;p&gt;
&lt;p&gt;虽然在 &lt;code&gt;Master&lt;&#x2F;code&gt; 节点的实现细节上 &lt;code&gt;Borg&lt;&#x2F;code&gt; 项目与 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目不尽相同，但它们的出发点却高度一致，即: &lt;strong&gt;如何编排、管理、调度用户提交的作业&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;所以，&lt;code&gt;Borg&lt;&#x2F;code&gt; 项目完全可以把 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像看作一种新的应用打包方式。这样，&lt;code&gt;Borg&lt;&#x2F;code&gt; 团队过去在大规模作业管理与编排上的经验就可以直接 &lt;strong&gt;套&lt;&#x2F;strong&gt; 在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目上了。&lt;&#x2F;p&gt;
&lt;p&gt;这些经验最主要的表现就是，从一开始，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目就没有像同时期的各种 &lt;strong&gt;容器云&lt;&#x2F;strong&gt; 项目那样，把 &lt;code&gt;Docker&lt;&#x2F;code&gt; 作为整个架构的核心，而仅仅把它作为最底层的一个容器运行时实现。&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目要着重解决的问题，则来自于 &lt;code&gt;Borg&lt;&#x2F;code&gt; 的研究人员在论文中提到的一个非常重要的观点:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;运行在大规模集群中的各种任务之间，实际上存在着各种各样的关系。这些关系的处理，才是作业编排和管理系统最困难的地方。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;事实也正是如此。&lt;&#x2F;p&gt;
&lt;p&gt;其实，这种任务与任务之间的关系，在我们平常的各种技术场景中随处可见。比如，一个 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用与数据库之间的访问关系，一个负载均衡器和它的后端服务之间的代理关系，一个门户应用与授权组件之间的调用关系。&lt;&#x2F;p&gt;
&lt;p&gt;更进一步地说，同属于一个服务单位的不同功能之间，也完全可能存在这样的关系。比如，一个 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用与日志搜集组件之间的文件交换关系。&lt;&#x2F;p&gt;
&lt;p&gt;而在容器技术普及之前，传统虚拟机环境对这种关系的处理方法都是比较“粗粒度”的。你会经常发现很多功能并不相关的应用被一股脑儿地部署在同一台虚拟机中，只是因为它们之间偶尔会互相发起几个 &lt;code&gt;HTTP&lt;&#x2F;code&gt; 请求。&lt;&#x2F;p&gt;
&lt;p&gt;更常见的情况则是，一个应用被部署在虚拟机里之后，你还得手动维护很多跟它协作的守护进程 &lt;code&gt;(Daemon)&lt;&#x2F;code&gt;，用来处理它的日志搜集、灾难恢复、数据备份等辅助工作。&lt;&#x2F;p&gt;
&lt;p&gt;但容器技术出现以后，你就不难发现，在 &lt;strong&gt;功能单位&lt;&#x2F;strong&gt; 的划分上，容器有着独一无二的 &lt;strong&gt;细粒度&lt;&#x2F;strong&gt; 优势: 毕竟容器的本质，只是一个进程而已。&lt;&#x2F;p&gt;
&lt;p&gt;也就是说，只要你愿意，那些原先拥挤在同一个虚拟机里的各个应用、组件、守护进程，都可以被分别做成镜像，然后运行在一个个专属的容器中。它们之间互不干涉，拥有各自的资源配额，可以被调度在整个集群里的任何一台机器上。而这，正是一个 &lt;code&gt;PaaS&lt;&#x2F;code&gt; 系统最理想的工作状态，也是所谓“微服务”思想得以落地的先决条件。&lt;&#x2F;p&gt;
&lt;p&gt;当然，如果只做到 &lt;strong&gt;封装微服务、调度单容器&lt;&#x2F;strong&gt; 这一层次，&lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 项目就已经绰绰有余了。如果再加上 &lt;code&gt;Compose&lt;&#x2F;code&gt; 项目，你甚至还具备了处理一些简单依赖关系的能力，比如：一个 &lt;strong&gt;Web 容器&lt;&#x2F;strong&gt; 和它要访问的数据库 &lt;strong&gt;DB 容器&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;Compose&lt;&#x2F;code&gt; 项目中，你可以为这样的两个容器定义一个 &lt;code&gt;link&lt;&#x2F;code&gt;，而 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目则会负责维护这个 &lt;strong&gt;link&lt;&#x2F;strong&gt; 关系，其具体做法是: &lt;code&gt;Docker&lt;&#x2F;code&gt; 会在 &lt;code&gt;Web&lt;&#x2F;code&gt; 容器中，将 &lt;code&gt;DB&lt;&#x2F;code&gt; 容器的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址、端口等信息以环境变量的方式注入进去，供应用进程使用，比如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;conf&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-conf &quot;&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span&gt;DB_NAME=&#x2F;web&#x2F;db
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tcp:&#x2F;&#x2F;172.17.0.5:5432
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT_5432_TCP=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tcp:&#x2F;&#x2F;172.17.0.5:5432
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT_5432_TCP_PROTO=tcp
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT_5432_TCP_PORT=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5432
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT_5432_TCP_ADDR=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;172.17.0.5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而当 DB 容器发生变化时(比如，镜像更新，被迁移到其他宿主机上等等)，这些环境变量的值会由 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目自动更新。这就是平台项目自动地处理容器间关系的典型例子。&lt;&#x2F;p&gt;
&lt;p&gt;可是，如果我们现在的需求是，要求这个项目能够处理前面提到的所有类型的关系，甚至还要能够支持未来可能出现的更多种类的关系呢？&lt;&#x2F;p&gt;
&lt;p&gt;这时，&lt;code&gt;link&lt;&#x2F;code&gt; 这种单独针对一种案例设计的解决方案就太过简单了。如果你做过架构方面的工作，就会深有感触：一旦要追求项目的普适性，那就一定要从顶层开始做好设计。&lt;&#x2F;p&gt;
&lt;p&gt;所以，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目最主要的设计思想是，从更宏观的角度，以统一的方式来定义任务之间的各种关系，并且为将来支持更多种类的关系留有余地。&lt;&#x2F;p&gt;
&lt;p&gt;比如，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目对容器间的 &lt;strong&gt;访问&lt;&#x2F;strong&gt; 进行了分类，首先总结出了一类非常常见的“紧密交互”的关系，即：这些应用之间需要非常频繁的交互和访问；又或者，它们会直接通过本地文件进行信息交换。&lt;&#x2F;p&gt;
&lt;p&gt;在常规环境下，这些应用往往会被直接部署在同一台机器上，通过 &lt;code&gt;Localhost&lt;&#x2F;code&gt; 通信，通过本地磁盘目录交换文件。而在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中，这些容器则会被划分为一个 &lt;strong&gt;Pod&lt;&#x2F;strong&gt;，&lt;code&gt;Pod&lt;&#x2F;code&gt; 里的容器共享同一个 &lt;code&gt;Network Namespace&lt;&#x2F;code&gt;、同一组数据卷，从而达到高效率交换信息的目的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Pod&lt;&#x2F;code&gt; 是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中最基础的一个对象，源自于 &lt;code&gt;Google Borg&lt;&#x2F;code&gt; 论文中一个名叫 &lt;code&gt;Alloc&lt;&#x2F;code&gt; 的设计。在后续的章节中，我们会对 &lt;code&gt;Pod&lt;&#x2F;code&gt; 做更进一步地阐述。&lt;&#x2F;p&gt;
&lt;p&gt;而对于另外一种更为常见的需求，比如 &lt;strong&gt;Web 应用&lt;&#x2F;strong&gt; 与 &lt;strong&gt;数据库&lt;&#x2F;strong&gt; 之间的访问关系，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目则提供了一种叫作“Service”的服务。像这样的两个应用，往往故意不部署在同一台机器上，这样即使 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用所在的机器宕机了，数据库也完全不受影响。可是，我们知道，对于一个容器来说，它的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址等信息不是固定的，那么 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用又怎么找到数据库容器的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 呢？&lt;&#x2F;p&gt;
&lt;p&gt;所以，Kubernetes 项目的做法是给 &lt;code&gt;Pod&lt;&#x2F;code&gt; 绑定一个 &lt;code&gt;Service&lt;&#x2F;code&gt; 服务，而 &lt;code&gt;Service&lt;&#x2F;code&gt; 服务声明的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址等信息是 &lt;strong&gt;终生不变&lt;&#x2F;strong&gt; 的。这个 &lt;code&gt;Service&lt;&#x2F;code&gt; 服务的主要作用，就是作为 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的代理入口 &lt;code&gt;(Portal)&lt;&#x2F;code&gt;，从而代替 &lt;code&gt;Pod&lt;&#x2F;code&gt; 对外暴露一个固定的网络地址。&lt;&#x2F;p&gt;
&lt;p&gt;这样，对于 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 来说，它需要关心的就是数据库 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;Service&lt;&#x2F;code&gt; &lt;code&gt;信息。不难想象，Service&lt;&#x2F;code&gt; 后端真正代理的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址、端口等信息的自动更新、维护，则是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目的职责。&lt;&#x2F;p&gt;
&lt;p&gt;像这样，围绕着容器和 &lt;code&gt;Pod&lt;&#x2F;code&gt; 不断向真实的技术场景扩展，我们就能够摸索出一幅如下所示的 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目核心功能的“全景图”。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;container-orchestration-and-kubernetes&#x2F;k8s-overview.png&quot; alt=&quot;k8s-overview&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;按照这幅图的线索，我们从容器这个最基础的概念出发，首先遇到了容器间“紧密协作”关系的难题，于是就扩展到了 &lt;code&gt;Pod&lt;&#x2F;code&gt;: 有了 &lt;code&gt;Pod&lt;&#x2F;code&gt; 之后，我们希望能一次启动多个应用的实例，这样就需要 &lt;code&gt;Deployment&lt;&#x2F;code&gt; 这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的多实例管理器；而有了这样一组相同的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 后，我们又需要通过一个固定的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址和端口以负载均衡的方式访问它，于是就有了 &lt;code&gt;Service&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;可是，如果现在两个不同 &lt;code&gt;Pod&lt;&#x2F;code&gt; 之间不仅有“访问关系”，还要求在发起时加上授权信息。最典型的例子就是 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用对数据库访问时需要 &lt;code&gt;Credential&lt;&#x2F;code&gt;(数据库的用户名和密码)信息。那么，在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 中这样的关系又如何处理呢？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目提供了一种叫作 &lt;code&gt;Secret&lt;&#x2F;code&gt; 的对象，它其实是一个保存在 &lt;code&gt;Etcd&lt;&#x2F;code&gt; 里的键值对数据。这样，你把 &lt;code&gt;Credential&lt;&#x2F;code&gt; 信息以 &lt;code&gt;Secret&lt;&#x2F;code&gt; 的方式存在 &lt;code&gt;Etcd&lt;&#x2F;code&gt; &lt;code&gt;里，Kubernetes&lt;&#x2F;code&gt; 就会在你指定的 &lt;code&gt;Pod&lt;&#x2F;code&gt;(比如，&lt;code&gt;Web&lt;&#x2F;code&gt; 应用的 &lt;code&gt;Pod&lt;&#x2F;code&gt;)启动时，自动把 &lt;code&gt;Secret&lt;&#x2F;code&gt; 里的数据以 &lt;code&gt;Volume&lt;&#x2F;code&gt; 的方式挂载到容器里。这样，这个 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用就可以访问数据库了。&lt;&#x2F;p&gt;
&lt;p&gt;除了应用与应用之间的关系外，应用运行的形态是影响 &lt;strong&gt;如何容器化这个应用&lt;&#x2F;strong&gt; 的第二个重要因素。&lt;&#x2F;p&gt;
&lt;p&gt;为此，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 定义了新的、基于 &lt;code&gt;Pod&lt;&#x2F;code&gt; 改进后的对象。比如 &lt;code&gt;Job&lt;&#x2F;code&gt;，用来描述一次性运行的 &lt;code&gt;Pod&lt;&#x2F;code&gt;(比如，大数据任务): 再比如 &lt;code&gt;DaemonSet&lt;&#x2F;code&gt;，用来描述每个宿主机上必须且只能运行一个副本的守护进程服务: 又比如 &lt;code&gt;CronJob&lt;&#x2F;code&gt;，则用于描述定时任务等等。&lt;&#x2F;p&gt;
&lt;p&gt;如此种种，正是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目定义容器间关系和形态的主要方法。&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目并没有像其他项目那样，为每一个管理功能创建一个指令，然后在项目中实现其中的逻辑。这种做法，的确可以解决当前的问题，但是在更多的问题来临之后，往往会力不从心。&lt;&#x2F;p&gt;
&lt;p&gt;相比之下，在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中，我们所推崇的使用方法是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;首先，通过一个 &lt;strong&gt;编排对象&lt;&#x2F;strong&gt;，比如 &lt;code&gt;Pod&lt;&#x2F;code&gt;、&lt;code&gt;Job&lt;&#x2F;code&gt;、&lt;code&gt;CronJob&lt;&#x2F;code&gt; 等，来描述你试图管理的应用；&lt;&#x2F;li&gt;
&lt;li&gt;然后，再为它定义一些“服务对象”，比如 &lt;code&gt;Service&lt;&#x2F;code&gt;、&lt;code&gt;Secret&lt;&#x2F;code&gt;、&lt;code&gt;Horizontal Pod Autoscaler&lt;&#x2F;code&gt;(自动水平扩展器)等。这些对象，会负责具体的平台级功能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这种使用方法，就是所谓的 &lt;strong&gt;声明式 API&lt;&#x2F;strong&gt; 。这种 &lt;code&gt;API&lt;&#x2F;code&gt; 对应的 &lt;strong&gt;编排对象&lt;&#x2F;strong&gt; 和 &lt;strong&gt;服务对象&lt;&#x2F;strong&gt;，都是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中的 &lt;code&gt;API&lt;&#x2F;code&gt; 对象&lt;code&gt;(API Object)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;这就是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 最核心的设计理念，也是接下来我会重点剖析的关键技术点。&lt;&#x2F;p&gt;
&lt;p&gt;最后，我来回答一个更直接的问题: &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目如何启动一个容器化任务呢？&lt;&#x2F;p&gt;
&lt;p&gt;比如，我现在已经制作好了一个 &lt;code&gt;Nginx&lt;&#x2F;code&gt; 容器镜像，希望让平台帮我启动这个镜像。并且，我要求平台帮我运行两个完全相同的 &lt;code&gt;Nginx&lt;&#x2F;code&gt; 副本，以负载均衡的方式共同对外提供服务。&lt;&#x2F;p&gt;
&lt;p&gt;如果是自己 &lt;code&gt;DIY&lt;&#x2F;code&gt; 的话，可能需要启动两台虚拟机，分别安装两个 &lt;code&gt;Nginx&lt;&#x2F;code&gt;，然后使用 &lt;code&gt;keepalived&lt;&#x2F;code&gt; 为这两个虚拟机做一个虚拟 &lt;code&gt;IP&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;而如果使用 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目呢？你需要做的则是编写如下这样一个 &lt;code&gt;YAML&lt;&#x2F;code&gt; 文件(比如名叫 nginx-deployment.yaml):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx:1.7.9
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上面这个 &lt;code&gt;YAML&lt;&#x2F;code&gt; 文件中，我们定义了一个 &lt;code&gt;Deployment&lt;&#x2F;code&gt; 对象，它的主体部分 &lt;code&gt;(spec.template 部分)&lt;&#x2F;code&gt; 是一个使用 &lt;code&gt;Nginx&lt;&#x2F;code&gt; 镜像的 &lt;code&gt;Pod&lt;&#x2F;code&gt;，而这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的副本数是 2(replicas=2)。&lt;&#x2F;p&gt;
&lt;p&gt;然后执行:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; nginx-deployment.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样，两个完全相同的 &lt;code&gt;Nginx&lt;&#x2F;code&gt; 容器副本就被启动了。&lt;&#x2F;p&gt;
&lt;p&gt;不过，这么看来，做同样一件事情，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 用户要做的工作也不少嘛。&lt;&#x2F;p&gt;
&lt;p&gt;别急，在后续的讲解中，我会陆续介绍 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目这种 &lt;strong&gt;声明式 API&lt;&#x2F;strong&gt; 的种种好处，以及基于它实现的强大的编排能力。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目的本质，是为用户提供一个具有普遍意义的容器编排工具。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-yue-du&quot;&gt;参考阅读&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;malteschwarzkopf.de&#x2F;research&#x2F;assets&#x2F;google-stack.pdf&quot;&gt;The Google Stack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CPU 平均工作负载</title>
		<published>2020-08-22T22:48:39+00:00</published>
		<updated>2020-08-22T22:48:39+00:00</updated>
		<link href="https://blog.kiyoko.io/load-average/" type="text/html"/>
		<id>https://blog.kiyoko.io/load-average/</id>
		<content type="html">&lt;p&gt;当程序的性能未达到预期时，大多数开发者会选择使用 &lt;code&gt;top&lt;&#x2F;code&gt; 指令查看指标 &lt;code&gt;CPU&lt;&#x2F;code&gt; 使用率。其实，还有另一个有关 &lt;code&gt;CPU&lt;&#x2F;code&gt; 的重要指标: 平均负责 &lt;code&gt;(load average)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;可以使用 &lt;code&gt;top&lt;&#x2F;code&gt; 指令，或者 &lt;code&gt;uptime&lt;&#x2F;code&gt; 指令查看:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt; - 23:11:02 up 19 days, 12:05,  1 user,  load average: 1.25, 1.42, 1.29
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tasks:&lt;&#x2F;span&gt;&lt;span&gt; 258 total,   2 running, 197 sleeping,   0 stopped,   0 zombie
&lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cpu&lt;&#x2F;span&gt;&lt;span&gt;(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;  9.1 us,  6.8 sy,  0.3 ni, 78.1 id,  5.2 wa,  0.0 hi,  0.5 si,  0.0 st
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;KiB&lt;&#x2F;span&gt;&lt;span&gt; Mem : 15871204 total,   508880 free,  1675924 used, 13686400 buff&#x2F;cache
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;KiB&lt;&#x2F;span&gt;&lt;span&gt; Swap:  2097148 total,  2096112 free,     1036 used. 14133480 avail Mem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PID&lt;&#x2F;span&gt;&lt;span&gt; USER      PR  NI    VIRT    RES    SHR S  %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MEM&lt;&#x2F;span&gt;&lt;span&gt;     TIME+ COMMAND
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4812&lt;&#x2F;span&gt;&lt;span&gt; root      20   0  271208 155208  36668 S  14.6  1.0   1078:57 rancher
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; uptime
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;23:10:12&lt;&#x2F;span&gt;&lt;span&gt; up 19 days, 12:05,  1 user,  load average: 1.65, 1.50, 1.31
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以发现，&lt;code&gt;uptime&lt;&#x2F;code&gt; 指令的输出与 &lt;code&gt;top&lt;&#x2F;code&gt; 指令输出的第一行几乎一致。具体每一部分的含义为:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;当前时间&lt;&#x2F;strong&gt;: 23:10:12&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;运行时间&lt;&#x2F;strong&gt;: up 19 days, 12:05&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;登录用户数量&lt;&#x2F;strong&gt;: 1 user&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;平均负载&lt;&#x2F;strong&gt;: 过去 &lt;strong&gt;1min&lt;&#x2F;strong&gt;，&lt;strong&gt;3min&lt;&#x2F;strong&gt;，&lt;strong&gt;5min&lt;&#x2F;strong&gt; 的平均负载&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;shi-yao-shi-ping-jun-fu-zai&quot;&gt;什么是平均负载&lt;&#x2F;h2&gt;
&lt;p&gt;首先，需要强调:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;平均负载不等于 &lt;code&gt;CPU&lt;&#x2F;code&gt; 使用率！！！&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;平均负载不等于 &lt;code&gt;CPU&lt;&#x2F;code&gt; 使用率！！！&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;平均负载不等于 &lt;code&gt;CPU&lt;&#x2F;code&gt; 使用率！！！&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;而是，系统处于 &lt;strong&gt;可运行状态&lt;&#x2F;strong&gt; 和 &lt;strong&gt;不可中断状态&lt;&#x2F;strong&gt; 的平均进程数，即 &lt;strong&gt;平均活跃进程数&lt;&#x2F;strong&gt;。与 &lt;code&gt;CPU&lt;&#x2F;code&gt; 使用率没有直接关系。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可运行状态&lt;&#x2F;strong&gt;: 正在使用 &lt;code&gt;CPU&lt;&#x2F;code&gt; 或者正在等待 &lt;code&gt;CPU&lt;&#x2F;code&gt; 的进程。即 &lt;code&gt;ps&lt;&#x2F;code&gt; 指令显示为 &lt;code&gt;R&lt;&#x2F;code&gt; 状态 &lt;code&gt;(Running&#x2F;Runable)&lt;&#x2F;code&gt; 的进程。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;不可中断状态&lt;&#x2F;strong&gt;: 处于内核态关键流程中的进程，且不可打断。比如最常见的是等待硬件设备的 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 响应，即 &lt;code&gt;ps&lt;&#x2F;code&gt; 指令中中看到的 &lt;code&gt;D&lt;&#x2F;code&gt; 状态 &lt;code&gt;(Uninterruptible Sleep&#x2F;Disk Sleep)&lt;&#x2F;code&gt; 的进程。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;比如，当一个进程向磁盘读写数据时，为了保证数据的一致性，在得到磁盘回复前，它是不能被其他 &lt;strong&gt;进程&lt;&#x2F;strong&gt; 或者 &lt;strong&gt;中断&lt;&#x2F;strong&gt; 打断的，这个时候的进程就处于不可中断状态。如果此时的进程被打断了，就容易出现磁盘数据与进程数据不一致的问题。&lt;&#x2F;p&gt;
&lt;p&gt;所以，&lt;strong&gt;不可中断状态实际上是系统对进程和硬件设备的一种保护机制&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ping-gu-ping-jun-fu-zai&quot;&gt;评估平均负载&lt;&#x2F;h2&gt;
&lt;p&gt;可以简单的认为，平均负载就是活跃的进程数。所以，最理想的场景是每个 &lt;code&gt;CPU&lt;&#x2F;code&gt; 都只需要处理一个进程，即 &lt;code&gt;CPU&lt;&#x2F;code&gt; 数量等于平均负载值。&lt;&#x2F;p&gt;
&lt;p&gt;因此，在分析系统平均负载是否合理时，首先应该知道当前系统的 &lt;code&gt;CPU&lt;&#x2F;code&gt; 数量。&lt;&#x2F;p&gt;
&lt;p&gt;平均负载可以简单的认为是活跃进程数:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;proc&#x2F;cpuinfo | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -i &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;model name&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wc -l
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;16
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;之后，就可以通过比较 &lt;code&gt;CPU&lt;&#x2F;code&gt; 的数量与平均负载大小关系，确认系统是否过载。&lt;&#x2F;p&gt;
&lt;p&gt;同时，结合过去 &lt;code&gt;1min&lt;&#x2F;code&gt;，&lt;code&gt;5min&lt;&#x2F;code&gt;，&lt;code&gt;15min&lt;&#x2F;code&gt; 的系统负载，就可以推测出系统负载的变化趋势。&lt;&#x2F;p&gt;
&lt;p&gt;当平均负载超过 &lt;code&gt;CPU&lt;&#x2F;code&gt; &lt;code&gt;50%&lt;&#x2F;code&gt; 时，可以认为负载较高；当超过 &lt;code&gt;70%&lt;&#x2F;code&gt; 时，就应该开发分析导致高负载的原因。同时，也应该将平均负载作为一项监控指标。只有结合历史数据来分析才更有意义。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ping-jun-fu-zai-yu-cpu-shi-yong-lu&quot;&gt;平均负载与 CPU 使用率&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;平均负载&lt;&#x2F;strong&gt; 表示为一定时间内，处于 &lt;strong&gt;可运行状态&lt;&#x2F;strong&gt; 和 &lt;strong&gt;不可中断状态&lt;&#x2F;strong&gt; 的进程数量。核心在于 &lt;strong&gt;进程数量&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;R&lt;&#x2F;code&gt; 状态: 运行状态，会使用到 &lt;code&gt;CPU&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;D&lt;&#x2F;code&gt; 状态: 不可中断状态，处于内核态等待 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 响应，不使用 &lt;code&gt;CPU&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CPU&lt;&#x2F;code&gt; 使用率&lt;&#x2F;strong&gt; 表示为一定时间内 &lt;code&gt;CPU&lt;&#x2F;code&gt; 的繁忙情况。核心在于进程占用 &lt;code&gt;CPU&lt;&#x2F;code&gt; 的时间占总时间的百分比。&lt;&#x2F;p&gt;
&lt;p&gt;因此，应该将二者结合一起使用:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CPU&lt;&#x2F;code&gt; 密集型进程，使用大量 &lt;code&gt;CPU&lt;&#x2F;code&gt; 会导致平均负载升高，此时这两者是一致的&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 密集型进程，等待 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 会导致平均负载升高，但 &lt;code&gt;CPU&lt;&#x2F;code&gt; 使用率不一定很高&lt;&#x2F;li&gt;
&lt;li&gt;大量等待 &lt;code&gt;CPU&lt;&#x2F;code&gt; 的进程调度也会导致平均负载升高，此时的 &lt;code&gt;CPU&lt;&#x2F;code&gt; 使用率也会比较高。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;an-li-fen-xi&quot;&gt;案例分析&lt;&#x2F;h2&gt;
&lt;p&gt;系统初始状态为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; uptime
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;16:39:57&lt;&#x2F;span&gt;&lt;span&gt; up 1 day,  2:52,  0 users,  load average: 0.10, 0.05, 0.06
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;an-zhuang-gong-ju&quot;&gt;安装工具&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; pacman&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -S&lt;&#x2F;span&gt;&lt;span&gt; stress sysstat
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cpu-mi-ji-xing&quot;&gt;CPU 密集型&lt;&#x2F;h3&gt;
&lt;p&gt;首先，在 &lt;code&gt;Terminal No.1&lt;&#x2F;code&gt; 使用 &lt;code&gt;stress&lt;&#x2F;code&gt; 模拟一个 &lt;code&gt;CPU&lt;&#x2F;code&gt; 密集型进程:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; stress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --cpu&lt;&#x2F;span&gt;&lt;span&gt; 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --timeout&lt;&#x2F;span&gt;&lt;span&gt; 6000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stress:&lt;&#x2F;span&gt;&lt;span&gt; info: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;5049&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; dispatching hogs: 1 cpu, 0 io, 0 vm, 0 hdd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后，在 &lt;code&gt;Terminal No.2&lt;&#x2F;code&gt; 查看平均负载:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; watch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; uptime
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Every&lt;&#x2F;span&gt;&lt;span&gt; 2.0s: uptime                zephyrus: Sun Aug 23 16:44:30 2020
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;16:44:30&lt;&#x2F;span&gt;&lt;span&gt; up 1 day,  2:56,  0 users,  load average: 0.99, 0.62, 0.30
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以观察到，&lt;code&gt;1min&lt;&#x2F;code&gt; 的平均负载有较大的变化。&lt;&#x2F;p&gt;
&lt;p&gt;接着，在 &lt;code&gt;Terminal No.3&lt;&#x2F;code&gt; 监控 &lt;code&gt;CPU&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mpstat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -P&lt;&#x2F;span&gt;&lt;span&gt; ALL 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; 4.19.104-microsoft-standard (zephyrus)    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;08&#x2F;23&#x2F;2020&lt;&#x2F;span&gt;&lt;span&gt;      _x86_64_        (16 CPU)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:44:59&lt;&#x2F;span&gt;&lt;span&gt; PM  CPU    %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usr   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nice    &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sys &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iowait    &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;irq   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;soft  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steal  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guest  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gnice   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idle
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM  all    6.29    0.00    0.06    0.00    0.00    0.08    0.00    0.00    0.00   93.57
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM    0    0.00    0.00    0.00    0.00    0.00    1.19    0.00    0.00    0.00   98.81
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM    1  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM    2    0.00    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00   99.80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM    3    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM    4    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM    5    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM    6    0.00    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00   99.80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM    7    0.40    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.60
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM    8    0.00    0.00    0.40    0.00    0.00    0.00    0.00    0.00    0.00   99.60
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM    9    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM   10    0.20    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   99.80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM   11    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM   12    0.00    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00   99.80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM   13    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM   14    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:45:04&lt;&#x2F;span&gt;&lt;span&gt; PM   15    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;#1 CPU&lt;&#x2F;code&gt; 的 &lt;code&gt;%usr&lt;&#x2F;code&gt; 使用率为 &lt;code&gt;100。00&lt;&#x2F;code&gt;，而 &lt;code&gt;%sys&lt;&#x2F;code&gt; 与 &lt;code&gt;%iowait&lt;&#x2F;code&gt; 都是 &lt;code&gt;0.00&lt;&#x2F;code&gt;，说明 &lt;code&gt;#1 CPU&lt;&#x2F;code&gt; 正在处理 &lt;code&gt;CPU&lt;&#x2F;code&gt; 密集型的任务。&lt;&#x2F;p&gt;
&lt;p&gt;最后，在 &lt;code&gt;Terminal No.4&lt;&#x2F;code&gt; 中查找占用 &lt;code&gt;CPU&lt;&#x2F;code&gt; 的进程:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pidstat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; 5 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; 4.19.104-microsoft-standard (zephyrus)    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;08&#x2F;23&#x2F;2020&lt;&#x2F;span&gt;&lt;span&gt;      _x86_64_        (16 CPU)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:46:58&lt;&#x2F;span&gt;&lt;span&gt; PM   UID       PID    %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usr &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;system  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guest   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait    &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt;   CPU  Command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:47:03&lt;&#x2F;span&gt;&lt;span&gt; PM   977      5050  100.00    0.00    0.00    0.00  100.00     1  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;04:47:03&lt;&#x2F;span&gt;&lt;span&gt; PM   977      5054    0.00    0.20    0.00    0.00    0.20     4  watch
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      UID       PID    %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usr &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;system  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guest   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait    &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt;   CPU  Command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      5050  100.00    0.00    0.00    0.00  100.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      5054    0.00    0.20    0.00    0.00    0.20     -  watch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;确认 &lt;code&gt;pid=5050&lt;&#x2F;code&gt; 的 &lt;code&gt;stress&lt;&#x2F;code&gt; 进程占用了 &lt;code&gt;100%&lt;&#x2F;code&gt; 的 &lt;code&gt;CPU&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;i-o-mi-ji-xing&quot;&gt;I&#x2F;O 密集型&lt;&#x2F;h3&gt;
&lt;p&gt;等待一段时间，平均负载恢复正常之后。&lt;&#x2F;p&gt;
&lt;p&gt;首先，在 &lt;code&gt;Terminal No.1&lt;&#x2F;code&gt; 使用 &lt;code&gt;stress&lt;&#x2F;code&gt; 模拟一个 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 密集型进程:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; stress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stress:&lt;&#x2F;span&gt;&lt;span&gt; info: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;7126&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; dispatching hogs: 0 cpu, 1 io, 0 vm, 0 hdd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后，在 &lt;code&gt;Terminal No.2&lt;&#x2F;code&gt; 查看平均负载:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; watch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; uptime
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Every&lt;&#x2F;span&gt;&lt;span&gt; 2.0s: uptime                zephyrus: Sun Aug 23 17:11:31 2020
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;17:11:31&lt;&#x2F;span&gt;&lt;span&gt; up 1 day,  3:23,  0 users,  load average: 0.98, 0.60, 0.54
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;1min&lt;&#x2F;code&gt; 的平均负载有所增加。&lt;&#x2F;p&gt;
&lt;p&gt;接着，在 &lt;code&gt;Terminal No.3&lt;&#x2F;code&gt; 监控 &lt;code&gt;CPU&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mpstat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -P&lt;&#x2F;span&gt;&lt;span&gt; ALL 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; 4.19.104-microsoft-standard (zephyrus)    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;08&#x2F;23&#x2F;2020&lt;&#x2F;span&gt;&lt;span&gt;      _x86_64_        (16 CPU)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:53&lt;&#x2F;span&gt;&lt;span&gt; PM  CPU    %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usr   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nice    &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sys &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iowait    &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;irq   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;soft  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steal  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guest  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gnice   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idle
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM  all    0.09    0.00    0.64    0.01    0.00    0.05    0.00    0.00    0.00   99.21
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM    0    0.00    0.00    0.20    0.00    0.00    0.20    0.00    0.00    0.00   99.59
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM    2    0.20    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00   99.60
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM    3    0.00    0.00    6.76    0.20    0.00    0.00    0.00    0.00    0.00   93.04
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM    4    0.00    0.00    0.43    0.00    0.00    0.65    0.00    0.00    0.00   98.92
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM    5    0.00    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00   99.80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM    6    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM    7    1.00    0.00    1.40    0.00    0.00    0.00    0.00    0.00    0.00   97.60
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM    8    0.00    0.00    0.40    0.00    0.00    0.00    0.00    0.00    0.00   99.60
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM    9    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM   10    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM   11    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM   12    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM   13    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM   14    0.00    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00   99.80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:11:58&lt;&#x2F;span&gt;&lt;span&gt; PM   15    0.20    0.00    0.40    0.00    0.00    0.00    0.00    0.00    0.00   99.40
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;很遗憾，相比于 &lt;code&gt;CPU&lt;&#x2F;code&gt; 密集型的测试，&lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 本次测试的 &lt;code&gt;CPU&lt;&#x2F;code&gt; 变化不是特别明显。不过，还是可以发现 &lt;code&gt;#3 CPU&lt;&#x2F;code&gt; 的数据与其他 &lt;code&gt;CPU&lt;&#x2F;code&gt; 有一定的差别。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;%idle&lt;&#x2F;code&gt; 为 &lt;code&gt;93.04&lt;&#x2F;code&gt;，而其他的 &lt;code&gt;CPU&lt;&#x2F;code&gt; 该项数值均处于较高的水平&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;%sys&lt;&#x2F;code&gt; 为 &lt;code&gt;6.76&lt;&#x2F;code&gt;，远高于其他 &lt;code&gt;CPU&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;%iowait&lt;&#x2F;code&gt; 为 &lt;code&gt;0.20&lt;&#x2F;code&gt;，相对于其他 &lt;code&gt;CPU&lt;&#x2F;code&gt; 最高只有 &lt;code&gt;0.01&lt;&#x2F;code&gt;，可谓是高出了 &lt;code&gt;2000%&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;最后，使用 &lt;code&gt;pidstat&lt;&#x2F;code&gt; 查找具体进程:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pidstat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; 5 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; 4.19.104-microsoft-standard (zephyrus)    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;08&#x2F;23&#x2F;2020&lt;&#x2F;span&gt;&lt;span&gt;      _x86_64_        (16 CPU)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:13:36&lt;&#x2F;span&gt;&lt;span&gt; PM   UID       PID    %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usr &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;system  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guest   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait    &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt;   CPU  Command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:13:41&lt;&#x2F;span&gt;&lt;span&gt; PM   977      3196    0.20    0.00    0.00    0.00    0.20     7  node
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:13:41&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7127    0.00   15.00    0.00    0.20   15.00     3  stress
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      UID       PID    %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usr &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;system  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guest   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait    &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt;   CPU  Command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      3196    0.20    0.00    0.00    0.00    0.20     -  node
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7127    0.00   15.00    0.00    0.20   15.00     -  stress
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;发现 &lt;code&gt;stress&lt;&#x2F;code&gt; 进程的指标为 &lt;code&gt;%system = 15.00&lt;&#x2F;code&gt;，&lt;code&gt;%wait = 0.20&lt;&#x2F;code&gt;，&lt;code&gt;%CPU = 15.00&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;da-liang-jin-cheng&quot;&gt;大量进程&lt;&#x2F;h3&gt;
&lt;p&gt;因为，测试机有 16 个 &lt;code&gt;CPU&lt;&#x2F;code&gt; 核心，所以，在 &lt;code&gt;Terminal 1&lt;&#x2F;code&gt; 上模拟 &lt;code&gt;64&lt;&#x2F;code&gt; 个进程:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; stress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -c&lt;&#x2F;span&gt;&lt;span&gt; 64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --timeout&lt;&#x2F;span&gt;&lt;span&gt; 6000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stress:&lt;&#x2F;span&gt;&lt;span&gt; info: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;7847&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; dispatching hogs: 64 cpu, 0 io, 0 vm, 0 hdd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后，在 &lt;code&gt;Terminal 2&lt;&#x2F;code&gt; 上查看平均负载:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; watch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; uptime
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Every&lt;&#x2F;span&gt;&lt;span&gt; 2.0s: uptime                      zephyrus: Sun Aug 23 17:32:28 2020
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;17:32:28&lt;&#x2F;span&gt;&lt;span&gt; up 1 day,  3:44,  0 users,  load average: 62.89, 35.44, 14.80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接着，在 &lt;code&gt;Terminal 3&lt;&#x2F;code&gt; 查看 &lt;code&gt;CPU&lt;&#x2F;code&gt; 的状态:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mpstat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -P&lt;&#x2F;span&gt;&lt;span&gt; ALL 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; 4.19.104-microsoft-standard (zephyrus)    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;08&#x2F;23&#x2F;2020&lt;&#x2F;span&gt;&lt;span&gt;      _x86_64_        (16 CPU)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:42&lt;&#x2F;span&gt;&lt;span&gt; PM  CPU    %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usr   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nice    &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sys &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iowait    &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;irq   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;soft  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steal  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guest  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gnice   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idle
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM  all   99.92    0.00    0.07    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM    0   99.80    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM    1  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM    2  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM    3   99.80    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM    4  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM    5  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM    6   99.60    0.00    0.40    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM    7  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM    8  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM    9  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM   10  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM   11  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM   12   99.80    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM   13  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM   14   99.80    0.00    0.20    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:31:47&lt;&#x2F;span&gt;&lt;span&gt; PM   15  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所有的 &lt;code&gt;CPU&lt;&#x2F;code&gt; 都处于满负载工作状态，除了 &lt;code&gt;%usr&lt;&#x2F;code&gt; 之外，只有 &lt;code&gt;%sys&lt;&#x2F;code&gt; 有少量数值。&lt;&#x2F;p&gt;
&lt;p&gt;最后，在 &lt;code&gt;Terminal 4&lt;&#x2F;code&gt; 查看进程状态:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pidstat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; 5 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; 4.19.104-microsoft-standard (zephyrus)    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;08&#x2F;23&#x2F;2020&lt;&#x2F;span&gt;&lt;span&gt;      _x86_64_        (16 CPU)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:00&lt;&#x2F;span&gt;&lt;span&gt; PM   UID       PID    %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usr &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;system  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guest   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait    &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt;   CPU  Command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7848   25.00    0.00    0.00   75.00   25.00     4  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7849   25.00    0.00    0.00   74.60   25.00     3  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7850   25.00    0.00    0.00   74.40   25.00     9  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7851   25.00    0.00    0.00   75.00   25.00    13  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7852   25.00    0.00    0.00   75.20   25.00    15  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7853   24.80    0.00    0.00   75.20   24.80     6  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7854   24.80    0.20    0.00   75.40   25.00     0  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7855   25.00    0.00    0.00   74.80   25.00     4  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7856   25.00    0.00    0.00   75.20   25.00     6  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7857   25.20    0.00    0.00   75.20   25.20     9  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7858   25.00    0.00    0.00   75.00   25.00    10  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7859   25.00    0.00    0.00   75.00   25.00    13  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7860   25.00    0.00    0.00   75.00   25.00    15  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7861   25.00    0.00    0.00   75.00   25.00     1  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7863   25.00    0.00    0.00   75.00   25.00     5  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7864   25.00    0.00    0.00   75.40   25.00     7  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7865   25.00    0.00    0.00   75.00   25.00     3  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7866   25.00    0.00    0.00   75.00   25.00    11  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7867   24.80    0.00    0.00   75.00   24.80     2  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7868   24.80    0.00    0.00   75.00   24.80    14  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7869   25.00    0.00    0.00   74.80   25.00     0  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7870   25.00    0.00    0.00   75.00   25.00     5  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7871   25.00    0.00    0.00   74.40   25.00     6  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7872   25.00    0.00    0.00   75.20   25.00     9  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7873   24.80    0.00    0.00   75.40   24.80    10  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7874   25.00    0.00    0.00   75.40   25.00    12  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7875   25.00    0.00    0.00   75.00   25.00    15  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7876   25.00    0.00    0.00   75.00   25.00     1  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7877   24.60    0.20    0.00   75.00   24.80     2  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7878   25.00    0.00    0.00   75.40   25.00     7  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7879   24.80    0.00    0.00   75.60   24.80     8  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7880   25.00    0.00    0.00   75.00   25.00    11  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7881   25.00    0.00    0.00   75.00   25.00    12  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7882   25.00    0.00    0.00   75.80   25.00    14  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7883   25.20    0.00    0.00   74.80   25.20     1  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7884   25.00    0.00    0.00   75.00   25.00     4  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7885   25.00    0.00    0.00   75.20   25.00     6  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7886   25.00    0.00    0.00   74.80   25.00     8  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7887   25.00    0.00    0.00   75.40   25.00    11  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7888   25.20    0.00    0.00   74.80   25.20    12  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7889   24.80    0.00    0.00   75.20   24.80     2  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7890   24.80    0.00    0.00   75.20   24.80     0  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7891   25.00    0.00    0.00   74.80   25.00     5  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7892   25.00    0.00    0.00   75.40   25.00     3  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7893   25.00    0.00    0.00   74.80   25.00     8  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7894   25.20    0.00    0.00   74.60   25.20    10  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7895   25.00    0.00    0.00   75.20   25.00    13  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7896   25.00    0.00    0.00   75.00   25.00    14  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7897   24.80    0.00    0.00   75.60   24.80     2  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7898   25.00    0.00    0.00   74.80   25.00     7  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7899   24.80    0.00    0.00   75.20   24.80     8  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7900   25.00    0.00    0.00   74.80   25.00    10  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7901   25.00    0.00    0.00   74.80   25.00    13  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7902   24.80    0.00    0.00   74.80   24.80    14  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7903   24.80    0.00    0.00   75.20   24.80     1  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7904   25.00    0.00    0.00   74.80   25.00     3  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7905   24.80    0.00    0.00   75.00   24.80     4  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7906   25.00    0.00    0.00   75.00   25.00     7  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7907   24.80    0.00    0.00   75.00   24.80     9  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7908   25.00    0.00    0.00   74.40   25.00    11  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7909   25.00    0.00    0.00   75.20   25.00    12  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7910   25.00    0.00    0.00   75.00   25.00    15  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7911   25.00    0.00    0.00   74.80   25.00     0  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;05:33:05&lt;&#x2F;span&gt;&lt;span&gt; PM   977      7912   25.00    0.00    0.00   75.20   25.00     5  stress
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      UID       PID    %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usr &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;system  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guest   &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait    &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt;   CPU  Command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7848   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7849   25.00    0.00    0.00   74.60   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7850   25.00    0.00    0.00   74.40   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7851   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7852   25.00    0.00    0.00   75.20   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7853   24.80    0.00    0.00   75.20   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7854   24.80    0.20    0.00   75.40   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7855   25.00    0.00    0.00   74.80   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7856   25.00    0.00    0.00   75.20   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7857   25.20    0.00    0.00   75.20   25.20     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7858   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7859   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7860   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7861   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7863   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7864   25.00    0.00    0.00   75.40   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7865   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7866   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7867   24.80    0.00    0.00   75.00   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7868   24.80    0.00    0.00   75.00   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7869   25.00    0.00    0.00   74.80   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7870   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7871   25.00    0.00    0.00   74.40   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7872   25.00    0.00    0.00   75.20   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7873   24.80    0.00    0.00   75.40   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7874   25.00    0.00    0.00   75.40   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7875   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7876   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7877   24.60    0.20    0.00   75.00   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7878   25.00    0.00    0.00   75.40   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7879   24.80    0.00    0.00   75.60   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7880   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7881   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7882   25.00    0.00    0.00   75.80   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7883   25.20    0.00    0.00   74.80   25.20     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7884   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7885   25.00    0.00    0.00   75.20   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7886   25.00    0.00    0.00   74.80   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7887   25.00    0.00    0.00   75.40   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7888   25.20    0.00    0.00   74.80   25.20     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7889   24.80    0.00    0.00   75.20   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7890   24.80    0.00    0.00   75.20   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7891   25.00    0.00    0.00   74.80   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7892   25.00    0.00    0.00   75.40   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7893   25.00    0.00    0.00   74.80   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7894   25.20    0.00    0.00   74.60   25.20     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7895   25.00    0.00    0.00   75.20   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7896   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7897   24.80    0.00    0.00   75.60   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7898   25.00    0.00    0.00   74.80   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7899   24.80    0.00    0.00   75.20   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7900   25.00    0.00    0.00   74.80   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7901   25.00    0.00    0.00   74.80   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7902   24.80    0.00    0.00   74.80   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7903   24.80    0.00    0.00   75.20   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7904   25.00    0.00    0.00   74.80   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7905   24.80    0.00    0.00   75.00   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7906   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7907   24.80    0.00    0.00   75.00   24.80     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7908   25.00    0.00    0.00   74.40   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7909   25.00    0.00    0.00   75.20   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7910   25.00    0.00    0.00   75.00   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7911   25.00    0.00    0.00   74.80   25.00     -  stress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Average:&lt;&#x2F;span&gt;&lt;span&gt;      977      7912   25.00    0.00    0.00   75.20   25.00     -  stress
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;64 个进程，基本都占用了 &lt;code&gt;25%&lt;&#x2F;code&gt; 的 &lt;code&gt;CPU&lt;&#x2F;code&gt; 使用率。与设想中的一致，每个 &lt;code&gt;CPU&lt;&#x2F;code&gt; 核心要服务于 4 个进程。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-yue-du&quot;&gt;参考阅读&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jingwei.link&#x2F;2018&#x2F;12&#x2F;23&#x2F;linux-cpu-load-d-process.html&quot;&gt;Linux的CPU-Load虚高之进程的D状态&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;gatsby123&#x2F;p&#x2F;11127158.html&quot;&gt;CPU使用率原理及计算方式&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;xiaotengyi&#x2F;p&#x2F;7644336.html&quot;&gt;Linux 进程的 Uninterruptible sleep(D) 状态&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;blog.csdn.net&#x2F;wudebao5220150&#x2F;article&#x2F;details&#x2F;12919453&quot;&gt;Linux进程状态解析&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Linux 性能调优指南</title>
		<published>2020-08-22T22:38:13+00:00</published>
		<updated>2020-08-22T22:38:13+00:00</updated>
		<link href="https://blog.kiyoko.io/linux-performance-guide/" type="text/html"/>
		<id>https://blog.kiyoko.io/linux-performance-guide/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;linux-performance&#x2F;01-guide&#x2F;01-performance-tools.png&quot; alt=&quot;01&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;linux-performance&#x2F;01-guide&#x2F;02-mind.png&quot; alt=&quot;02&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>容器 - 深入理解镜像</title>
		<published>2020-08-20T09:50:18+00:00</published>
		<updated>2020-08-20T09:50:18+00:00</updated>
		<link href="https://blog.kiyoko.io/docker-image/" type="text/html"/>
		<id>https://blog.kiyoko.io/docker-image/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;Namespace&lt;&#x2F;code&gt; 与 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 技术是容器技术的核心点，但 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目的成功关键点却要归功于 &lt;code&gt;Docker Image&lt;&#x2F;code&gt; 的发明。在 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 时代，&lt;strong&gt;上云&lt;&#x2F;strong&gt; 的过程需要经过多次 &lt;strong&gt;玄学调参&lt;&#x2F;strong&gt; 才能解决由于本地环境与云主机的差异性所导致的问题。&lt;code&gt;Docker&lt;&#x2F;code&gt; 则通过 &lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 与 &lt;code&gt;UnionFS&lt;&#x2F;code&gt; 技术，成功的解决了这个问题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mount-namespace&quot;&gt;Mount Namespace&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; man mount_namespace
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MOUNT_NAMESPACES&lt;&#x2F;span&gt;&lt;span&gt;(7)                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; Programmer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s Manual                 MOUNT_NAMESPACES(7)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NAME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       mount_namespaces - overview of Linux mount namespaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DESCRIPTION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       For an overview of namespaces, see namespaces(7).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       Mount namespaces provide isolation of the list of mount points seen by the processes in each
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       namespace instance. Thus, the processes in each of the mount namespace instances will see
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       distinct single-directory hierarchies.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       The views provided by the &#x2F;proc&#x2F;[pid]&#x2F;mounts, &#x2F;proc&#x2F;[pid]&#x2F;mountinfo, and &#x2F;proc&#x2F;[pid]&#x2F;mountstats
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       files (all described in proc(5)) correspond to the mount namespace in which the process with
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       the PID [pid] resides. (All of the processes that reside in the same mount namespace will see
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       the same view in these files.)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       A new mount namespace is created using either clone(2) or unshare(2) with the CLONE_NEWNS flag.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       When a new mount namespace is created, its mount point list is initialized as follows:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       * If the namespace is created using clone(2), the mount point list of the child&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;s namespace is
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt; copy of the mount point list in the parent&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s namespace.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       * If the namespace is created using unshare(2), the mount point list of the new namespace is a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         copy of the mount point list in the caller&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;s previous mount namespace.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Subsequent&lt;&#x2F;span&gt;&lt;span&gt; modifications to the mount point list (mount(2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt; umount(2)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; either mount
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt; will not (by default) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;affect&lt;&#x2F;span&gt;&lt;span&gt; the mount point list seen in the other namespace (but
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;see&lt;&#x2F;span&gt;&lt;span&gt; the following discussion of shared subtrees)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;简单来说，&lt;code&gt;Mount Namepace&lt;&#x2F;code&gt; 为进程提供独立的文件系统视图，即可以将进程的文件系统挂载到指定挂载点，从而是进程只能看到 &lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 中的文件系统。&lt;&#x2F;p&gt;
&lt;p&gt;接下来，还是通过代码展示。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mount-namespace-kai-fa&quot;&gt;Mount Namespace 开发&lt;&#x2F;h3&gt;
&lt;p&gt;下面的代码，使用 &lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 的方式通过 &lt;code&gt;clone(2)&lt;&#x2F;code&gt; 系统调用，创建一个新的进程。在该进程中执行 &lt;code&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;code&gt; 程序。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;_GNU_SOURCE
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;mount.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;types.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;wait.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sched.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;signal.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unistd.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;STACK_SIZE (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static char&lt;&#x2F;span&gt;&lt;span&gt; container_stack[STACK_SIZE];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; container_args[] = {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        NULL
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;container_main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Container - inside the container!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execv&lt;&#x2F;span&gt;&lt;span&gt;(container_args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], container_args);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Something&amp;#39;s wrong!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Parent - start a container!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; container_pid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(container_main, container_stack + STACK_SIZE, CLONE_NEWNS | SIGCHLD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(container_pid &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to create a new process&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waitpid&lt;&#x2F;span&gt;&lt;span&gt;(container_pid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Parent - container stopped!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;编译并运行程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; gcc main.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; mn; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;mn
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Parent&lt;&#x2F;span&gt;&lt;span&gt; - start a container!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt; - inside the container!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[root@zephyrus&lt;&#x2F;span&gt;&lt;span&gt; 01-mount-namespace]#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如此，就成功的进入到了容器环境内。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;注意&lt;&#x2F;em&gt;: 是要使用 &lt;code&gt;root&lt;&#x2F;code&gt; 权限执行这个程序。&lt;&#x2F;p&gt;
&lt;p&gt;然后，在容器内执行 &lt;code&gt;df -h&lt;&#x2F;code&gt; 指令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[root@zephyrus&lt;&#x2F;span&gt;&lt;span&gt; 01-mount-namespace]# df&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Filesystem&lt;&#x2F;span&gt;&lt;span&gt;      Size  Used Avail Use% Mounted on
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;dev&#x2F;sdd&lt;&#x2F;span&gt;&lt;span&gt;        251G   39G  200G  17% &#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tools&lt;&#x2F;span&gt;&lt;span&gt;           931G  362G  570G  39% &#x2F;init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G     0  2.0G   0% &#x2F;dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tmpfs&lt;&#x2F;span&gt;&lt;span&gt;           2.0G     0  2.0G   0% &#x2F;sys&#x2F;fs&#x2F;cgroup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G  8.0K  2.0G   1% &#x2F;run
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G     0  2.0G   0% &#x2F;run&#x2F;lock
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G     0  2.0G   0% &#x2F;run&#x2F;shm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G     0  2.0G   0% &#x2F;run&#x2F;user
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tmpfs&lt;&#x2F;span&gt;&lt;span&gt;           2.0G     0  2.0G   0% &#x2F;mnt&#x2F;wsl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;dev&#x2F;sdc&lt;&#x2F;span&gt;&lt;span&gt;        251G   11G  228G   5% &#x2F;mnt&#x2F;wsl&#x2F;docker-desktop-data&#x2F;isocache
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G   12K  2.0G   1% &#x2F;mnt&#x2F;wsl&#x2F;docker-desktop&#x2F;shared-sockets&#x2F;host-services
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;dev&#x2F;sdb&lt;&#x2F;span&gt;&lt;span&gt;        251G  117M  239G   1% &#x2F;mnt&#x2F;wsl&#x2F;docker-desktop&#x2F;docker-desktop-proxy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;dev&#x2F;loop0&lt;&#x2F;span&gt;&lt;span&gt;      231M  231M     0 100% &#x2F;mnt&#x2F;wsl&#x2F;docker-desktop&#x2F;cli-tools
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;C:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span&gt;            931G  362G  570G  39% &#x2F;mnt&#x2F;c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;会发现，解决与在宿主机上执行该命令的结果是相同的。这个结果很不好，甚至可以说很危险。因为，不但容器可以看到宿主机上的文件，甚至于还拥有 &lt;code&gt;root&lt;&#x2F;code&gt; 权限。接下来，尝试通过在容器中设置挂载点的方式解决这个问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mount-namespace-zhi-ding-gua-zai-dian&quot;&gt;Mount Namespace 指定挂载点&lt;&#x2F;h3&gt;
&lt;p&gt;修改 &lt;code&gt;container_main&lt;&#x2F;code&gt; 函数:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;container_main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Container - inside the container!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;tmp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tmpfs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execv&lt;&#x2F;span&gt;&lt;span&gt;(container_args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], container_args);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Something&amp;#39;s wrong!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用 &lt;code&gt;mount(2)&lt;&#x2F;code&gt; 系统调用，在容器进程中，增加一个挂载点。&lt;&#x2F;p&gt;
&lt;p&gt;使用 &lt;code&gt;ls&lt;&#x2F;code&gt; 指令确认 &lt;code&gt;&#x2F;tmp&lt;&#x2F;code&gt; 目录为空目录，说明挂载成功:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ls&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;之后，在确认一下系统的文件系统:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 在原来的文件系统基础之上会多出一个
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[root@zephyrus&lt;&#x2F;span&gt;&lt;span&gt; 01-mount-namespace]# df&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Filesystem&lt;&#x2F;span&gt;&lt;span&gt;      Size  Used Avail Use% Mounted on
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G     0  2.0G   0% &#x2F;tmp
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[root@zephyrus&lt;&#x2F;span&gt;&lt;span&gt; 01-mount-namespace]# mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -l &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; tmpfs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;tmp type tmpfs (rw,relatime)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这些都可以说明，已经成功在容器内挂载了一个文件系统。而且，在宿主机上是无法看到这个挂载点的。到目前为止，一切都是按照预期发展的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mount-namespace-gua-zai-gen-mu-lu&quot;&gt;Mount Namespace 挂载根目录&lt;&#x2F;h3&gt;
&lt;p&gt;既然可以在容器内部挂载 &lt;code&gt;&#x2F;tmp&lt;&#x2F;code&gt;，那么现在来尝试挂载 &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;首先，准备一下必要的环境:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bash&lt;&#x2F;strong&gt;: 作为容器的第一个进程，允许在容器执行其他指令&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ls&lt;&#x2F;strong&gt;: 观察容器内的文件系统是否符合预期&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;lib&lt;&#x2F;strong&gt;: 存放 &lt;code&gt;bash&lt;&#x2F;code&gt; 与 &lt;code&gt;ls&lt;&#x2F;code&gt; 必须的动态链接库&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;}&#x2F;{bin,etc,lib,usr}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp -v&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;bin&#x2F;{bash,ls} ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;}&#x2F;bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp -v&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;profile ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;}&#x2F;etc&#x2F;profile
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ldd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &#x2F;bin&#x2F;ls &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;egrep -o &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;lib.*\.[0-9]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;awk -F &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{print $1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dirname &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp -v &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ldd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &#x2F;bin&#x2F;bash &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;egrep -o &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;lib.*\.[0-9]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;awk -F &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{print $1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dirname &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp -v &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;与上一个实验不同的是，现在期望容器内的文件系统与宿主机独立。即，使用不同的根目录。因此，在代码层面需要将之前的 &lt;code&gt;mount(2)&lt;&#x2F;code&gt; 系统调用，改变为 &lt;code&gt;chroot(2)&lt;&#x2F;code&gt; 系统调用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; man 2 chroot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CHROOT&lt;&#x2F;span&gt;&lt;span&gt;(2)                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; Programmer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s Manual                           CHROOT(2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NAME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       chroot - change root directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SYNOPSIS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       #include &amp;lt;unistd.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       int chroot(const char *path);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DESCRIPTION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       chroot() changes the root directory of the calling process to that specified in path. This
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       directory will be used for pathnames beginning with &#x2F;. The root directory is inherited by
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       all children of the calling process.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       Only a privileged process (Linux: one with the CAP_SYS_CHROOT capability in its user namespace)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       may call chroot().
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最终，函数 &lt;code&gt;container_main&lt;&#x2F;code&gt; 的代码为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;container_main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Container - inside the container!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; rev = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chroot&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;root&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;!= rev) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to chroot&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    rev = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chdir&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;!= rev) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to chdir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    rev = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execv&lt;&#x2F;span&gt;&lt;span&gt;(container_args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], container_args);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;!= rev) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to exec&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Something&amp;#39;s wrong!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;与之前一样，编译并执行程序，即可进入到容器内部:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; gcc main.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; mn; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;mn
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Parent&lt;&#x2F;span&gt;&lt;span&gt; - start a container!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt; - inside the container!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash-4.4#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后，执行 &lt;code&gt;ls&lt;&#x2F;code&gt; 可以看到根目录 &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; 的文件就是之前在 &lt;code&gt;root&lt;&#x2F;code&gt; 目录预先准备好的文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash-4.4#&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span&gt;  etc  lib  lib64  usr
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash-4.4#&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash&lt;&#x2F;span&gt;&lt;span&gt;  ls
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash-4.4#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;综上所述，如果在 &lt;code&gt;root&lt;&#x2F;code&gt; 目录中保存的是一个完成的操作系统，那么，就可以实现容器内的进程就可以使用内部的 &lt;code&gt;&#x2F;bin&lt;&#x2F;code&gt;，&lt;code&gt;&#x2F;lib&lt;&#x2F;code&gt; 的系统环境，从而与宿主机，与其他容器相互隔离的目的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bei-zhu&quot;&gt;备注&lt;&#x2F;h3&gt;
&lt;p&gt;挂载 &lt;code&gt;tmpfs&lt;&#x2F;code&gt; 实验的运行环境为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;os-release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Arch Linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRETTY_NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Arch Linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;arch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BUILD_ID&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rolling
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ANSI_COLOR&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;38;2;23;147;209&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.archlinux.org&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DOCUMENTATION_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SUPPORT_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;bbs.archlinux.org&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BUG_REPORT_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;bugs.archlinux.org&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LOGO&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;archlinux
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4.19.104-microsoft-standard
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;chroot&lt;&#x2F;code&gt; 实验的运行环境为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;os-release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Ubuntu&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18.04.4 LTS (Bionic Beaver)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID_LIKE&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;debian
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRETTY_NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Ubuntu 18.04.4 LTS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION_ID&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18.04&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.ubuntu.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SUPPORT_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;help.ubuntu.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BUG_REPORT_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;bugs.launchpad.net&#x2F;ubuntu&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIVACY_POLICY_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.ubuntu.com&#x2F;legal&#x2F;terms-and-policies&#x2F;privacy-policy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION_CODENAME&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bionic
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UBUNTU_CODENAME&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bionic
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4.15.0-112-generic
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;unionfs&quot;&gt;UnionFS&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 时代，上云过程繁琐的根本原因在于: 本地环境与云主机环境不一致。&lt;&#x2F;p&gt;
&lt;p&gt;在狭义上，软件的依赖指编程时所使用的第三方库；广义上，依赖不止包括编程使用的第三方库，操作系统同样也是软件的依赖。&lt;&#x2F;p&gt;
&lt;p&gt;通过上面对 &lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 技术简单的实验，已经验证了在容器内打包一个完整的操作系统作为容器的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 是可行的。到目前为止，从技术的角度而言，已经解决了容器隔离的问题。但从使用角度，或者说用户体验的角度而言，每次构建一个容器，都要打包一份操作系统文件，似乎实在是不便于使用。&lt;&#x2F;p&gt;
&lt;p&gt;比如，开发者使用 &lt;code&gt;Ubuntu&lt;&#x2F;code&gt; 操作系统的 &lt;code&gt;ISO&lt;&#x2F;code&gt; 制作了一个 &lt;code&gt;rootfs&lt;&#x2F;code&gt;，并依次为基础，安装 &lt;code&gt;Java&lt;&#x2F;code&gt; 环境，进而部署 &lt;code&gt;Java&lt;&#x2F;code&gt; 应用。如果，另一个开发者也有同样的需求，或者同一开发者需要部署另一个 &lt;code&gt;Java&lt;&#x2F;code&gt; 应用，显然，最理想情况是能够复用之前已经安装了 &lt;code&gt;Java&lt;&#x2F;code&gt; 的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 环境，而不是重复一遍流程。&lt;&#x2F;p&gt;
&lt;p&gt;直观的解决办法，构建 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 时，每执行一个有意义的操作之后，都生成一个新的 &lt;code&gt;rootfs&lt;&#x2F;code&gt;。之后，就可以选择一个合适的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 作为基础，添加新的操作构建目标 &lt;code&gt;rootfs&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;但这个方案并不完美，如果每次构建过程都产生一个新的 &lt;code&gt;rootfs&lt;&#x2F;code&gt;，最后将会导致系统内有极其多的 &lt;code&gt;rootfs&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;幸运的是，这个问题并不难解决。将问题一般化，基于既有 &lt;code&gt;A&lt;&#x2F;code&gt;，每一种操作 &lt;code&gt;F&lt;&#x2F;code&gt; 都可以产生唯一结果 &lt;code&gt;B&lt;&#x2F;code&gt;。并且，&lt;code&gt;B&lt;&#x2F;code&gt; 可以作为下一轮的输入。结果发现，这像极了 &lt;code&gt;git&lt;&#x2F;code&gt; 和区块链。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt; 在设计 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像时也是使用了类似的方法。他们引入了层 &lt;code&gt;(layer)&lt;&#x2F;code&gt; 概念。用户制作镜像的每一步操作，都会生成一个层，将 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 从全量保存，改为了增量保存。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-unionfs&quot;&gt;什么是 UnionFS&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像的这种实现方式，依赖于一种叫做 &lt;code&gt;UnionFS&lt;&#x2F;code&gt; 的文件系统。&lt;&#x2F;p&gt;
&lt;p&gt;简单来讲，&lt;a href=&quot;https:&#x2F;&#x2F;de.wikipedia.org&#x2F;wiki&#x2F;UnionFS&quot;&gt;UnionFS&lt;&#x2F;a&gt; 允许将多个设备文件或目录挂载到同一个目录上，将多个设备的内容作为整体对外展示，或者将一个设备文件挂载到一个已有的目录上。&lt;&#x2F;p&gt;
&lt;p&gt;比如，在 &lt;code&gt;Ubuntu 18.04&lt;&#x2F;code&gt; 上:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 准备测试目录
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; A&#x2F;{a,x}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; B&#x2F;{b,x}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; rm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -rf&lt;&#x2F;span&gt;&lt;span&gt; C &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p&lt;&#x2F;span&gt;&lt;span&gt; C
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用联合挂载的方式，将这两个目录挂载到一个公共的目录 &lt;code&gt;C&lt;&#x2F;code&gt; 上:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; aufs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; dirs=.&#x2F;A:.&#x2F;B none .&#x2F;C
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这时可以看到目录 &lt;code&gt;A&lt;&#x2F;code&gt; 与目录 &lt;code&gt;B&lt;&#x2F;code&gt; 被合并到了目录 &lt;code&gt;C&lt;&#x2F;code&gt; 中&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tree C
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;C
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; directories, 0 files
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时，如果修改 &lt;code&gt;C&lt;&#x2F;code&gt; 也会反应到对应的 &lt;code&gt;A&lt;&#x2F;code&gt; 或 &lt;code&gt;B&lt;&#x2F;code&gt; 中。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt; 支持多种&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;storage&#x2F;storagedriver&#x2F;select-storage-driver&#x2F;&quot;&gt;存储驱动&lt;&#x2F;a&gt;，但目前默认使用的驱动为 &lt;code&gt;overlay2&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;overlay2&quot;&gt;Overlay2&lt;&#x2F;h3&gt;
&lt;p&gt;接下来通过一个例子来探索 &lt;code&gt;overlay2&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;首先，启动一个容器:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; ubuntu:latest sleep 3600000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个命令的含义是，使用 &lt;code&gt;ubuntu:latest&lt;&#x2F;code&gt; 这个 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像来运行一个容器。然后，使用命令查看镜像的细节:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker image inspect ubuntu:latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GraphDriver&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;LowerDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;f34511250966eebf394cfcd377e3f3b3e226910881a87b14a9a9743bcbd30c05&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;268f8bdf24c70efcb96bcfedbc22458b36d532bd1a9494f8a5989069eb849802&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02&#x2F;diff&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MergedDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;df8d02faf11610c87d3ed7c92b5201902b87c468061bb495597fb2ce8d68d90e&#x2F;merged&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UpperDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;df8d02faf11610c87d3ed7c92b5201902b87c468061bb495597fb2ce8d68d90e&#x2F;diff&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WorkDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;df8d02faf11610c87d3ed7c92b5201902b87c468061bb495597fb2ce8d68d90e&#x2F;work&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;overlay2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RootFS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;layers&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Layers&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:e1c75a5e0bfa094c407e411eb6cc8a159ee8b060cbd0398f1693978b4af9af10&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:9e97312b63ff63ad98bb1f3f688fdff0721ce5111e7475b02ab652f10a4ff97d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:ec1817c93e7c08d27bfee063f0f1349185a558b87b2d806768af0a8fbbf5bc11&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:05f3b67ed530c5b55f6140dfcdfb9746cdae7b76600de13275197d009086bb3d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            ]
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RootFS&lt;&#x2F;code&gt;: 由于 &lt;code&gt;Docker&lt;&#x2F;code&gt; 的镜像为分层结构，制作镜像的每一步，都是一个层。因此，一个完整的 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像包括 &lt;code&gt;image&lt;&#x2F;code&gt; 和 &lt;code&gt;layer&lt;&#x2F;code&gt;。为了解决空间，提高效率等目的， &lt;code&gt;Docker&lt;&#x2F;code&gt; 构建镜像时，使用了 &lt;code&gt;COW&lt;&#x2F;code&gt; 技术，即 &lt;code&gt;layer&lt;&#x2F;code&gt; 在 &lt;code&gt;image&lt;&#x2F;code&gt; 之间是被共享的。一个 &lt;code&gt;Image&lt;&#x2F;code&gt; 是由多个有先后逻辑顺序的 &lt;code&gt;Layer&lt;&#x2F;code&gt; 所构成，也就是 &lt;code&gt;RootFS&lt;&#x2F;code&gt; 中的 &lt;code&gt;Layer&lt;&#x2F;code&gt; ，上面是底层，下面是顶层。这个信息保存在 &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;imagedb&#x2F;content&#x2F;sha256&#x2F;&amp;lt;image_id&amp;gt;&lt;&#x2F;code&gt; 文件中。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ll &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;layerdb&#x2F;sha256&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwx------&lt;&#x2F;span&gt;&lt;span&gt; 2 root root 4096 Aug 16 13:48 27d46ebb54384edbc8c807984f9eb065321912422b0e6c49d6a9cd8c8b7d8ffc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwx------&lt;&#x2F;span&gt;&lt;span&gt; 2 root root 4096 Aug 16 13:48 8a8d1f0b34041a66f09e49bdc03e75c2190f606b0db7e08b75eb6747f7b49e11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwx------&lt;&#x2F;span&gt;&lt;span&gt; 2 root root 4096 Aug 16 13:48 e1c75a5e0bfa094c407e411eb6cc8a159ee8b060cbd0398f1693978b4af9af10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwx------&lt;&#x2F;span&gt;&lt;span&gt; 2 root root 4096 Aug 16 13:48 f1b8f74eff975ae600be0345aaac8f0a3d16680c2531ffc72f77c5e17cbfeeee
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;结果在 &lt;code&gt;RootFS.Layers&lt;&#x2F;code&gt; 中只找到了 &lt;code&gt;e1c75a5e0bfa094c407e411eb6cc8a159ee8b060cbd0398f1693978b4af9af10&lt;&#x2F;code&gt;。这是为 &lt;code&gt;Docker&lt;&#x2F;code&gt; 使用了 &lt;code&gt;ChainID&lt;&#x2F;code&gt; 的方式去保存其他的 &lt;code&gt;layer&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:e1c75a5e0bfa094c407e411eb6cc8a159ee8b060cbd0398f1693978b4af9af10 sha256:9e97312b63ff63ad98bb1f3f688fdff0721ce5111e7475b02ab652f10a4ff97d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sha256sum&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;27d46ebb54384edbc8c807984f9eb065321912422b0e6c49d6a9cd8c8b7d8ffc&lt;&#x2F;span&gt;&lt;span&gt;  -
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:27d46ebb54384edbc8c807984f9eb065321912422b0e6c49d6a9cd8c8b7d8ffc sha256:ec1817c93e7c08d27bfee063f0f1349185a558b87b2d806768af0a8fbbf5bc11&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sha256sum&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f1b8f74eff975ae600be0345aaac8f0a3d16680c2531ffc72f77c5e17cbfeeee&lt;&#x2F;span&gt;&lt;span&gt;  -
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:f1b8f74eff975ae600be0345aaac8f0a3d16680c2531ffc72f77c5e17cbfeeee sha256:05f3b67ed530c5b55f6140dfcdfb9746cdae7b76600de13275197d009086bb3d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sha256sum&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8a8d1f0b34041a66f09e49bdc03e75c2190f606b0db7e08b75eb6747f7b49e11&lt;&#x2F;span&gt;&lt;span&gt;  -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如此就找到了所有的 &lt;code&gt;layer&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;但是，上面的文件保存的只有元数据 &lt;code&gt;(metadata )&lt;&#x2F;code&gt;，还需要找到真实的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 保存的位置:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;layerdb&#x2F;sha256&#x2F;e1c75a5e0bfa094c407e411eb6cc8a159ee8b060cbd0398f1693978b4af9af10&#x2F;cache-id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;overlay2&lt;&#x2F;code&gt; 的所有 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 都保存在 &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&lt;&#x2F;code&gt; 中，具体到上面的 &lt;code&gt;layer: e1c75a5e0bfa094c407e411eb6cc8a159ee8b060cbd0398f1693978b4af9af10&lt;&#x2F;code&gt; 的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 的位置就是 &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;以此类推，可以找到上述的四个 &lt;code&gt;layer&lt;&#x2F;code&gt; 的 &lt;code&gt;rootfs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;layerdb&#x2F;sha256&#x2F;27d46ebb54384edbc8c807984f9eb065321912422b0e6c49d6a9cd8c8b7d8ffc&#x2F;cache-id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;268f8bdf24c70efcb96bcfedbc22458b36d532bd1a9494f8a5989069eb849802
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;layerdb&#x2F;sha256&#x2F;f1b8f74eff975ae600be0345aaac8f0a3d16680c2531ffc72f77c5e17cbfeeee&#x2F;cache-id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f34511250966eebf394cfcd377e3f3b3e226910881a87b14a9a9743bcbd30c05
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;layerdb&#x2F;sha256&#x2F;8a8d1f0b34041a66f09e49bdc03e75c2190f606b0db7e08b75eb6747f7b49e11&#x2F;cache-id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;df8d02faf11610c87d3ed7c92b5201902b87c468061bb495597fb2ce8d68d90e
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;将他们通过 &lt;code&gt;Union mount&lt;&#x2F;code&gt; 的方式挂载到某个目录，就能得到容器完整的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 了。而且，可以观察出，上面得到的结果就是 &lt;code&gt;GraphDriver&lt;&#x2F;code&gt; 中的结果。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;committed&lt;&#x2F;span&gt;&lt;span&gt;  diff  link
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;268f8bdf24c70efcb96bcfedbc22458b36d532bd1a9494f8a5989069eb849802
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;committed&lt;&#x2F;span&gt;&lt;span&gt;  diff  link  lower  work
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;f34511250966eebf394cfcd377e3f3b3e226910881a87b14a9a9743bcbd30c05
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;committed&lt;&#x2F;span&gt;&lt;span&gt;  diff  link  lower  work
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;df8d02faf11610c87d3ed7c92b5201902b87c468061bb495597fb2ce8d68d90e
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;committed&lt;&#x2F;span&gt;&lt;span&gt;  diff  link  lower  work
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;除了最底层 &lt;code&gt;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02&lt;&#x2F;code&gt; 之外，其他各上层的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 中都存在 &lt;code&gt;lower&lt;&#x2F;code&gt; 目录，这是保存各自的底层 &lt;code&gt;(文档中表述为 parent)&lt;&#x2F;code&gt;。比如对于倒数第二层 &lt;code&gt;268f8bdf24c70efcb96bcfedbc22458b36d532bd1a9494f8a5989069eb849802&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;268f8bdf24c70efcb96bcfedbc22458b36d532bd1a9494f8a5989069eb849802&#x2F;lower
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;QEYZLDRIUA2DNUJIGGVCZYDVRM
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -l&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;l&#x2F;QEYZLDRIUA2DNUJIGGVCZYDVRM
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;l&#x2F;QEYZLDRIUA2DNUJIGGVCZYDVRM&lt;&#x2F;span&gt;&lt;span&gt; -&amp;gt; ..&#x2F;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02&#x2F;diff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最后，根据当前的 &lt;code&gt;lower&lt;&#x2F;code&gt; 可以得到底层的 &lt;code&gt;diff&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;通过上述操作，将 &lt;code&gt;lower&lt;&#x2F;code&gt; 与 &lt;code&gt;diff&lt;&#x2F;code&gt; 关联起来了:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lower&lt;&#x2F;code&gt;: 可理解为当前的镜像层，对于当前层而言，是只读的&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;diff&lt;&#x2F;code&gt;: 是容器可读可写层，初始为空，容器内有文件被修改时，这个文件夹就会有对应的变化，也就是所谓的 &lt;code&gt;COW&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;使用如下方式验证:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker ps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CONTAINER&lt;&#x2F;span&gt;&lt;span&gt; ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;7baea70ac0a0&lt;&#x2F;span&gt;&lt;span&gt;        ubuntu:latest       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sleep 3600000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;     2 hours ago         Up 2 hours                              vigorous_poitras
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker inspect 7baea70ac0a0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GraphDriver&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;LowerDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;9667b87c5a650e82e2a27a6420813fd8b7891a0e37b13558448e6f82a2e7a877-init&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;df8d02faf11610c87d3ed7c92b5201902b87c468061bb495597fb2ce8d68d90e&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;f34511250966eebf394cfcd377e3f3b3e226910881a87b14a9a9743bcbd30c05&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;268f8bdf24c70efcb96bcfedbc22458b36d532bd1a9494f8a5989069eb849802&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02&#x2F;diff&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MergedDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;9667b87c5a650e82e2a27a6420813fd8b7891a0e37b13558448e6f82a2e7a877&#x2F;merged&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UpperDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;9667b87c5a650e82e2a27a6420813fd8b7891a0e37b13558448e6f82a2e7a877&#x2F;diff&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WorkDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;9667b87c5a650e82e2a27a6420813fd8b7891a0e37b13558448e6f82a2e7a877&#x2F;work&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;overlay2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -ti&lt;&#x2F;span&gt;&lt;span&gt; 7baea70ac0a0 bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;touch ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;a.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后在另一个终端:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tree &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;9667b87c5a650e82e2a27a6420813fd8b7891a0e37b13558448e6f82a2e7a877
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; diff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └── root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;       └── a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; link
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; lower
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; merged
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; work
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; work
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 &lt;code&gt;diff&lt;&#x2F;code&gt; 中多出了文件 &lt;code&gt;root&#x2F;a.txt&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;此外，很容易发现还有一个以 &lt;code&gt;-init&lt;&#x2F;code&gt; 结尾的文件，这同样是一个层，夹在只读层和读写层之间。&lt;code&gt;Init&lt;&#x2F;code&gt; 层是 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目单独生成的一个内部层，专门用来存放 &lt;code&gt;&#x2F;etc&#x2F;hosts&lt;&#x2F;code&gt;、 &lt;code&gt;&#x2F;etc&#x2F;resolv.conf&lt;&#x2F;code&gt; 等信息。&lt;&#x2F;p&gt;
&lt;p&gt;需要这样一层的原因是，这些文件本来属于只读的 &lt;code&gt;Ubuntu&lt;&#x2F;code&gt; 镜像的一部分，但是用户往往需要在启动容器时写入一些指定的值比如 &lt;code&gt;hostname&lt;&#x2F;code&gt;，所以就需要在可读写层对它们进行修改。&lt;&#x2F;p&gt;
&lt;p&gt;可是，这些修改往往只对当前的容器有效，我们并不希望执行 &lt;code&gt;docker commit&lt;&#x2F;code&gt; 时，把这些信息连同可读写层一起提交掉。&lt;&#x2F;p&gt;
&lt;p&gt;所以， &lt;code&gt;Docker&lt;&#x2F;code&gt; 做法是，在修改了这些文件之后，以一个单独的层挂载了出来。而用户执行 &lt;code&gt;docker commit&lt;&#x2F;code&gt; 只会提交可读写层，所以是不包含这些内容的。&lt;&#x2F;p&gt;
&lt;p&gt;最终，这几个层都被联合挂载，表现为一个完整的 &lt;code&gt;Ubuntu&lt;&#x2F;code&gt; 操作系统供容器使用。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 技术为容器提供了独立 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 的能力，使容器在本地环境，测试环境，云环境之间具备了真正的 &lt;strong&gt;一致性&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;UnionFS&lt;&#x2F;code&gt; 为 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像提供了快速迭代，分层下载，复用已有镜像等能力。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coolshell.cn&#x2F;articles&#x2F;17061.html&quot;&gt;DOCKER基础技术：AUFS&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;blog.csdn.net&#x2F;ra681t58cjxsgckj31&#x2F;article&#x2F;details&#x2F;104707642&quot;&gt;一文读懂容器三大核心技术——Namespace，Cgroup和UnionFS&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;storage&#x2F;storagedriver&#x2F;select-storage-driver&#x2F;&quot;&gt;Docker storage drivers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>容器 - 隔离与限制</title>
		<published>2020-08-17T20:25:09+00:00</published>
		<updated>2020-08-17T20:25:09+00:00</updated>
		<link href="https://blog.kiyoko.io/namespace-and-cgroup/" type="text/html"/>
		<id>https://blog.kiyoko.io/namespace-and-cgroup/</id>
		<content type="html">&lt;p&gt;容器技术的本质是一种沙盒技术，可以将应用及相关配置、脚本 &lt;strong&gt;装&lt;&#x2F;strong&gt; 到一个 &lt;strong&gt;箱子&lt;&#x2F;strong&gt; 中。这样，多个应用之间就会因为有了边界而避免相互干扰。并且，应用被装进箱子后，也便于移动。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jin-cheng&quot;&gt;进程&lt;&#x2F;h2&gt;
&lt;p&gt;要实现一个程序，从一个文件读取两个整数，将计算结果写入到另一个文件中，则至少需要有三个文件:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;可执行文件&lt;&#x2F;li&gt;
&lt;li&gt;输入文件&lt;&#x2F;li&gt;
&lt;li&gt;输出文件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;由于计算机只认识 &lt;code&gt;0&lt;&#x2F;code&gt; 和 &lt;code&gt;1&lt;&#x2F;code&gt;，因此无论用哪种语言编写这段代码，最后这三个文件都需要通过某种方式翻译成二进制文件，才能在计算机操作系统中运行与使用。初始状态时，三个文件都存放在磁盘上。可执行文件被称作 &lt;strong&gt;程序&lt;&#x2F;strong&gt;，剩余两个文件是 &lt;strong&gt;数据&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;要完成功能，需要在计算机上执行这个程序。&lt;&#x2F;p&gt;
&lt;p&gt;首先，操作系统将 &lt;strong&gt;程序&lt;&#x2F;strong&gt; 载入到内存中，表现为指令序列。在执行过程中，当执行到从文件加载输入数据的指令时，操作系统控制存储控制器完成将数据从磁盘载入到内存。之后，操作系统读取到计算加法的指令时，通过 &lt;code&gt;CPU&lt;&#x2F;code&gt;、寄存器与内存的共同协作完成加法计算将计算结果暂存在内存中。最后，执行将结果保存到文件的指令时，操作系统会通过存储控制器，将内存中的结果写入到磁盘上。同时，操作系统中还需要维护其他状态，辅助这一过程顺利进行。&lt;&#x2F;p&gt;
&lt;p&gt;在操作系统中，将上述过程所涉及到的总和称作: 进程。&lt;&#x2F;p&gt;
&lt;p&gt;而容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造出一个 &lt;strong&gt;边界&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;对于 &lt;code&gt;Docker&lt;&#x2F;code&gt; 等大多数 &lt;code&gt;Linux&lt;&#x2F;code&gt; 容器来说，使用 &lt;code&gt;cgroups&lt;&#x2F;code&gt; 技术来制造约束，使用 &lt;code&gt;namespace&lt;&#x2F;code&gt; 技术来修改进程视图。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chuang-jian-rong-qi&quot;&gt;创建容器&lt;&#x2F;h2&gt;
&lt;p&gt;首先创建一个容器:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --help
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Usage:&lt;&#x2F;span&gt;&lt;span&gt;  docker run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;OPTIONS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; IMAGE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;COMMAND&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt;ARG...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -it&lt;&#x2F;span&gt;&lt;span&gt; busybox &#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unable&lt;&#x2F;span&gt;&lt;span&gt; to find image &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;busybox:latest&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; locally
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;latest:&lt;&#x2F;span&gt;&lt;span&gt; Pulling from library&#x2F;busybox
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;91f30d776fb2:&lt;&#x2F;span&gt;&lt;span&gt; Pull complete
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Digest:&lt;&#x2F;span&gt;&lt;span&gt; sha256:9ddee63a712cea977267342e8750ecbc60d3aab25f04ceacfa795e6fce341793
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Status:&lt;&#x2F;span&gt;&lt;span&gt; Downloaded newer image for busybox:latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;参数 &lt;code&gt;-it&lt;&#x2F;code&gt; 的含义是&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-i&lt;&#x2F;strong&gt;: --interactive     Keep STDIN open even if not attached&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;-t&lt;&#x2F;strong&gt;, --tty             Allocate a pseudo-TTY&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;结果就是，在操作系统中创建了一个容器，该容器中执行的程序为 &lt;code&gt;&#x2F;bin&#x2F;sh&lt;&#x2F;code&gt;。并且，在容器启动之后，申请了一个随机的 &lt;code&gt;tty&lt;&#x2F;code&gt;，使用交互方式访问这个容器。&lt;&#x2F;p&gt;
&lt;p&gt;现在，执行 &lt;code&gt;ps&lt;&#x2F;code&gt; 指令，结果真是 &lt;strong&gt;Amazing&lt;&#x2F;strong&gt; 啊:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PID&lt;&#x2F;span&gt;&lt;span&gt;   USER     TIME  COMMAND
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; root      0:00 &#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt; root      0:00 ps
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在创建容器时指定的 &lt;code&gt;&#x2F;bin&#x2F;sh&lt;&#x2F;code&gt; 进程，竟然就是容器内部的第一个进程&lt;code&gt;(pid=1)&lt;&#x2F;code&gt;，并且，这个容器内只有两个进程正在运行中，另一个进程是正在执行的 &lt;code&gt;ps&lt;&#x2F;code&gt; 指令。&lt;&#x2F;p&gt;
&lt;p&gt;而这正是 &lt;code&gt;namespace&lt;&#x2F;code&gt; 技术的神奇之处。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;namespace&quot;&gt;Namespace&lt;&#x2F;h2&gt;
&lt;p&gt;首先，通过 &lt;code&gt;manpages&lt;&#x2F;code&gt; 对 &lt;code&gt;namespace&lt;&#x2F;code&gt; 有一个初步的了解:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; man namespaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAMESPACES&lt;&#x2F;span&gt;&lt;span&gt;(7)                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; Programmer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s Manual                       NAMESPACES(7)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NAME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       namespaces - overview of Linux namespaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DESCRIPTION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       A namespace wraps a global system resource in an abstraction that makes it appear to the processes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       within the namespace that they have their own isolated instance of the global resource. Changes to
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       the global resource are visible to other processes that are members of the namespace, but are
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       invisible to other processes. One use of namespaces is to implement containers.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       This page provides pointers to information on the various namespace types, describes the associated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      &#x2F;proc files, and summarizes the APIs for working with namespaces.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;总的来说，&lt;code&gt;Linux Namespace&lt;&#x2F;code&gt; 提供了一种内核级别隔离系统资源的方法，通过将系统的全局资源放在不同的 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 中，来实现资源隔离的目的。不同 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 的程序，可以享有一份独立的系统资源。目前 &lt;code&gt;Linux&lt;&#x2F;code&gt; 中提供了以下几种系统资源的隔离机制：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Namespace&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Flag&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Page&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Isolates&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Cgroup&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWCGROUP&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;cgroup_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Cgroup root directory&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;IPC&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWIPC&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;ipc_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;System V IPC, POSIX message queues&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Network&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWNET&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;network_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Network devices, stacks, ports, etc.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Mount&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWNS&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;mount_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Mount points&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;PID&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWPID&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;pid_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Process IDs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Time&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWTIME&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;time_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Boot and monotonic clocks&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;User&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWUSER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;user_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;User and group IDs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;UTS&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWUTS&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;uts_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Hostname and NIS domain name&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;ru-he-shi-yong-namespace-ji-zhu&quot;&gt;如何使用 Namespace 技术&lt;&#x2F;h3&gt;
&lt;p&gt;以 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt; 为例，简单说明如何在编程中使用这种技术。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;&#x2F;code&gt; 实现 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 机制的方式，是通过在创建进程的时候，传入特定的选项。更具体一些，就是在调用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; man 2 clone
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CLONE&lt;&#x2F;span&gt;&lt;span&gt;(2)                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; Programmer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s Manual                           CLONE(2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NAME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       clone, __clone2, clone3 - create a child process
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SYNOPSIS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       &#x2F;* Prototype for the glibc wrapper function *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       #define _GNU_SOURCE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       #include &amp;lt;sched.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       int clone(int (*fn)(void *), void *stack, int flags, void *arg, ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                 &#x2F;* pid_t *parent_tid, void *tls, pid_t *child_tid *&#x2F; );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;系统调用时，传入对应的 &lt;code&gt;Flag&lt;&#x2F;code&gt; 作为参数 &lt;code&gt;flag&lt;&#x2F;code&gt; 的值。比如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; pid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(main_function, stack_size, SIGCHLD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就会创建一个新的进程，并且返回它的进程号 &lt;code&gt;pid&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;如果，同时指定 &lt;code&gt;CLONE_NEWPID&lt;&#x2F;code&gt; 参数:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; pid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(main_function, stack_size, CLONE_NEWPID | SIGCHLD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;新创建进程将会 &lt;strong&gt;看到&lt;&#x2F;strong&gt; 一个全新的进程空间，在这个进程空间里，它的 &lt;code&gt;pid&lt;&#x2F;code&gt; 是 &lt;code&gt;1&lt;&#x2F;code&gt;。之所以说 &lt;strong&gt;看到&lt;&#x2F;strong&gt;，是因为这只是一个 &lt;strong&gt;障眼法&lt;&#x2F;strong&gt;，在宿主机真实的进程空间里，这个进程的 &lt;code&gt;pid&lt;&#x2F;code&gt; 还是真实的数值，比如 &lt;code&gt;404&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;如果多次执行上面的 &lt;code&gt;clone()&lt;&#x2F;code&gt; 调用，就会创建多个 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt;，而每个 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 里的应用进程都会认为自己是当前容器里的 &lt;strong&gt;第 1 号进程&lt;&#x2F;strong&gt;，它们既看不到宿主机里真正的进程空间，也看不到其他 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt; 里的具体情况。&lt;&#x2F;p&gt;
&lt;p&gt;而其他的几种 &lt;code&gt;Namespace&lt;&#x2F;code&gt;，在写法上与 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt; 是相同的，区别只在于目的不同。&lt;&#x2F;p&gt;
&lt;p&gt;所以，&lt;code&gt;Docker&lt;&#x2F;code&gt; 容器这个听起来玄而又玄的概念，实际上是在创建容器进程时，指定了这个进程所需要启用的一组 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 参数。这样，容器就只能 &lt;strong&gt;看到&lt;&#x2F;strong&gt; 当前 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 所限定的资源、文件、设备、状态，或者配置。而对于宿主机以及其他不相关的程序，它就完全看不到了。&lt;&#x2F;p&gt;
&lt;p&gt;本质仍旧是进程。因此，在之前出现过的虚拟机对比容器的图片中，才没有出现 &lt;code&gt;Docker&lt;&#x2F;code&gt; 的位置。因为，容器只是通过 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 技术被隔离的进程，与其他进程一样，也是直接运行在宿主机操作系统之上的。&lt;code&gt;Docker&lt;&#x2F;code&gt; 只是充当了一个管理者的身份。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;what-is-the-docker&#x2F;virtualization-vs-containers.png&quot; alt=&quot;virtualization-vs-containers&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;既然，虚拟机与容器是两种不同的技术，那么二者之间就应该有一些区别。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rong-qi-de-you-shi&quot;&gt;容器的优势&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;zhan-yong-zi-yuan-xiao&quot;&gt;占用资源小&lt;&#x2F;h5&gt;
&lt;p&gt;容器占用的内存，要比同等功能的虚拟机占用的内存小，因为虚拟机本身也需要消耗一定的资源。比如，运行 &lt;code&gt;CentOS&lt;&#x2F;code&gt; 的 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机至少需要 &lt;code&gt;100 ~ 200 MB&lt;&#x2F;code&gt; 的内存&lt;&#x2F;p&gt;
&lt;h5 id=&quot;geng-hao-de-i-o-xing-neng&quot;&gt;更好的 I&#x2F;O 性能&lt;&#x2F;h5&gt;
&lt;p&gt;在参考阅读 &lt;a href=&quot;https:&#x2F;&#x2F;dominoweb.draco.res.ibm.com&#x2F;reports&#x2F;rc25482.pdf&quot;&gt;An Updated Performance Comparison of Virtual Machines and Linux Containers&lt;&#x2F;a&gt; 中显示&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在随机读写场景中，无论是 &lt;code&gt;iops&lt;&#x2F;code&gt; 还是 &lt;code&gt;latency&lt;&#x2F;code&gt;，容器的性能都接近于物理机性能，远好于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机&lt;&#x2F;li&gt;
&lt;li&gt;在顺序读写场景中，容器的性能基本与物理机性能，略好于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;host network&lt;&#x2F;code&gt; 场景中，容器的性能接近于物理机的性能，好于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;nat network&lt;&#x2F;code&gt; 场景中，容器的性能略逊于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机，但差别不大&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;总的来说，容器的 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 性能优于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rong-qi-de-lie-shi&quot;&gt;容器的劣势&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;ping-tai-yi-lai-xing&quot;&gt;平台依赖性&lt;&#x2F;h5&gt;
&lt;ul&gt;
&lt;li&gt;尽管，可以通过 &lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 的方式挂起与宿主机不同的 &lt;code&gt;Linux&lt;&#x2F;code&gt; 发行版，但容器中进程使用的内核依然是宿主机的内核。
&lt;ul&gt;
&lt;li&gt;因此 &lt;code&gt;Windows&lt;&#x2F;code&gt; 耗费了那么长的时间才对容器技术有了比较好的支持。&lt;&#x2F;li&gt;
&lt;li&gt;同样，也无法在低版本内核的宿主机上运行高版本内核的容器。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;you-xian-de-ge-chi&quot;&gt;有限的隔离&lt;&#x2F;h5&gt;
&lt;p&gt;部分资源无法被隔离，比如 &lt;strong&gt;时间&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;如果在容器中调用 &lt;code&gt;settimeofday(2)&lt;&#x2F;code&gt; 系统调用修改系统时间，会导致宿主机系统的时间被修改，这显然是一个很可怕的事情。因此，在使用容器的时候必须要了解 &lt;strong&gt;什么能做，什么不能做&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cgroup&quot;&gt;Cgroup&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Namespace&lt;&#x2F;code&gt; 技术的作用是隔离进程，但只有隔离是不够的。虽然，容器内的进程无法感知到其他运行在宿主机上的进程或容器，但从操作系统的角度而言，所有的进程与容器都是平等的地位。这就意味着，虽然容器是一个独立的小空间，但其可用的资源仍旧与其他进程之间有着竞争的关系。&lt;&#x2F;p&gt;
&lt;p&gt;因此，就需要用到 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 技术的帮助了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Cgroup&lt;&#x2F;code&gt; 全称为 &lt;code&gt;Control Group&lt;&#x2F;code&gt;，用途是限制一个进程组能够使用的资源上限，包括 &lt;code&gt;CPU&lt;&#x2F;code&gt;、&lt;code&gt;MEM&lt;&#x2F;code&gt;、&lt;code&gt;DISK&lt;&#x2F;code&gt;、&lt;code&gt;NETWORK&lt;&#x2F;code&gt; 等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cgroup-in-action&quot;&gt;Cgroup In Action&lt;&#x2F;h3&gt;
&lt;p&gt;在 &lt;code&gt;Linux&lt;&#x2F;code&gt; 中 &lt;code&gt;Everything is a file&lt;&#x2F;code&gt;，因此，操作 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 的途径也是通过文件系统。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; cgroup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu type cgroup (rw,nosuid,nodev,noexec,relatime,cpu)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;net_cls type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_prio)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;rdma type cgroup (rw,nosuid,nodev,noexec,relatime,rdma)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，&lt;code&gt;Cgroup&lt;&#x2F;code&gt; 是一系列定义在 &lt;code&gt;&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;&lt;&#x2F;code&gt; 目录下的各种文件或文件夹。每一个文件夹都被用来限制某一种特定的资源。以 &lt;code&gt;cpu&lt;&#x2F;code&gt; 资源为例:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;000-metadata&lt;&#x2F;span&gt;&lt;span&gt;  cgroup.clone_children  cpu.cfs_period_us  cpu.rt_runtime_us  docker    notify_on_release  systemreserved
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;001-binfmt&lt;&#x2F;span&gt;&lt;span&gt;    cgroup.procs           cpu.cfs_quota_us   cpu.shares         kmsg      podruntime         tasks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;002-bridge&lt;&#x2F;span&gt;&lt;span&gt;    cgroup.sane_behavior   cpu.rt_period_us   cpu.stat           kubepods  release_agent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;列举了限制 &lt;code&gt;cpu&lt;&#x2F;code&gt; 资源的各种参数选项。&lt;&#x2F;p&gt;
&lt;p&gt;使用 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 的方式非常简单，在对应的资源目录下面创建一个目录，比如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup.clone_children&lt;&#x2F;span&gt;&lt;span&gt;  cpu.cfs_period_us  cpu.rt_period_us   cpu.shares  notify_on_release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup.procs&lt;&#x2F;span&gt;&lt;span&gt;           cpu.cfs_quota_us   cpu.rt_runtime_us  cpu.stat    tasks
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个目录被称作 &lt;strong&gt;控制组&lt;&#x2F;strong&gt;，&lt;code&gt;Linux&lt;&#x2F;code&gt; 会在控制组下自动创建各种资源限制文件。&lt;&#x2F;p&gt;
&lt;p&gt;然后，在后台执行脚本:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; while : ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt; 12555
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;显然，这是一个死循环进程，会占用 &lt;code&gt;100%&lt;&#x2F;code&gt; 的 &lt;code&gt;CPU&lt;&#x2F;code&gt;。使用 &lt;code&gt;top&lt;&#x2F;code&gt; 指令，也可以确认确实使用了 &lt;code&gt;100%&lt;&#x2F;code&gt; 的 &lt;code&gt;CPU&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 12555
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt; - 21:00:26 up  4:43,  0 users,  load average: 0.66, 0.66, 0.56
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tasks:&lt;&#x2F;span&gt;&lt;span&gt;   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie
&lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cpu&lt;&#x2F;span&gt;&lt;span&gt;(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;  0.0 us,  2.5 sy,  3.7 ni, 93.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span&gt; Mem :   7958.1 total,   5885.9 free,    539.2 used,   1533.0 buff&#x2F;cache
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span&gt; Swap:  16384.0 total,  16384.0 free,      0.0 used.   7183.5 avail Mem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PID&lt;&#x2F;span&gt;&lt;span&gt; USER      PR  NI    VIRT    RES    SHR S  %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MEM&lt;&#x2F;span&gt;&lt;span&gt;     TIME+ COMMAND
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;12555&lt;&#x2F;span&gt;&lt;span&gt; diviner+  25   5   13576   4816      0 R 100.0   0.1   0:46.30 zsh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来，是时候展现 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 的魔法了。首先，查看两个接下来要使用的关键文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container&#x2F;cpu.cfs_quota_us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container&#x2F;cpu.cfs_period_us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;100000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cfs_period_us&lt;&#x2F;strong&gt;: 资源组获取资源的时间周期，单位微妙&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;cfs_quota_us&lt;&#x2F;strong&gt;: 在获取资源时间周期内获得资源的时间，单位微妙&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;所以 &lt;code&gt;usage = cfs_quota_us &#x2F; cfs_period_us&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;为了验证这一点，尝试将进程的 &lt;code&gt;CPU&lt;&#x2F;code&gt; 使用率控制在 &lt;code&gt;20%&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;首先，根据上面推测的公式，因为 &lt;code&gt;cfs_period_us = 100000&lt;&#x2F;code&gt;，所以应该修改 &lt;code&gt;cfs_quota_us&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; 20000 | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container&#x2F;cpu.cfs_quota_us
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但这还不够，还需要将被限制的进程的 &lt;code&gt;PID&lt;&#x2F;code&gt; 写入到 &lt;strong&gt;控制组&lt;&#x2F;strong&gt; &lt;code&gt;container&lt;&#x2F;code&gt; 的 &lt;code&gt;tasks&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; 12555 | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container&#x2F;tasks
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后使用 &lt;code&gt;top&lt;&#x2F;code&gt; 查看:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt; - 21:09:11 up  4:52,  0 users,  load average: 0.41, 0.76, 0.70
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tasks:&lt;&#x2F;span&gt;&lt;span&gt;   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie
&lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cpu&lt;&#x2F;span&gt;&lt;span&gt;(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;  0.0 us,  0.8 sy,  0.9 ni, 98.4 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span&gt; Mem :   7958.1 total,   5883.8 free,    541.1 used,   1533.1 buff&#x2F;cache
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span&gt; Swap:  16384.0 total,  16384.0 free,      0.0 used.   7181.6 avail Mem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PID&lt;&#x2F;span&gt;&lt;span&gt; USER      PR  NI    VIRT    RES    SHR S  %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MEM&lt;&#x2F;span&gt;&lt;span&gt;     TIME+ COMMAND
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;12555&lt;&#x2F;span&gt;&lt;span&gt; diviner+  25   5   13576   4816      0 R  20.0   0.1   8:17.25 zsh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Linux Cgroups&lt;&#x2F;code&gt; 的设计还是比较易用的，可以简单地理解为，一个子系统目录加上一组资源限制文件的组合。而对于 &lt;code&gt;Docker&lt;&#x2F;code&gt; 等 &lt;code&gt;Linux&lt;&#x2F;code&gt; 容器项目来说，它们只需要在每个子系统下面，为每个容器创建一个&lt;strong&gt;控制组&lt;&#x2F;strong&gt; (即创建一个新目录)，然后在启动容器进程之后，把这个进程的 &lt;code&gt;PID&lt;&#x2F;code&gt; 填写到对应控制组的 &lt;code&gt;tasks&lt;&#x2F;code&gt; 文件中就可以了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cgroup-in-docker&quot;&gt;Cgroup in Docker&lt;&#x2F;h2&gt;
&lt;p&gt;在通过 &lt;code&gt;Docker&lt;&#x2F;code&gt; 启动容器的时候，也可以限制 &lt;code&gt;cpu&lt;&#x2F;code&gt; 使用率:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -it --cpu-period&lt;&#x2F;span&gt;&lt;span&gt;=100000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --cpu-quota&lt;&#x2F;span&gt;&lt;span&gt;=20000 ubuntu &#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;611f8f2c0c7613c2f3f3964e7dc3dbe407c74689e376736e34d7fe4735ec95d4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;docker&#x2F;611f8f2c0c7613c2f3f3964e7dc3dbe407c74689e376736e34d7fe4735ec95d4&#x2F;cpu.cfs_period_us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;100000
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;docker&#x2F;611f8f2c0c7613c2f3f3964e7dc3dbe407c74689e376736e34d7fe4735ec95d4&#x2F;cpu.cfs_quota_us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;20000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时，这个容器最多只能使用 &lt;code&gt;20%&lt;&#x2F;code&gt; 的 &lt;code&gt;CPU&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-yue-du&quot;&gt;参考阅读&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dominoweb.draco.res.ibm.com&#x2F;reports&#x2F;rc25482.pdf&quot;&gt;An Updated Performance Comparison of Virtual Machines and Linux Containers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Docker - 概述</title>
		<published>2020-08-16T20:49:59+00:00</published>
		<updated>2020-08-16T20:49:59+00:00</updated>
		<link href="https://blog.kiyoko.io/what-is-the-docker/" type="text/html"/>
		<id>https://blog.kiyoko.io/what-is-the-docker/</id>
		<content type="html">&lt;h2 id=&quot;paas-de-fa-zhan-guo-cheng&quot;&gt;PaaS 的发展过程&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;容器&lt;&#x2F;strong&gt; 这个概念从来就不是什么新鲜的东西，也不是 &lt;code&gt;Docker&lt;&#x2F;code&gt; 公司发明的。在红极一时的 &lt;code&gt;PaaS&lt;&#x2F;code&gt; 项目 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 中，也同样使用到了容器技术，只不过容器只是其最底层、最没人关注的那一部分。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;PaaS&lt;&#x2F;code&gt; 项目被大家接纳的一个主要原因，就是它提供了一种名叫 &lt;strong&gt;应用托管&lt;&#x2F;strong&gt; 的能力。在当时，虚拟机和云计算已经是比较普遍的技术和服务，主流用户的普遍用法，就是租一批 &lt;code&gt;AWS&lt;&#x2F;code&gt; 或者 &lt;code&gt;OpenStack&lt;&#x2F;code&gt; 的虚拟机，然后像以前管理物理服务器那样，用脚本或者手工的方式在这些机器上部署应用。&lt;&#x2F;p&gt;
&lt;p&gt;但是，在部署过程中，难免会碰到云端虚拟机和本地环境不一致的问题。所以当时的云计算服务，比的就是谁能更好地模拟本地服务器环境，能带来更好的 &lt;strong&gt;上云&lt;&#x2F;strong&gt; 体验。而 &lt;code&gt;PaaS&lt;&#x2F;code&gt; 开源项目 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 就是当时解决这个问题的一个最佳方案。&lt;&#x2F;p&gt;
&lt;p&gt;举个栗子，创建好虚拟机之后，运维人员只需要在这些机器上部署 &lt;code&gt;Cloud Foundry Agent&lt;&#x2F;code&gt;，随后开发者只要执行一条命令就能把本地的应用部署到云上:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cf&lt;&#x2F;span&gt;&lt;span&gt; push &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;我的应用&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;事实上，&lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 最核心的组件就是一套应用的打包和分发机制。&lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 为每种主流编程语言都定义了一种打包格式。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cf push&lt;&#x2F;code&gt; 的作用是把应用的可执行文件和启动脚本打进一个压缩包内，上传到云上 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 的存储中。接着，&lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 会通过调度器选择一个可以运行这个应用的虚拟机，然后通知这个机器上的 &lt;code&gt;Agent&lt;&#x2F;code&gt; 把应用压缩包下载下来启动。&lt;&#x2F;p&gt;
&lt;p&gt;这时候关键来了，由于需要在一个虚拟机上启动很多个来自不同用户的应用，&lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 通过操作系统的 &lt;code&gt;cgroups&lt;&#x2F;code&gt; 和 &lt;code&gt;namespace&lt;&#x2F;code&gt; 机制为每一个应用单独创建一个称作 &lt;strong&gt;沙盒&lt;&#x2F;strong&gt; 的隔离环境，然后在 &lt;strong&gt;沙盒&lt;&#x2F;strong&gt; 中启动这些应用进程。这样，就实现了把多个用户的应用互不干涉地在虚拟机里批量地、自动地运行起来的目的。而这个 &lt;strong&gt;沙盒&lt;&#x2F;strong&gt; 就是所谓的 &lt;strong&gt;容器&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;而本文的主角 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目，与 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 的容器并没有本质上的差异。因此在它发布后不久，&lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 的首席产品经理 &lt;code&gt;James Bayer&lt;&#x2F;code&gt; 就在社区里做了一次详细对比，告诉用户 &lt;code&gt;Docker&lt;&#x2F;code&gt; 只是一个同样使用 &lt;code&gt;cgroups&lt;&#x2F;code&gt; 和 &lt;code&gt;namespace&lt;&#x2F;code&gt; 实现的 &lt;strong&gt;沙盒&lt;&#x2F;strong&gt; 而已，没有什么特别的黑科技，也不需要特别关注。&lt;&#x2F;p&gt;
&lt;p&gt;然而，短短几个月，&lt;code&gt;Docker&lt;&#x2F;code&gt; 项目就迅速崛起了。它的崛起速度如此之快，以至于 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 以及所有的 &lt;code&gt;PaaS&lt;&#x2F;code&gt; 社区还没来得及成为它的竞争对手，就直接被宣告出局了，堪称 &lt;strong&gt;降维打击&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;docker-jing-xiang&quot;&gt;Docker 镜像&lt;&#x2F;h2&gt;
&lt;p&gt;究其根本原因，虽然 &lt;code&gt;Docker&lt;&#x2F;code&gt; 与 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 无论是在核心原理还是在技术实现上大部分相同，但正是被大家忽视的那一小部分成为 &lt;code&gt;Docker&lt;&#x2F;code&gt; 的制胜法宝——&lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Cloud Fondry&lt;&#x2F;code&gt; 成也“打包”，败萧“打包”。其一，每种语言，每种框架的打包方式都不甚相同，甚至于每个版本都需要打包；其二，虽然打包之后可以在云上直接使用，但在从本地上云的过程中，可能仍旧需要反复修改、配置，甚至于在不断试错中体会&lt;strong&gt;玄学调参&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;结果大家发现，虽然 &lt;code&gt;cf push&lt;&#x2F;code&gt; 可以一键部署，但是为了实现&lt;strong&gt;一键部署&lt;&#x2F;strong&gt;这一目的的过程却需要费尽心机。&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像却从根本上解决了这一问题。&lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像，实际上也是一个压缩包，但是内容却要比 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 的丰富的多。它不但包含可执行文件与启动脚本，更是包含了一个完整的操作系统，所以这个压缩包的内容可以与开发环境、测试环境的完全一样。&lt;&#x2F;p&gt;
&lt;p&gt;假设，开发时使用 &lt;code&gt;centos 8&lt;&#x2F;code&gt; 作为开发环境，此时，只需要使用 &lt;code&gt;centos 8&lt;&#x2F;code&gt; 的 &lt;code&gt;iso&lt;&#x2F;code&gt; 连同可执行文件一起制作一个压缩包，那么，无论在哪里解压这个压缩包，都可以为可执行文件提供完全一致的运行环境。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rong-qi-yu-xu-ni-hua&quot;&gt;容器与虚拟化&lt;&#x2F;h2&gt;
&lt;p&gt;虚拟化允许多个操作系统 &lt;code&gt;(Windows&#x2F;Linux)&lt;&#x2F;code&gt; 同时在单个硬件系统上运行。&lt;&#x2F;p&gt;
&lt;p&gt;容器可共享同一个操作系统内核，将应用进程与系统其他部分隔离开。例如：&lt;code&gt;ARM Linux&lt;&#x2F;code&gt; 系统运行 &lt;code&gt;ARM Linux&lt;&#x2F;code&gt; 容器，&lt;code&gt;x86 Linux&lt;&#x2F;code&gt; 系统运行 &lt;code&gt;x86 Linux&lt;&#x2F;code&gt; 容器，&lt;code&gt;x86 Windows&lt;&#x2F;code&gt; 系统运行 &lt;code&gt;x86 Windows&lt;&#x2F;code&gt; 容器。&lt;code&gt;Linux&lt;&#x2F;code&gt; 容器具有极佳的可移植性，但前提是它们必须与底层系统兼容。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;what-is-the-docker&#x2F;virtualization-vs-containers.png&quot; alt=&quot;virtualization-vs-containers&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这意味着，虚拟化会使用虚拟机监控程序模拟硬件，从而使多个操作系统能够并行运行。但这不如容器轻便。&lt;code&gt;Linux&lt;&#x2F;code&gt; 容器在本机操作系统上运行，与所有容器共享该操作系统，因此应用和服务能够保持轻巧，并行化快速运行。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>HTTPS 双向认证</title>
		<published>2020-08-15T14:04:21+00:00</published>
		<updated>2020-08-15T14:04:21+00:00</updated>
		<link href="https://blog.kiyoko.io/https-mutual-authentication/" type="text/html"/>
		<id>https://blog.kiyoko.io/https-mutual-authentication/</id>
		<content type="html">&lt;h2 id=&quot;tls-xie-yi&quot;&gt;TLS 协议&lt;&#x2F;h2&gt;
&lt;p&gt;传输层安全性协议 &lt;code&gt;(TLS: Transport Layer Security)&lt;&#x2F;code&gt; 及其前身安全套接层 &lt;code&gt;(SSL: Secure Sockets Layer)&lt;&#x2F;code&gt; 是一种安全协议，目的是为互联网通信提供安全及数据完整性保障。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;SSL&lt;&#x2F;code&gt; 包含记录层 &lt;code&gt;(Record Layer)&lt;&#x2F;code&gt; 和传输层，记录层协议确定传输层数据的封装格式。传输层安全协议使用 &lt;code&gt;X.509&lt;&#x2F;code&gt; 认证，然后利用非对称加密演算来对通信方做身份认证，之后交换对称密钥作为会谈密钥 &lt;code&gt;(Session key)&lt;&#x2F;code&gt;。这个会谈密钥是用来将通信两方交换的数据做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;https-xie-yi&quot;&gt;HTTPS 协议&lt;&#x2F;h2&gt;
&lt;p&gt;超文本传输安全协议 &lt;code&gt;(HTTPS: HyperText Transfer Protocol Secure，常称为HTTP over TLS、HTTP over SSL或HTTP Secure)&lt;&#x2F;code&gt; 是一种通过计算机网络进行安全通信的传输协议。&lt;code&gt;HTTPS&lt;&#x2F;code&gt; 经由 &lt;code&gt;HTTP&lt;&#x2F;code&gt; 进行通信，但利用 &lt;code&gt;SSL&#x2F;TLS&lt;&#x2F;code&gt; 来加密数据包。&lt;code&gt;HTTPS&lt;&#x2F;code&gt; 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ren-zheng-guo-cheng&quot;&gt;认证过程&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;dan-xiang-ren-zheng&quot;&gt;单向认证&lt;&#x2F;h3&gt;
&lt;p&gt;在访问大多数网站 &lt;code&gt;(google, facebook)&lt;&#x2F;code&gt; 时，会使用单向认证的方式。客户端(浏览器)会验证服务端证书的合法性，过程如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;https-mutual-authentication&#x2F;01-one-way-authentication.png&quot; alt=&quot;01-one-way-authentication&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发起建立 &lt;code&gt;HTTPS&lt;&#x2F;code&gt; 连接请求，将 &lt;code&gt;SSL&lt;&#x2F;code&gt; 协议版本的信息发送给服务器端&lt;&#x2F;li&gt;
&lt;li&gt;服务器端将本机的公钥证书 &lt;code&gt;(server.crt)&lt;&#x2F;code&gt; 发送给客户端&lt;&#x2F;li&gt;
&lt;li&gt;客户端读取公钥证书 &lt;code&gt;(server.crt)&lt;&#x2F;code&gt; 取出服务端公钥&lt;&#x2F;li&gt;
&lt;li&gt;客户端生成随机密钥 &lt;code&gt;R&lt;&#x2F;code&gt;，用服务器公钥加密密钥&lt;code&gt;R&lt;&#x2F;code&gt;，将密文发送给服务端&lt;&#x2F;li&gt;
&lt;li&gt;服务端用私钥 &lt;code&gt;(server.key)&lt;&#x2F;code&gt; 解密密文，得到了密钥 &lt;code&gt;R&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;双方使用随机密钥 &lt;code&gt;R&lt;&#x2F;code&gt; 通信的对称加密密钥&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;shuang-xiang-ren-zheng&quot;&gt;双向认证&lt;&#x2F;h3&gt;
&lt;p&gt;而在某些有较高安全性要求，或需要验证访问者身份的场景，则可能会需要用到双向认证的方式：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;https-mutual-authentication&#x2F;02-mutual-anthentication.png&quot; alt=&quot;02-mutual-anthentication&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发起建立 &lt;code&gt;HTTPS&lt;&#x2F;code&gt; 连接请求，将 &lt;code&gt;SSL&lt;&#x2F;code&gt; 协议版本的信息发送给服务端；&lt;&#x2F;li&gt;
&lt;li&gt;服务器端将本机的公钥证书 &lt;code&gt;(server.crt)&lt;&#x2F;code&gt; 发送给客户端&lt;&#x2F;li&gt;
&lt;li&gt;客户端读取公钥证书 &lt;code&gt;(server.crt)&lt;&#x2F;code&gt; 取出服务端公钥&lt;&#x2F;li&gt;
&lt;li&gt;客户端将客户端公钥证书 &lt;code&gt;(client.crt)&lt;&#x2F;code&gt; 发送给服务器端&lt;&#x2F;li&gt;
&lt;li&gt;服务器端使用根证书 &lt;code&gt;(root.crt)&lt;&#x2F;code&gt; 解密客户端公钥证书，得到客户端公钥&lt;&#x2F;li&gt;
&lt;li&gt;客户端发送自己支持的加密方案给服务器端&lt;&#x2F;li&gt;
&lt;li&gt;服务器端根据自己和客户端的能力，选择一个双方都能接受的加密方案，使用客户端的公钥加密目标方案. 后发送给客户端；&lt;&#x2F;li&gt;
&lt;li&gt;客户端使用自己的私钥解密加密方案，生成随机密钥 &lt;code&gt;R&lt;&#x2F;code&gt;，使用服务器公钥加密后传给服务器端；&lt;&#x2F;li&gt;
&lt;li&gt;服务端用自己的私钥去解密这个密文，得到了密钥 &lt;code&gt;R&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;双方使用随机密钥 &lt;code&gt;R&lt;&#x2F;code&gt; 通信的对称加密密钥&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;sheng-cheng-zi-qian-ming-zheng-shu&quot;&gt;生成自签名证书&lt;&#x2F;h2&gt;
&lt;p&gt;生成这一些列证书之前，我们需要先生成一个 &lt;code&gt;CA&lt;&#x2F;code&gt; 根证书，然后由这个 &lt;code&gt;CA&lt;&#x2F;code&gt; 根证书颁发服务器公钥证书和客户端公钥证书。为了验证根证书颁发与验证客户端证书这个逻辑，我们使用根证书生成两套不同的客户端证书，然后同时用两个客户端证书来发送请求，看服务器端是否都能识别。下面是证书生成的内在逻辑示意图：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;https-mutual-authentication&#x2F;03-self-signed-sertificate.png&quot; alt=&quot;03-self-signed-sertificate&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sheng-cheng-gen-zheng-shu&quot;&gt;生成根证书&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建根证书私钥：
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; openssl genrsa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -out&lt;&#x2F;span&gt;&lt;span&gt; root.key 1024
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建根证书请求文件：
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; openssl req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -new -out&lt;&#x2F;span&gt;&lt;span&gt; root.csr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -key&lt;&#x2F;span&gt;&lt;span&gt; root.key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 后续参数请自行填写，下面是一个例子：
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Country Name (2 letter code) [XX]:cn
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# State or Province Name (full name) []:bj
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Locality Name (eg, city) [Default City]:bj
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Organization Name (eg, company) [Default Company Ltd]:alibaba
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Organizational Unit Name (eg, section) []:test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Common Name (eg, your name or your servers hostname) []:root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Email Address []: a.divinerapier.cn
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# A challenge password []:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# An optional company name []:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建根证书：
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; openssl x509&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -req -in&lt;&#x2F;span&gt;&lt;span&gt; root.csr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -out&lt;&#x2F;span&gt;&lt;span&gt; root.crt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -signkey&lt;&#x2F;span&gt;&lt;span&gt; root.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAcreateserial -days&lt;&#x2F;span&gt;&lt;span&gt; 3650
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以得到&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;root.crt&lt;&#x2F;code&gt;: 有效期为 &lt;code&gt;10&lt;&#x2F;code&gt; 年的根证书&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sheng-cheng-zi-qian-ming-fu-wu-qi-duan-zheng-shu&quot;&gt;生成自签名服务器端证书&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 生成服务器端证书私钥：
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; openssl genrsa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -out&lt;&#x2F;span&gt;&lt;span&gt; server.key 1024
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 生成服务器证书请求文件，过程和注意事项参考根证书，本节不详述：
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; openssl req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -new -out&lt;&#x2F;span&gt;&lt;span&gt; server.csr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -key&lt;&#x2F;span&gt;&lt;span&gt; server.key
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 生成服务器端公钥证书
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; openssl x509&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -req -in&lt;&#x2F;span&gt;&lt;span&gt; server.csr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -out&lt;&#x2F;span&gt;&lt;span&gt; server.crt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -signkey&lt;&#x2F;span&gt;&lt;span&gt; server.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CA&lt;&#x2F;span&gt;&lt;span&gt; root.crt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAkey&lt;&#x2F;span&gt;&lt;span&gt; root.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAcreateserial -days&lt;&#x2F;span&gt;&lt;span&gt; 3650
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以得到&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server.key&lt;&#x2F;code&gt;: 服务端私钥文件&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;server.crt&lt;&#x2F;code&gt;: 有效期为 &lt;code&gt;10&lt;&#x2F;code&gt; 年的服务端公钥文件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sheng-cheng-zi-qian-ming-ke-hu-duan-zheng-shu&quot;&gt;生成自签名客户端证书&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 生成客户端证书秘钥：
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; openssl genrsa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -out&lt;&#x2F;span&gt;&lt;span&gt; client.key 1024
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 生成客户端证书请求文件，过程和注意事项参考根证书，本节不详述：
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; openssl req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -new -out&lt;&#x2F;span&gt;&lt;span&gt; client.csr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -key&lt;&#x2F;span&gt;&lt;span&gt; client.key
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 生客户端证书
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; openssl x509&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -req -in&lt;&#x2F;span&gt;&lt;span&gt; client.csr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -out&lt;&#x2F;span&gt;&lt;span&gt; client.crt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -signkey&lt;&#x2F;span&gt;&lt;span&gt; client.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CA&lt;&#x2F;span&gt;&lt;span&gt; root.crt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAkey&lt;&#x2F;span&gt;&lt;span&gt; root.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAcreateserial -days&lt;&#x2F;span&gt;&lt;span&gt; 3650
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 生客户端p12格式证书，输入一个好记的密码，比如 123456
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; openssl pkcs12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -export -clcerts -in&lt;&#x2F;span&gt;&lt;span&gt; client.crt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -inkey&lt;&#x2F;span&gt;&lt;span&gt; client.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -out&lt;&#x2F;span&gt;&lt;span&gt; client.p12
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以得到&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;client.key&lt;&#x2F;code&gt;: 客户端私钥文件&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;client.crt&lt;&#x2F;code&gt;: 有效期为 &lt;code&gt;10&lt;&#x2F;code&gt; 年的客户端公钥文件&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;client.p12&lt;&#x2F;code&gt;: 同时包含公钥与私钥的客户端 &lt;code&gt;p12&lt;&#x2F;code&gt; 证书文件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sheng-cheng-zheng-shu-zhu-yi-shi-xiang&quot;&gt;生成证书注意事项&lt;&#x2F;h3&gt;
&lt;p&gt;在创建证书请求文件的时候需要注意&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;根证书的 &lt;code&gt;Common Name&lt;&#x2F;code&gt; 填写 &lt;code&gt;root&lt;&#x2F;code&gt; 就可以&lt;&#x2F;li&gt;
&lt;li&gt;所有客户端和服务器端的 &lt;code&gt;Common Name&lt;&#x2F;code&gt; 需要填写域名&lt;&#x2F;li&gt;
&lt;li&gt;根证书的 &lt;code&gt;Common Name&lt;&#x2F;code&gt; 与客户端证书、服务端证书的 &lt;code&gt;Common Name&lt;&#x2F;code&gt; 不能相同&lt;&#x2F;li&gt;
&lt;li&gt;其他所有字段的填写，根证书、服务器端证书、客户端证书需保持一致 最后的密码可以直接回车跳过&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;shi-yong-golang-gou-jian-shuang-xiang-ren-zheng-tong-xin&quot;&gt;使用 golang 构建双向认证通信&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;fu-wu-duan-dai-ma&quot;&gt;服务端代码&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;crypto&#x2F;tls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;crypto&#x2F;x509&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;io&#x2F;ioutil&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;net&#x2F;http&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ServeHTTP&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fprintf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hi, This is an example of https service in golang!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capath&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;certpath&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypath&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StringVar&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capath&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ca&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;root.crt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;path of ca file&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StringVar&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;certpath&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cert&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;server.crt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;path of cert file&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StringVar&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypath&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;server.key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;path of key file&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StringVar&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:443&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;local address to bind&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Parse&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pool &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x509&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewCertPool&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;caCrt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ioutil&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadFile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capath&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ReadFile err:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AppendCertsFromPEM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;caCrt&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Server&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Addr&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Handler&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;{},
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TLSConfig&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ClientCAs&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ClientAuth&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RequireAndVerifyClientCert&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ListenAndServeTLS&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;certpath&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypath&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ListenAndServeTLS err:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ke-hu-duan-dai-ma&quot;&gt;客户端代码&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;crypto&#x2F;tls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;crypto&#x2F;x509&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;io&#x2F;ioutil&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;net&#x2F;http&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capath&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;certpath&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StringVar&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capath&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ca&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;root.crt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;path of ca file&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StringVar&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;certpath&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cert&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;client.crt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;path of cert file&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StringVar&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypath&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;client.key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;path of key file&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StringVar&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;localhost&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host of https server&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Parse&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pool &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x509&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewCertPool&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;caCrt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ioutil&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadFile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capath&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ReadFile err:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AppendCertsFromPEM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;caCrt&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cliCrt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LoadX509KeyPair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;certpath&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keypath&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Loadx509keypair err:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tr &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Transport&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TLSClientConfig&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RootCAs&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Certificates&lt;&#x2F;span&gt;&lt;span&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Certificate&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cliCrt&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Client&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Transport&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resp&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ioutil&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;) + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>设备控制器</title>
		<published>2020-08-12T17:50:29+00:00</published>
		<updated>2020-08-12T17:50:29+00:00</updated>
		<link href="https://blog.kiyoko.io/device-controllers/" type="text/html"/>
		<id>https://blog.kiyoko.io/device-controllers/</id>
		<content type="html">&lt;p&gt;从功能角度方面，一个 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 单元由机械组件和电子组件两部分组合而成。而从设计的角度出发，将二者分开，则可以提供一种更具模块化，且更具通用性的设计模式。&lt;&#x2F;p&gt;
&lt;p&gt;电子组件，可被称作设备控制器(&lt;code&gt;device controller&lt;&#x2F;code&gt;)，也可被称作适配器 &lt;code&gt;(adapter)&lt;&#x2F;code&gt;。在个人计算机上，常见的设备控制器要么是直接在母板上的芯片，要么是可插入扩展插槽的印刷电路板。&lt;&#x2F;p&gt;
&lt;p&gt;机械组件其实就是设备本身。&lt;&#x2F;p&gt;
&lt;p&gt;下图为这种模块化的设计的简易示意图。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;device-controllers&#x2F;01-devices-arrangement.PNG&quot; alt=&quot;arrangement&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;控制器卡上有一些连接器，用途是允许通过线缆连接到设备上，大部分控制器卡支持两个，四个甚至八个设备。控制器和设备之间的接口可以是标准接口，比如 &lt;code&gt;ANSI&lt;&#x2F;code&gt;，&lt;code&gt;IEEE&lt;&#x2F;code&gt; 或 &lt;code&gt;ISO&lt;&#x2F;code&gt; 标准，也可以是事实上的标准，例如，&lt;code&gt;SATA&lt;&#x2F;code&gt;，&lt;code&gt;SCSI&lt;&#x2F;code&gt;，&lt;code&gt;USB&lt;&#x2F;code&gt;，&lt;code&gt;Thunderbolt&lt;&#x2F;code&gt; 或 &lt;code&gt;FireWire(IEEE 1394)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;控制器和设备之间的接口属于非常底层的接口。例如，磁盘可能被格式化为&lt;code&gt;2,000,000&lt;&#x2F;code&gt; 个扇区，每个磁道 &lt;code&gt;512&lt;&#x2F;code&gt; 字节。但是，实际上从驱动器中出来的是一个串行位流，始于前导码 &lt;code&gt;(preamble)&lt;&#x2F;code&gt;，然后是一个扇区中的 &lt;code&gt;4096&lt;&#x2F;code&gt; 位，最后是一个校验和或纠错码 &lt;code&gt;(ECC)&lt;&#x2F;code&gt;。格式化磁盘后，将写入包含柱面号和扇区号，扇区大小，类似数据以及同步信息的前导码。&lt;&#x2F;p&gt;
&lt;p&gt;控制器的职责是将串行位流转换为字节块，并执行必要的纠错。首先，控制器在其内部缓冲区中，逐位组装成字节块。在确认校验和无误，且该块无错误后，可以将数据块复制到主存储器中。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;LCD&lt;&#x2F;code&gt; 显示器的控制器在低电平时，可以用作位串行设备。它从存储器中读取包含要显示的字符的字节后，生成修改相应像素背光偏振的信号，实现将字符写入到屏幕上。试想，如果没有显示控制器，则需要操作系统开发者通过显式编程的方式，控制所有像素的电场，这将是一件多么可怕的事情。正是因为使用了控制器，操作系统只需通过少量参数来初始化控制器，例如每行的字符数，像素数以及每屏的行数，之后就可以让控制器来负责实际驱动电场。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>I&#x2F;O 设备</title>
		<published>2020-08-11T12:33:35+00:00</published>
		<updated>2020-08-11T12:33:35+00:00</updated>
		<link href="https://blog.kiyoko.io/io-devices/" type="text/html"/>
		<id>https://blog.kiyoko.io/io-devices/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 设备大致可分为两类：块设备和字符设备。&lt;&#x2F;p&gt;
&lt;p&gt;块设备将信息存储在固定大小的块中。通常情况，数据块的大小在 &lt;code&gt;512 Bytes&lt;&#x2F;code&gt; 到 &lt;code&gt;32768 Bytes&lt;&#x2F;code&gt; 之间。所有传输过程均以&lt;strong&gt;块&lt;&#x2F;strong&gt;为单位，每次传输一个或多个完整且连续的块。对每个块的读或写操作是互相独立的，这是块设备的基本属性。常见的块设备有硬盘、蓝光光盘等。每个设备块都有各自的地址，因此块设备支持寻址操作，可以使用 &lt;code&gt;seek&lt;&#x2F;code&gt; 指令任意指定偏移位置。比如，磁盘接收到该指令后，通过旋转机械臂及磁头的方式完成寻址操作。&lt;&#x2F;p&gt;
&lt;p&gt;字符设备在传输数据时使用流式传输的方式，为不可寻址设备，因此也不支持 &lt;code&gt;seek&lt;&#x2F;code&gt; 操作。常见的字符设备有鼠标，网卡等。&lt;&#x2F;p&gt;
&lt;p&gt;但事实上，这种分类方案并不是完美无缺的。因为，还有一些设备无法适用于这个分类方案。&lt;&#x2F;p&gt;
&lt;p&gt;比如，时钟是一种按照预定义时间间隔产生中断信息的一种设备，它既不是可寻址的块设备，也不是字符流设备。除此之外，还有内存映射、屏幕、触摸屏等各类设备。但换一个角度分析，由于计算机使用到的大部分 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 设备，要么是块设备，要么是字符设备，这个分类模型足够通用。因此，可以用来作为独立于设备的基础操作系统基础模块。例如，文件系统就是用于处理经过抽象处理之后的块设备，而具体到设备层面的交互则交给更底层的软件处理，比如设备驱动程序。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>优化 WHERE 子句</title>
		<published>2020-08-01T15:26:44+00:00</published>
		<updated>2020-08-01T15:26:44+00:00</updated>
		<link href="https://blog.kiyoko.io/where-clause-optimization/" type="text/html"/>
		<id>https://blog.kiyoko.io/where-clause-optimization/</id>
		<content type="html">&lt;p&gt;以 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句为例，介绍如何优化 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句。这些优化方法同样适用于 &lt;code&gt;DELETE&lt;&#x2F;code&gt; 和 &lt;code&gt;UPDATE&lt;&#x2F;code&gt; 语句中的 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句。&lt;&#x2F;p&gt;
&lt;p&gt;在编写 &lt;code&gt;SQL&lt;&#x2F;code&gt; 时，开发者在主观上为了使语句执行的更快而去做一些所谓的“优化”。但实际上，这些“优化”要么会使 &lt;code&gt;SQL&lt;&#x2F;code&gt; 失去了可读性，要么是在重复 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 做的事情。&lt;&#x2F;p&gt;
&lt;p&gt;下面列举一些 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 会做的优化:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;删除不必要的括号&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span&gt;((a AND b) AND c OR (((a AND b) AND (c AND d))))
&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; (a AND b AND c) OR (a AND b AND c AND d)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;常量替换(Constant folding)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;(a&amp;lt;b AND b=c) AND a=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; b&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;AND b=c AND a=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;删除恒定条件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;(b&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;AND b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) OR (b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) OR (b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;OR b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 &lt;code&gt;MySQL 8.0.14&lt;&#x2F;code&gt; 和更高版本中，这是在准备过程中发生的，而不是在优化阶段发生的，这有助于简化联接。 有关更多信息和示例，请参见 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;outer-join-optimization.html&quot;&gt;Section 8.2.1.9, “Outer Join Optimization”&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;索引使用的常量表达式仅计算一次。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;从 &lt;code&gt;MySQL 8.0.16&lt;&#x2F;code&gt; 开始，数值类型的列与常数比较时，折叠(folded)或删除无效或越界的值：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- CREATE TABLE t (c TINYINT UNSIGNED NOT NULL);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; c ≪ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;256&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;-≫ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;对于使用&lt;code&gt;MyISAM&lt;&#x2F;code&gt; 和 &lt;code&gt;MEMORY&lt;&#x2F;code&gt;存储引擎的表，在单一表上执行 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;aggregate-functions.html#function_count&quot;&gt;&lt;code&gt;COUNT(*)&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; 操作时，如果没有 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句，或者 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句的表达式 &lt;code&gt;NOT NULL&lt;&#x2F;code&gt;，都将直接从表信息中读取。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;COUNT(*) on a single table without a WHERE is retrieved directly from the table information for MyISAM and MEMORY tables. This is also done for any NOT NULL expression when used with only one table.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;尽早检测无效的常量表达式。&lt;code&gt;MySQL&lt;&#x2F;code&gt; 检测到无效 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句时，直接返回无结果。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;不使用 &lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 或聚合函数(&lt;code&gt;COUNT()，MIN()&lt;&#x2F;code&gt;)时，会把 &lt;code&gt;HAVING&lt;&#x2F;code&gt; 与 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 合并。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;对于联接查询中的每个表，构造一个简单的 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 实现快速 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 评估，尽快跳过行的目的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;优先读取常量表。满足以下任意一个即为常量表：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;空表或具有一行的表。&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 语句构建得到的表，且 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句中的所有列只能是 &lt;code&gt;PRIMARY KEY&lt;&#x2F;code&gt; 或 &lt;code&gt;NOT NULL UNIQUE&lt;&#x2F;code&gt; 索引与常量表达式比较。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;以下所有表均用作常量表：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; primary_key=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;primary_key&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;primary_key&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- PRIMARY KEY (column1,column2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; column1=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;AND column2=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- unique_not_null_column INT NOT NULL UNIQUE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; unique_not_null_column=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;参考 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;internals&#x2F;en&#x2F;optimizer-constants-constant-tables.html&quot;&gt;7.2.1.4 Constants and Constant Tables&lt;&#x2F;a&gt; 了解更多有关常量与常量表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;通过尝试所有可能的方法，找到用于联接表的最佳联接组合。如果 &lt;code&gt;ORDER BY&lt;&#x2F;code&gt; 和 &lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 子句中的所有列都来自同一表，则在连接时优先使用该表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;ORDER BY&lt;&#x2F;code&gt; 子句和 &lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 子句使用不同的列，或者 &lt;code&gt;ORDER BY&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 使用的列不属于联接队列中第一个表，则会创建一个临时表。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If there is an ORDER BY clause and a different GROUP BY clause, or if the ORDER BY or GROUP BY contains columns from tables other than the first table in the join queue, a temporary table is created.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果使用 &lt;code&gt;SQL_SMALL_RESULT&lt;&#x2F;code&gt; 修饰符，&lt;code&gt;MySQL&lt;&#x2F;code&gt; 将使用内存临时表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;从表的所有索引中选择一个最佳索引使用。或者，优化器认为全表扫描更有效时，会选择全表扫描。曾经，当使用最佳索引仍然会跨越表的 &lt;code&gt;30%&lt;&#x2F;code&gt;(&lt;code&gt;spanned more than 30% of the table&lt;&#x2F;code&gt;)时，就会选择使用全表扫描。但现在，使用索引还是全表扫描不再只取决于固定百分比，同时还要考虑其他因素，例如表大小，行数和 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 块大小。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在某些情况下，&lt;code&gt;MySQL&lt;&#x2F;code&gt; 可以从索引中读取数据行，而无需查询数据文件。如果索引中使用的所有列都是数字列，则仅使用索引树解析查询。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在输出每一行之前，将跳过与 &lt;code&gt;HAVING&lt;&#x2F;code&gt; 子句不匹配的行。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>优化 SELECT 语句</title>
		<published>2020-07-28T21:45:48+00:00</published>
		<updated>2020-07-28T21:45:48+00:00</updated>
		<link href="https://blog.kiyoko.io/optimizing-select-statements/" type="text/html"/>
		<id>https://blog.kiyoko.io/optimizing-select-statements/</id>
		<content type="html">&lt;p&gt;数据库中所有查找操作，均以 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句的形式执行。无论是实现网站秒级以内的响应时间，还是期望在生成大量的隔夜报告是缩短数小时的执行时间，调试这类语句都是重中之重。&lt;&#x2F;p&gt;
&lt;p&gt;除了 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句外，相同的技术还适用于诸如 &lt;code&gt;CREATE TABLE ... AS SELECT&lt;&#x2F;code&gt;，&lt;code&gt;INSERT INTO ... SELECT&lt;&#x2F;code&gt; 和 &lt;code&gt;DELETE&lt;&#x2F;code&gt; 语句中的 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句。但由于这些语句同时会涉及到读写两种操作，因此还需要考虑其他方面的性能问题。&lt;&#x2F;p&gt;
&lt;p&gt;多节点集群支持 &lt;strong&gt;&lt;code&gt;JOIN&lt;&#x2F;code&gt; 查询下推优化(&lt;code&gt;join pushdown optimization&lt;&#x2F;code&gt;)&lt;&#x2F;strong&gt;，能将符合条件的 &lt;code&gt;JOIN&lt;&#x2F;code&gt; 完整地发送到集群的数据节点，让这个查询请求被分发到这些节点上并行执行。有关此优化的更多信息，请参见&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;mysql-cluster-options-variables.html#ndb_join_pushdown-conditions&quot;&gt;Conditions for NDB pushdown joins&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;优化查询的核心因素：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何查询语句 &lt;code&gt;SELECT ... WHERE&lt;&#x2F;code&gt; 执行的非常之慢，首选提速方法就是检查是否可以添加&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;glossary.html#glos_index&quot;&gt;索引&lt;&#x2F;a&gt;。在 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句中使用的列上设置索引，以加快执行，过滤，检索结果等操作的速度。同时，索引信息需要占用一定的磁盘空间，请尽可能在有一定关联性的查询中复用索引。&lt;&#x2F;p&gt;
&lt;p&gt;在执行 &lt;code&gt;JOIN&lt;&#x2F;code&gt; 查询，外键关联等需要多个表参与的查询语句时，索引尤为重要。此时，可以通过 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;explain.html&quot;&gt;EXPLAIN&lt;&#x2F;a&gt; 语句来确定，执行 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句时，实际有哪些索引真正被使用了。参见 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;mysql-indexes.html&quot;&gt;Section 8.3.1, “How MySQL Uses Indexes”&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;using-explain.html&quot;&gt;Section 8.8.1, “Optimizing Queries with EXPLAIN”&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;隔离和调整查询中花费时间过多的任何部分，例如函数调用。 根据查询的结构方式，可以对结果集中的每一行调用一次函数，甚至可以对表中的每一行调用一次函数，从而极大地提高了效率。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;最小化查询中&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;glossary.html#glos_full_table_scan&quot;&gt;全表扫描&lt;&#x2F;a&gt;的次数，特别是对于大表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;通过定期使用 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;analyze-table.html&quot;&gt;&lt;code&gt;ANALYZE TABLE&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; 语句使表统计信息保持最新状态，让优化器具有充足的信息构造有效执行计划。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;了解每种存储引擎的调整技术，索引技术和配置参数。无论是 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 还是 &lt;code&gt;MyISAM&lt;&#x2F;code&gt;，都各自具有一套保持查询高性能的准则。参见 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimizing-innodb-queries.html&quot;&gt;Section 8.5.6, “Optimizing InnoDB Queries”&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimizing-queries-myisam.html&quot;&gt;Section 8.6.1, “Optimizing MyISAM Queries”&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;innodb-performance-ro-txn.html&quot;&gt;Section 8.5.3, “Optimizing InnoDB Read-Only Transactions”&lt;&#x2F;a&gt; 中的技术优化 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 表的单查询事务。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;避免以难以理解的方式转换查询，特别是在优化器自动执行某些相同转换的情况下。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当使用基本准则不能轻松解决性能问题时，可以通过阅读 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;explain.html&quot;&gt;EXPLAIN&lt;&#x2F;a&gt; 计划并调整索引，&lt;code&gt;WHERE&lt;&#x2F;code&gt;，&lt;code&gt;JOIN&lt;&#x2F;code&gt; 等子句来调查特定查询的内部详细信息。(有一定经验之后，阅读 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;explain.html&quot;&gt;EXPLAIN&lt;&#x2F;a&gt; 计划可能是每个查询的第一步。)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;调整 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 用于缓存的内存区域的大小和属性。合理使用 InnoDB 的&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;glossary.html#glos_buffer_pool&quot;&gt;buffer pool&lt;&#x2F;a&gt;，&lt;code&gt;MyISAM&lt;&#x2F;code&gt; 的 &lt;code&gt;key cache&lt;&#x2F;code&gt; 和 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 的 &lt;code&gt;query cache&lt;&#x2F;code&gt;，可以让重复查询的运行速度更快。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;即使查询已经使用了内存缓存，也依然可能对其进一步优化，使其需要更少的内存，从而使应用程序更具可伸缩性。比如，应用程序可以同时处理更多的用户，更大的请求量，而不会导致性能大幅下降。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;锁定问题，多个会话同时访问同一张表可能会影响查询速度。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;geng-duo-you-hua-ce-lue&quot;&gt;更多优化策略&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.divinerapier.cn&#x2F;2020&#x2F;08&#x2F;01&#x2F;where-clause-optimization&#x2F;&quot;&gt;WHERE Clause Optimization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Range Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Index Merge Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Hash Join Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Engine Condition Pushdown Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Index Condition Pushdown Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Nested-Loop Join Algorithms&lt;&#x2F;li&gt;
&lt;li&gt;Nested Join Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Outer Join Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Outer Join Simplification&lt;&#x2F;li&gt;
&lt;li&gt;Multi-Range Read Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Block Nested-Loop and Batched Key Access Joins&lt;&#x2F;li&gt;
&lt;li&gt;Condition Filtering&lt;&#x2F;li&gt;
&lt;li&gt;Constant-Folding Optimization&lt;&#x2F;li&gt;
&lt;li&gt;IS NULL Optimization&lt;&#x2F;li&gt;
&lt;li&gt;ORDER BY Optimization&lt;&#x2F;li&gt;
&lt;li&gt;GROUP BY Optimization&lt;&#x2F;li&gt;
&lt;li&gt;DISTINCT Optimization&lt;&#x2F;li&gt;
&lt;li&gt;LIMIT Query Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Function Call Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Window Function Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Row Constructor Expression Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Avoiding Full Table Scans&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>优化SQL语句</title>
		<published>2020-07-28T19:41:54+00:00</published>
		<updated>2020-07-28T19:41:54+00:00</updated>
		<link href="https://blog.kiyoko.io/optimizing-sql-statements/" type="text/html"/>
		<id>https://blog.kiyoko.io/optimizing-sql-statements/</id>
		<content type="html">&lt;ol&gt;
&lt;li&gt;Optimizing SELECT Statements&lt;&#x2F;li&gt;
&lt;li&gt;Optimizing Subqueries, Derived Tables, View References, and Common Table Expressions&lt;&#x2F;li&gt;
&lt;li&gt;Optimizing INFORMATION_SCHEMA Queries&lt;&#x2F;li&gt;
&lt;li&gt;Optimizing Performance Schema Queries&lt;&#x2F;li&gt;
&lt;li&gt;Optimizing Data Change Statements&lt;&#x2F;li&gt;
&lt;li&gt;Optimizing Database Privileges&lt;&#x2F;li&gt;
&lt;li&gt;Other Optimization Tips&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;数据库应用程序的核心逻辑是通过 &lt;code&gt;SQL&lt;&#x2F;code&gt; 语句执行的，无论这些 &lt;code&gt;SQL&lt;&#x2F;code&gt; 语句是通过解释程序直接发出还是通过调用 &lt;code&gt;API&lt;&#x2F;code&gt; 提交。之后提到的调整准则有助于加快各种使用到 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 应用程序的速度。指南涵盖了读写数据的 &lt;code&gt;SQL&lt;&#x2F;code&gt; 操作，通用 &lt;code&gt;SQL&lt;&#x2F;code&gt; 操作的底层开销以及在特定方案（例如数据库监视）中使用的操作。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>MySQL 性能优化概述</title>
		<published>2020-07-27T21:43:22+00:00</published>
		<updated>2020-07-27T21:43:22+00:00</updated>
		<link href="https://blog.kiyoko.io/mysql-optimization-overview/" type="text/html"/>
		<id>https://blog.kiyoko.io/mysql-optimization-overview/</id>
		<content type="html">&lt;p&gt;在软件层面，数据库的性能会受到表结构，查询语句和数据库系统配置等几个方面的影响。这些软件层面的因素会直接决定 CPU 和 I&#x2F;O 等硬件如何操作。我们要努力做到硬件操作的最小化。&lt;&#x2F;p&gt;
&lt;p&gt;对于研究数据库性能的初学者而言，可以从学习数据库的高级规则和准则开始，学会使用时钟时间来作为衡量性能的指标。而对于那些想要成为数据库性能优化领域的专家的人来说，则需要他们了解更多关于数据库底层的知识，能使用更具有一般性的指标，诸如 CPU 周期和 I&#x2F;O 操作等来衡量性能。&lt;&#x2F;p&gt;
&lt;p&gt;大部分的用户，希望从其现有的软件和硬件配置中获得最佳的数据库性能。进阶用户则专注于寻找机会改进 MySQL 软件本身，或者开发自己的存储引擎和硬件设备以扩展 MySQL 生态系统。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zai-shu-ju-ku-ji-bie-jin-xing-you-hua&quot;&gt;在数据库级别进行优化&lt;&#x2F;h2&gt;
&lt;p&gt;使数据库应用程序快速运行的最重要因素是其基本设计：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;表格的结构是否正确？ 特别是，这些列是否具有正确的数据类型，并且每个表都具有适合于该工作类型的列吗？ 例如，执行频繁更新的应用程序通常具有许多表而具有很少的列，而分析大量数据的应用程序通常具有很少的表而具有很多列。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;是否安装了正确的&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimization-indexes.html&quot;&gt;索引&lt;&#x2F;a&gt;以提高查询效率？&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;您是否为每个表使用了适当的存储引擎，并利用了所使用的每个存储引擎的优势和功能？ 特别是，对于性能和可伸缩性而言，选择事务存储引擎（例如 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimizing-innodb.html&quot;&gt;InnoDB&lt;&#x2F;a&gt;）或非事务存储引擎（例如 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimizing-myisam.html&quot;&gt;MyISAM&lt;&#x2F;a&gt;）可能非常重要。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意
&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 是新表的默认存储引擎。 实际上，先进的 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 性能功能意味着 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 表通常优于简单的 &lt;code&gt;MyISAM&lt;&#x2F;code&gt; 表，尤其是对于繁忙的数据库。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;每个表都使用适当的行格式吗？ 该选择还取决于表使用的存储引擎。 特别是，压缩表使用较少的磁盘空间，因此需要较少的磁盘I &#x2F; O来读取和写入数据。 压缩可用于带有 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 表的所有类型的工作负载以及只读的 &lt;code&gt;MyISAM&lt;&#x2F;code&gt; 表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;应用程序是否使用适当的&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;locking-issues.html&quot;&gt;锁定策略&lt;&#x2F;a&gt;？ 例如，通过在可能的情况下允许共享访问，以便数据库操作可以同时运行，并在适当的时候请求独占访问，以使关键操作获得最高优先级。 同样，存储引擎的选择很重要。 InnoDB存储引擎无需您的参与即可处理大多数锁定问题，从而可以更好地并发数据库并减少代码的试验和调整量。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;用于&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;buffering-caching.html&quot;&gt;缓存&lt;&#x2F;a&gt;的所有内存区域大小是否正确？ 也就是说，足够大以容纳经常访问的数据，但又不能太大以至于它们会使物理内存过载并导致分页。 要配置的主要内存区域是 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 缓冲池和 &lt;code&gt;MyISAM&lt;&#x2F;code&gt; 密钥缓存。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zai-ying-jian-ji-bie-jin-xing-you-hua&quot;&gt;在硬件级别进行优化&lt;&#x2F;h2&gt;
&lt;p&gt;随着数据库变得越来越繁忙，任何数据库应用程序最终都会达到硬件极限。 DBA必须评估是否有可能调整应用程序或重新配置服务器以避免这些&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;glossary.html#glos_bottleneck&quot;&gt;瓶颈&lt;&#x2F;a&gt;，或者是否需要更多的硬件资源。 系统瓶颈通常来自以下来源：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;磁盘搜寻。 磁盘查找数据需要花费时间。 对于现代磁盘，此操作的平均时间通常小于10毫秒，因此理论上我们可以执行100次搜索。 这段时间随着新磁盘的使用而缓慢改善，并且很难为单个表进行优化。 优化寻道时间的方法是将数据分发到多个磁盘上。&lt;&#x2F;li&gt;
&lt;li&gt;磁盘读写。 当磁盘位于正确的位置时，我们需要读取或写入数据。 对于现代磁盘，一个磁盘至少可提供10–20MB &#x2F; s的吞吐量。 与查找相比，优化起来更容易，因为您可以从多个磁盘并行读取。&lt;&#x2F;li&gt;
&lt;li&gt;CPU周期。 当数据位于主存储器中时，我们必须对其进行处理以获得结果。 与内存量相比，拥有较大的表是最常见的限制因素。 但是对于小桌子，速度通常不是问题。&lt;&#x2F;li&gt;
&lt;li&gt;内存带宽。 当CPU需要的数据超出CPU缓存的容量时，主内存带宽将成为瓶颈。 对于大多数系统来说，这是一个不常见的瓶颈，但是要意识到这一点。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ping-heng-bian-xi-xing-he-xing-neng&quot;&gt;平衡便携性和性能&lt;&#x2F;h2&gt;
&lt;p&gt;MySQL 支持在 SQL 注释中（&lt;code&gt;&#x2F;*！*&#x2F;&lt;&#x2F;code&gt;）通过特定的关键字来指定优化策略。而且，因为是在注释中，会被其他的 SQL 服务忽略，因此，SQL 语句仍然是可移植的。有关编写注释的信息，请参见 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimizer-hints.html&quot;&gt;8.9.3 优化器提示&lt;&#x2F;a&gt;，&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;comments.html&quot;&gt;9.6 注释语法&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>使用 GPG 签名认证 git 提交</title>
		<published>2020-07-26T09:43:46+00:00</published>
		<updated>2020-07-26T09:43:46+00:00</updated>
		<link href="https://blog.kiyoko.io/signing-git-commits-with-gpg/" type="text/html"/>
		<id>https://blog.kiyoko.io/signing-git-commits-with-gpg/</id>
		<content type="html">&lt;h2 id=&quot;install-gpg&quot;&gt;Install GPG&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;macos&quot;&gt;MacOS&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;brew&lt;&#x2F;span&gt;&lt;span&gt; install pinentry-mac gpg2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;touch  ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.gnupg&#x2F;gpg-agent.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pinentry-program &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pinentry-mac&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.gnupg&#x2F;gpg-agent.conf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;archlinux&quot;&gt;Archlinux&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yay -S&lt;&#x2F;span&gt;&lt;span&gt; gunpg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;configure&quot;&gt;Configure&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;generate-key&quot;&gt;Generate key&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg --full-gen-key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;list-keys&quot;&gt;List keys&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg --list-secret-keys --keyid-format&lt;&#x2F;span&gt;&lt;span&gt; LONG
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# &#x2F;home&#x2F;username&#x2F;.gnupg&#x2F;pubring.kbx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# -------------------------------------
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# sec   rsa4096&#x2F;1111111111111111 2019-08-07 [SC]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#       2222222222222222222222221111111111111111
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# uid                 [ultimate] realname (comment) &amp;lt;example@gmail.com&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ssb   rsa4096&#x2F;3333333333333333 2019-08-07 [E]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;export-public-key&quot;&gt;Export public key&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg --armor --export&lt;&#x2F;span&gt;&lt;span&gt; 1111111111111111
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# -----BEGIN PGP PUBLIC KEY BLOCK-----
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# CONTENT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# -----END PGP PUBLIC KEY BLOCK-----
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;register-public-key&quot;&gt;Register public key&lt;&#x2F;h3&gt;
&lt;p&gt;将上面的 &lt;code&gt;public key&lt;&#x2F;code&gt; 拷贝到 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;settings&#x2F;keys&quot;&gt;github settings&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;associating-your-gpg-key-with-git&quot;&gt;Associating your GPG key with Git&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;set-gpg-key&quot;&gt;Set gpg key&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --local&lt;&#x2F;span&gt;&lt;span&gt; user.signingKey 1111111111111111
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;signing-commits&quot;&gt;Signing commits&lt;&#x2F;h3&gt;
&lt;p&gt;在提交时，使用 &lt;code&gt;-S&lt;&#x2F;code&gt; 标志&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -S -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;commit message&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者通过配置避免每次都要输入 &lt;code&gt;-S&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --global&lt;&#x2F;span&gt;&lt;span&gt; commit.gpgsign true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;fqa&quot;&gt;FQA&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;gpg: signing failed: Inappropriate ioctl for device&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export GPG_TTY=&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;GPG Hangs When Private Keys are Accessed&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpgconf --kill&lt;&#x2F;span&gt;&lt;span&gt; gpg-agent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;secret key not available&lt;&#x2F;code&gt; or &lt;code&gt;gpg: signing failed: secret key not available&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --global&lt;&#x2F;span&gt;&lt;span&gt; gpg.program gpg2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
</feed>
