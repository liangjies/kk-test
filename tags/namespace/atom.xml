<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>不是在改BUG，就是在改BUG的路上 - namespace</title>
	<link href="https://blog.kiyoko.io/tags/namespace/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.kiyoko.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-08-17T20:25:09+00:00</updated>
	<id>https://blog.kiyoko.io/tags/namespace/atom.xml</id>
	<entry xml:lang="en">
		<title>容器 - 隔离与限制</title>
		<published>2020-08-17T20:25:09+00:00</published>
		<updated>2020-08-17T20:25:09+00:00</updated>
		<link href="https://blog.kiyoko.io/namespace-and-cgroup/" type="text/html"/>
		<id>https://blog.kiyoko.io/namespace-and-cgroup/</id>
		<content type="html">&lt;p&gt;容器技术的本质是一种沙盒技术，可以将应用及相关配置、脚本 &lt;strong&gt;装&lt;&#x2F;strong&gt; 到一个 &lt;strong&gt;箱子&lt;&#x2F;strong&gt; 中。这样，多个应用之间就会因为有了边界而避免相互干扰。并且，应用被装进箱子后，也便于移动。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jin-cheng&quot;&gt;进程&lt;&#x2F;h2&gt;
&lt;p&gt;要实现一个程序，从一个文件读取两个整数，将计算结果写入到另一个文件中，则至少需要有三个文件:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;可执行文件&lt;&#x2F;li&gt;
&lt;li&gt;输入文件&lt;&#x2F;li&gt;
&lt;li&gt;输出文件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;由于计算机只认识 &lt;code&gt;0&lt;&#x2F;code&gt; 和 &lt;code&gt;1&lt;&#x2F;code&gt;，因此无论用哪种语言编写这段代码，最后这三个文件都需要通过某种方式翻译成二进制文件，才能在计算机操作系统中运行与使用。初始状态时，三个文件都存放在磁盘上。可执行文件被称作 &lt;strong&gt;程序&lt;&#x2F;strong&gt;，剩余两个文件是 &lt;strong&gt;数据&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;要完成功能，需要在计算机上执行这个程序。&lt;&#x2F;p&gt;
&lt;p&gt;首先，操作系统将 &lt;strong&gt;程序&lt;&#x2F;strong&gt; 载入到内存中，表现为指令序列。在执行过程中，当执行到从文件加载输入数据的指令时，操作系统控制存储控制器完成将数据从磁盘载入到内存。之后，操作系统读取到计算加法的指令时，通过 &lt;code&gt;CPU&lt;&#x2F;code&gt;、寄存器与内存的共同协作完成加法计算将计算结果暂存在内存中。最后，执行将结果保存到文件的指令时，操作系统会通过存储控制器，将内存中的结果写入到磁盘上。同时，操作系统中还需要维护其他状态，辅助这一过程顺利进行。&lt;&#x2F;p&gt;
&lt;p&gt;在操作系统中，将上述过程所涉及到的总和称作: 进程。&lt;&#x2F;p&gt;
&lt;p&gt;而容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造出一个 &lt;strong&gt;边界&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;对于 &lt;code&gt;Docker&lt;&#x2F;code&gt; 等大多数 &lt;code&gt;Linux&lt;&#x2F;code&gt; 容器来说，使用 &lt;code&gt;cgroups&lt;&#x2F;code&gt; 技术来制造约束，使用 &lt;code&gt;namespace&lt;&#x2F;code&gt; 技术来修改进程视图。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chuang-jian-rong-qi&quot;&gt;创建容器&lt;&#x2F;h2&gt;
&lt;p&gt;首先创建一个容器:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --help
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Usage:&lt;&#x2F;span&gt;&lt;span&gt;  docker run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;OPTIONS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; IMAGE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;COMMAND&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt;ARG...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -it&lt;&#x2F;span&gt;&lt;span&gt; busybox &#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unable&lt;&#x2F;span&gt;&lt;span&gt; to find image &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;busybox:latest&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; locally
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;latest:&lt;&#x2F;span&gt;&lt;span&gt; Pulling from library&#x2F;busybox
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;91f30d776fb2:&lt;&#x2F;span&gt;&lt;span&gt; Pull complete
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Digest:&lt;&#x2F;span&gt;&lt;span&gt; sha256:9ddee63a712cea977267342e8750ecbc60d3aab25f04ceacfa795e6fce341793
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Status:&lt;&#x2F;span&gt;&lt;span&gt; Downloaded newer image for busybox:latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;参数 &lt;code&gt;-it&lt;&#x2F;code&gt; 的含义是&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-i&lt;&#x2F;strong&gt;: --interactive     Keep STDIN open even if not attached&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;-t&lt;&#x2F;strong&gt;, --tty             Allocate a pseudo-TTY&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;结果就是，在操作系统中创建了一个容器，该容器中执行的程序为 &lt;code&gt;&#x2F;bin&#x2F;sh&lt;&#x2F;code&gt;。并且，在容器启动之后，申请了一个随机的 &lt;code&gt;tty&lt;&#x2F;code&gt;，使用交互方式访问这个容器。&lt;&#x2F;p&gt;
&lt;p&gt;现在，执行 &lt;code&gt;ps&lt;&#x2F;code&gt; 指令，结果真是 &lt;strong&gt;Amazing&lt;&#x2F;strong&gt; 啊:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PID&lt;&#x2F;span&gt;&lt;span&gt;   USER     TIME  COMMAND
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; root      0:00 &#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt; root      0:00 ps
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在创建容器时指定的 &lt;code&gt;&#x2F;bin&#x2F;sh&lt;&#x2F;code&gt; 进程，竟然就是容器内部的第一个进程&lt;code&gt;(pid=1)&lt;&#x2F;code&gt;，并且，这个容器内只有两个进程正在运行中，另一个进程是正在执行的 &lt;code&gt;ps&lt;&#x2F;code&gt; 指令。&lt;&#x2F;p&gt;
&lt;p&gt;而这正是 &lt;code&gt;namespace&lt;&#x2F;code&gt; 技术的神奇之处。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;namespace&quot;&gt;Namespace&lt;&#x2F;h2&gt;
&lt;p&gt;首先，通过 &lt;code&gt;manpages&lt;&#x2F;code&gt; 对 &lt;code&gt;namespace&lt;&#x2F;code&gt; 有一个初步的了解:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; man namespaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAMESPACES&lt;&#x2F;span&gt;&lt;span&gt;(7)                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; Programmer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s Manual                       NAMESPACES(7)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NAME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       namespaces - overview of Linux namespaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DESCRIPTION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       A namespace wraps a global system resource in an abstraction that makes it appear to the processes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       within the namespace that they have their own isolated instance of the global resource. Changes to
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       the global resource are visible to other processes that are members of the namespace, but are
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       invisible to other processes. One use of namespaces is to implement containers.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       This page provides pointers to information on the various namespace types, describes the associated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      &#x2F;proc files, and summarizes the APIs for working with namespaces.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;总的来说，&lt;code&gt;Linux Namespace&lt;&#x2F;code&gt; 提供了一种内核级别隔离系统资源的方法，通过将系统的全局资源放在不同的 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 中，来实现资源隔离的目的。不同 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 的程序，可以享有一份独立的系统资源。目前 &lt;code&gt;Linux&lt;&#x2F;code&gt; 中提供了以下几种系统资源的隔离机制：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Namespace&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Flag&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Page&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Isolates&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Cgroup&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWCGROUP&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;cgroup_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Cgroup root directory&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;IPC&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWIPC&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;ipc_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;System V IPC, POSIX message queues&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Network&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWNET&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;network_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Network devices, stacks, ports, etc.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Mount&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWNS&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;mount_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Mount points&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;PID&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWPID&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;pid_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Process IDs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Time&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWTIME&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;time_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Boot and monotonic clocks&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;User&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWUSER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;user_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;User and group IDs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;UTS&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWUTS&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;uts_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Hostname and NIS domain name&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;ru-he-shi-yong-namespace-ji-zhu&quot;&gt;如何使用 Namespace 技术&lt;&#x2F;h3&gt;
&lt;p&gt;以 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt; 为例，简单说明如何在编程中使用这种技术。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;&#x2F;code&gt; 实现 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 机制的方式，是通过在创建进程的时候，传入特定的选项。更具体一些，就是在调用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; man 2 clone
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CLONE&lt;&#x2F;span&gt;&lt;span&gt;(2)                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; Programmer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s Manual                           CLONE(2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NAME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       clone, __clone2, clone3 - create a child process
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SYNOPSIS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       &#x2F;* Prototype for the glibc wrapper function *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       #define _GNU_SOURCE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       #include &amp;lt;sched.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       int clone(int (*fn)(void *), void *stack, int flags, void *arg, ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                 &#x2F;* pid_t *parent_tid, void *tls, pid_t *child_tid *&#x2F; );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;系统调用时，传入对应的 &lt;code&gt;Flag&lt;&#x2F;code&gt; 作为参数 &lt;code&gt;flag&lt;&#x2F;code&gt; 的值。比如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; pid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(main_function, stack_size, SIGCHLD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就会创建一个新的进程，并且返回它的进程号 &lt;code&gt;pid&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;如果，同时指定 &lt;code&gt;CLONE_NEWPID&lt;&#x2F;code&gt; 参数:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; pid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(main_function, stack_size, CLONE_NEWPID | SIGCHLD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;新创建进程将会 &lt;strong&gt;看到&lt;&#x2F;strong&gt; 一个全新的进程空间，在这个进程空间里，它的 &lt;code&gt;pid&lt;&#x2F;code&gt; 是 &lt;code&gt;1&lt;&#x2F;code&gt;。之所以说 &lt;strong&gt;看到&lt;&#x2F;strong&gt;，是因为这只是一个 &lt;strong&gt;障眼法&lt;&#x2F;strong&gt;，在宿主机真实的进程空间里，这个进程的 &lt;code&gt;pid&lt;&#x2F;code&gt; 还是真实的数值，比如 &lt;code&gt;404&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;如果多次执行上面的 &lt;code&gt;clone()&lt;&#x2F;code&gt; 调用，就会创建多个 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt;，而每个 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 里的应用进程都会认为自己是当前容器里的 &lt;strong&gt;第 1 号进程&lt;&#x2F;strong&gt;，它们既看不到宿主机里真正的进程空间，也看不到其他 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt; 里的具体情况。&lt;&#x2F;p&gt;
&lt;p&gt;而其他的几种 &lt;code&gt;Namespace&lt;&#x2F;code&gt;，在写法上与 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt; 是相同的，区别只在于目的不同。&lt;&#x2F;p&gt;
&lt;p&gt;所以，&lt;code&gt;Docker&lt;&#x2F;code&gt; 容器这个听起来玄而又玄的概念，实际上是在创建容器进程时，指定了这个进程所需要启用的一组 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 参数。这样，容器就只能 &lt;strong&gt;看到&lt;&#x2F;strong&gt; 当前 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 所限定的资源、文件、设备、状态，或者配置。而对于宿主机以及其他不相关的程序，它就完全看不到了。&lt;&#x2F;p&gt;
&lt;p&gt;本质仍旧是进程。因此，在之前出现过的虚拟机对比容器的图片中，才没有出现 &lt;code&gt;Docker&lt;&#x2F;code&gt; 的位置。因为，容器只是通过 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 技术被隔离的进程，与其他进程一样，也是直接运行在宿主机操作系统之上的。&lt;code&gt;Docker&lt;&#x2F;code&gt; 只是充当了一个管理者的身份。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;what-is-the-docker&#x2F;virtualization-vs-containers.png&quot; alt=&quot;virtualization-vs-containers&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;既然，虚拟机与容器是两种不同的技术，那么二者之间就应该有一些区别。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rong-qi-de-you-shi&quot;&gt;容器的优势&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;zhan-yong-zi-yuan-xiao&quot;&gt;占用资源小&lt;&#x2F;h5&gt;
&lt;p&gt;容器占用的内存，要比同等功能的虚拟机占用的内存小，因为虚拟机本身也需要消耗一定的资源。比如，运行 &lt;code&gt;CentOS&lt;&#x2F;code&gt; 的 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机至少需要 &lt;code&gt;100 ~ 200 MB&lt;&#x2F;code&gt; 的内存&lt;&#x2F;p&gt;
&lt;h5 id=&quot;geng-hao-de-i-o-xing-neng&quot;&gt;更好的 I&#x2F;O 性能&lt;&#x2F;h5&gt;
&lt;p&gt;在参考阅读 &lt;a href=&quot;https:&#x2F;&#x2F;dominoweb.draco.res.ibm.com&#x2F;reports&#x2F;rc25482.pdf&quot;&gt;An Updated Performance Comparison of Virtual Machines and Linux Containers&lt;&#x2F;a&gt; 中显示&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在随机读写场景中，无论是 &lt;code&gt;iops&lt;&#x2F;code&gt; 还是 &lt;code&gt;latency&lt;&#x2F;code&gt;，容器的性能都接近于物理机性能，远好于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机&lt;&#x2F;li&gt;
&lt;li&gt;在顺序读写场景中，容器的性能基本与物理机性能，略好于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;host network&lt;&#x2F;code&gt; 场景中，容器的性能接近于物理机的性能，好于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;nat network&lt;&#x2F;code&gt; 场景中，容器的性能略逊于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机，但差别不大&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;总的来说，容器的 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 性能优于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rong-qi-de-lie-shi&quot;&gt;容器的劣势&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;ping-tai-yi-lai-xing&quot;&gt;平台依赖性&lt;&#x2F;h5&gt;
&lt;ul&gt;
&lt;li&gt;尽管，可以通过 &lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 的方式挂起与宿主机不同的 &lt;code&gt;Linux&lt;&#x2F;code&gt; 发行版，但容器中进程使用的内核依然是宿主机的内核。
&lt;ul&gt;
&lt;li&gt;因此 &lt;code&gt;Windows&lt;&#x2F;code&gt; 耗费了那么长的时间才对容器技术有了比较好的支持。&lt;&#x2F;li&gt;
&lt;li&gt;同样，也无法在低版本内核的宿主机上运行高版本内核的容器。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;you-xian-de-ge-chi&quot;&gt;有限的隔离&lt;&#x2F;h5&gt;
&lt;p&gt;部分资源无法被隔离，比如 &lt;strong&gt;时间&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;如果在容器中调用 &lt;code&gt;settimeofday(2)&lt;&#x2F;code&gt; 系统调用修改系统时间，会导致宿主机系统的时间被修改，这显然是一个很可怕的事情。因此，在使用容器的时候必须要了解 &lt;strong&gt;什么能做，什么不能做&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cgroup&quot;&gt;Cgroup&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Namespace&lt;&#x2F;code&gt; 技术的作用是隔离进程，但只有隔离是不够的。虽然，容器内的进程无法感知到其他运行在宿主机上的进程或容器，但从操作系统的角度而言，所有的进程与容器都是平等的地位。这就意味着，虽然容器是一个独立的小空间，但其可用的资源仍旧与其他进程之间有着竞争的关系。&lt;&#x2F;p&gt;
&lt;p&gt;因此，就需要用到 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 技术的帮助了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Cgroup&lt;&#x2F;code&gt; 全称为 &lt;code&gt;Control Group&lt;&#x2F;code&gt;，用途是限制一个进程组能够使用的资源上限，包括 &lt;code&gt;CPU&lt;&#x2F;code&gt;、&lt;code&gt;MEM&lt;&#x2F;code&gt;、&lt;code&gt;DISK&lt;&#x2F;code&gt;、&lt;code&gt;NETWORK&lt;&#x2F;code&gt; 等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cgroup-in-action&quot;&gt;Cgroup In Action&lt;&#x2F;h3&gt;
&lt;p&gt;在 &lt;code&gt;Linux&lt;&#x2F;code&gt; 中 &lt;code&gt;Everything is a file&lt;&#x2F;code&gt;，因此，操作 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 的途径也是通过文件系统。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; cgroup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu type cgroup (rw,nosuid,nodev,noexec,relatime,cpu)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;net_cls type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_prio)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;rdma type cgroup (rw,nosuid,nodev,noexec,relatime,rdma)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，&lt;code&gt;Cgroup&lt;&#x2F;code&gt; 是一系列定义在 &lt;code&gt;&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;&lt;&#x2F;code&gt; 目录下的各种文件或文件夹。每一个文件夹都被用来限制某一种特定的资源。以 &lt;code&gt;cpu&lt;&#x2F;code&gt; 资源为例:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;000-metadata&lt;&#x2F;span&gt;&lt;span&gt;  cgroup.clone_children  cpu.cfs_period_us  cpu.rt_runtime_us  docker    notify_on_release  systemreserved
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;001-binfmt&lt;&#x2F;span&gt;&lt;span&gt;    cgroup.procs           cpu.cfs_quota_us   cpu.shares         kmsg      podruntime         tasks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;002-bridge&lt;&#x2F;span&gt;&lt;span&gt;    cgroup.sane_behavior   cpu.rt_period_us   cpu.stat           kubepods  release_agent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;列举了限制 &lt;code&gt;cpu&lt;&#x2F;code&gt; 资源的各种参数选项。&lt;&#x2F;p&gt;
&lt;p&gt;使用 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 的方式非常简单，在对应的资源目录下面创建一个目录，比如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup.clone_children&lt;&#x2F;span&gt;&lt;span&gt;  cpu.cfs_period_us  cpu.rt_period_us   cpu.shares  notify_on_release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup.procs&lt;&#x2F;span&gt;&lt;span&gt;           cpu.cfs_quota_us   cpu.rt_runtime_us  cpu.stat    tasks
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个目录被称作 &lt;strong&gt;控制组&lt;&#x2F;strong&gt;，&lt;code&gt;Linux&lt;&#x2F;code&gt; 会在控制组下自动创建各种资源限制文件。&lt;&#x2F;p&gt;
&lt;p&gt;然后，在后台执行脚本:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; while : ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt; 12555
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;显然，这是一个死循环进程，会占用 &lt;code&gt;100%&lt;&#x2F;code&gt; 的 &lt;code&gt;CPU&lt;&#x2F;code&gt;。使用 &lt;code&gt;top&lt;&#x2F;code&gt; 指令，也可以确认确实使用了 &lt;code&gt;100%&lt;&#x2F;code&gt; 的 &lt;code&gt;CPU&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 12555
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt; - 21:00:26 up  4:43,  0 users,  load average: 0.66, 0.66, 0.56
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tasks:&lt;&#x2F;span&gt;&lt;span&gt;   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie
&lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cpu&lt;&#x2F;span&gt;&lt;span&gt;(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;  0.0 us,  2.5 sy,  3.7 ni, 93.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span&gt; Mem :   7958.1 total,   5885.9 free,    539.2 used,   1533.0 buff&#x2F;cache
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span&gt; Swap:  16384.0 total,  16384.0 free,      0.0 used.   7183.5 avail Mem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PID&lt;&#x2F;span&gt;&lt;span&gt; USER      PR  NI    VIRT    RES    SHR S  %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MEM&lt;&#x2F;span&gt;&lt;span&gt;     TIME+ COMMAND
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;12555&lt;&#x2F;span&gt;&lt;span&gt; diviner+  25   5   13576   4816      0 R 100.0   0.1   0:46.30 zsh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来，是时候展现 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 的魔法了。首先，查看两个接下来要使用的关键文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container&#x2F;cpu.cfs_quota_us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container&#x2F;cpu.cfs_period_us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;100000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cfs_period_us&lt;&#x2F;strong&gt;: 资源组获取资源的时间周期，单位微妙&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;cfs_quota_us&lt;&#x2F;strong&gt;: 在获取资源时间周期内获得资源的时间，单位微妙&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;所以 &lt;code&gt;usage = cfs_quota_us &#x2F; cfs_period_us&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;为了验证这一点，尝试将进程的 &lt;code&gt;CPU&lt;&#x2F;code&gt; 使用率控制在 &lt;code&gt;20%&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;首先，根据上面推测的公式，因为 &lt;code&gt;cfs_period_us = 100000&lt;&#x2F;code&gt;，所以应该修改 &lt;code&gt;cfs_quota_us&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; 20000 | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container&#x2F;cpu.cfs_quota_us
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但这还不够，还需要将被限制的进程的 &lt;code&gt;PID&lt;&#x2F;code&gt; 写入到 &lt;strong&gt;控制组&lt;&#x2F;strong&gt; &lt;code&gt;container&lt;&#x2F;code&gt; 的 &lt;code&gt;tasks&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; 12555 | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container&#x2F;tasks
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后使用 &lt;code&gt;top&lt;&#x2F;code&gt; 查看:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt; - 21:09:11 up  4:52,  0 users,  load average: 0.41, 0.76, 0.70
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tasks:&lt;&#x2F;span&gt;&lt;span&gt;   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie
&lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cpu&lt;&#x2F;span&gt;&lt;span&gt;(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;  0.0 us,  0.8 sy,  0.9 ni, 98.4 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span&gt; Mem :   7958.1 total,   5883.8 free,    541.1 used,   1533.1 buff&#x2F;cache
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span&gt; Swap:  16384.0 total,  16384.0 free,      0.0 used.   7181.6 avail Mem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PID&lt;&#x2F;span&gt;&lt;span&gt; USER      PR  NI    VIRT    RES    SHR S  %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MEM&lt;&#x2F;span&gt;&lt;span&gt;     TIME+ COMMAND
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;12555&lt;&#x2F;span&gt;&lt;span&gt; diviner+  25   5   13576   4816      0 R  20.0   0.1   8:17.25 zsh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Linux Cgroups&lt;&#x2F;code&gt; 的设计还是比较易用的，可以简单地理解为，一个子系统目录加上一组资源限制文件的组合。而对于 &lt;code&gt;Docker&lt;&#x2F;code&gt; 等 &lt;code&gt;Linux&lt;&#x2F;code&gt; 容器项目来说，它们只需要在每个子系统下面，为每个容器创建一个&lt;strong&gt;控制组&lt;&#x2F;strong&gt; (即创建一个新目录)，然后在启动容器进程之后，把这个进程的 &lt;code&gt;PID&lt;&#x2F;code&gt; 填写到对应控制组的 &lt;code&gt;tasks&lt;&#x2F;code&gt; 文件中就可以了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cgroup-in-docker&quot;&gt;Cgroup in Docker&lt;&#x2F;h2&gt;
&lt;p&gt;在通过 &lt;code&gt;Docker&lt;&#x2F;code&gt; 启动容器的时候，也可以限制 &lt;code&gt;cpu&lt;&#x2F;code&gt; 使用率:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -it --cpu-period&lt;&#x2F;span&gt;&lt;span&gt;=100000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --cpu-quota&lt;&#x2F;span&gt;&lt;span&gt;=20000 ubuntu &#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;611f8f2c0c7613c2f3f3964e7dc3dbe407c74689e376736e34d7fe4735ec95d4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;docker&#x2F;611f8f2c0c7613c2f3f3964e7dc3dbe407c74689e376736e34d7fe4735ec95d4&#x2F;cpu.cfs_period_us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;100000
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;docker&#x2F;611f8f2c0c7613c2f3f3964e7dc3dbe407c74689e376736e34d7fe4735ec95d4&#x2F;cpu.cfs_quota_us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;20000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时，这个容器最多只能使用 &lt;code&gt;20%&lt;&#x2F;code&gt; 的 &lt;code&gt;CPU&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-yue-du&quot;&gt;参考阅读&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dominoweb.draco.res.ibm.com&#x2F;reports&#x2F;rc25482.pdf&quot;&gt;An Updated Performance Comparison of Virtual Machines and Linux Containers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
