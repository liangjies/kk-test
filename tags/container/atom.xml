<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>不是在改BUG，就是在改BUG的路上 - container</title>
	<link href="https://blog.kiyoko.io/tags/container/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.kiyoko.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-11-30T10:22:26+00:00</updated>
	<id>https://blog.kiyoko.io/tags/container/atom.xml</id>
	<entry xml:lang="en">
		<title>设置容器内的 locale</title>
		<published>2020-11-30T10:22:26+00:00</published>
		<updated>2020-11-30T10:22:26+00:00</updated>
		<link href="https://blog.kiyoko.io/set-locale-inside-a-container/" type="text/html"/>
		<id>https://blog.kiyoko.io/set-locale-inside-a-container/</id>
		<content type="html">&lt;p&gt;解决办法面向 &lt;strong&gt;Ubuntu&#x2F;Debian&lt;&#x2F;strong&gt; 系列，&lt;strong&gt;CentOS&lt;&#x2F;strong&gt; 系列方法类似。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zai-rong-qi-nei-chu-li&quot;&gt;在容器内处理&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --fix-missing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; locales
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sed -i &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;en_US.UTF-8&#x2F;s&#x2F;^# &#x2F;&#x2F;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &#x2F;etc&#x2F;locale.gen
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;locale-gen
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export LANG=en_US.UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export LANGUAGE=en_US.UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export LC_ALL=en_US.UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.vimrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set termencoding=utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.vimrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set encoding=utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.vimrc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zai-dockerfile-zhong-chu-li&quot;&gt;在 Dockerfile 中处理&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span&gt;RUN apt update --fix-missing \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;&amp;amp; apt install -y locales \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;&amp;amp; sed -i &amp;#39;&#x2F;en_US.UTF-8&#x2F;s&#x2F;^# &#x2F;&#x2F;g&amp;#39; &#x2F;etc&#x2F;locale.gen \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;&amp;amp; locale-gen
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;RUN echo &amp;quot;set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936&amp;quot; &amp;gt;&amp;gt; ~&#x2F;.vimrc \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;&amp;amp; echo &amp;quot;set termencoding=utf-8&amp;quot; &amp;gt;&amp;gt; ~&#x2F;.vimrc \
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;&amp;amp; echo &amp;quot;set encoding=utf-8&amp;quot; &amp;gt;&amp;gt; ~&#x2F;.vimrc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ENV LANG en_US.UTF-8
&lt;&#x2F;span&gt;&lt;span&gt;ENV LANGUAGE en_US.UTF-8
&lt;&#x2F;span&gt;&lt;span&gt;ENV LC_ALL en_US.UTF-8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>容器 - 深入理解镜像</title>
		<published>2020-08-20T09:50:18+00:00</published>
		<updated>2020-08-20T09:50:18+00:00</updated>
		<link href="https://blog.kiyoko.io/docker-image/" type="text/html"/>
		<id>https://blog.kiyoko.io/docker-image/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;Namespace&lt;&#x2F;code&gt; 与 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 技术是容器技术的核心点，但 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目的成功关键点却要归功于 &lt;code&gt;Docker Image&lt;&#x2F;code&gt; 的发明。在 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 时代，&lt;strong&gt;上云&lt;&#x2F;strong&gt; 的过程需要经过多次 &lt;strong&gt;玄学调参&lt;&#x2F;strong&gt; 才能解决由于本地环境与云主机的差异性所导致的问题。&lt;code&gt;Docker&lt;&#x2F;code&gt; 则通过 &lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 与 &lt;code&gt;UnionFS&lt;&#x2F;code&gt; 技术，成功的解决了这个问题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mount-namespace&quot;&gt;Mount Namespace&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; man mount_namespace
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MOUNT_NAMESPACES&lt;&#x2F;span&gt;&lt;span&gt;(7)                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; Programmer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s Manual                 MOUNT_NAMESPACES(7)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NAME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       mount_namespaces - overview of Linux mount namespaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DESCRIPTION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       For an overview of namespaces, see namespaces(7).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       Mount namespaces provide isolation of the list of mount points seen by the processes in each
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       namespace instance. Thus, the processes in each of the mount namespace instances will see
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       distinct single-directory hierarchies.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       The views provided by the &#x2F;proc&#x2F;[pid]&#x2F;mounts, &#x2F;proc&#x2F;[pid]&#x2F;mountinfo, and &#x2F;proc&#x2F;[pid]&#x2F;mountstats
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       files (all described in proc(5)) correspond to the mount namespace in which the process with
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       the PID [pid] resides. (All of the processes that reside in the same mount namespace will see
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       the same view in these files.)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       A new mount namespace is created using either clone(2) or unshare(2) with the CLONE_NEWNS flag.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       When a new mount namespace is created, its mount point list is initialized as follows:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       * If the namespace is created using clone(2), the mount point list of the child&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;s namespace is
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt; copy of the mount point list in the parent&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s namespace.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       * If the namespace is created using unshare(2), the mount point list of the new namespace is a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         copy of the mount point list in the caller&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;s previous mount namespace.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Subsequent&lt;&#x2F;span&gt;&lt;span&gt; modifications to the mount point list (mount(2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt; umount(2)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; either mount
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt; will not (by default) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;affect&lt;&#x2F;span&gt;&lt;span&gt; the mount point list seen in the other namespace (but
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;see&lt;&#x2F;span&gt;&lt;span&gt; the following discussion of shared subtrees)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;简单来说，&lt;code&gt;Mount Namepace&lt;&#x2F;code&gt; 为进程提供独立的文件系统视图，即可以将进程的文件系统挂载到指定挂载点，从而是进程只能看到 &lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 中的文件系统。&lt;&#x2F;p&gt;
&lt;p&gt;接下来，还是通过代码展示。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mount-namespace-kai-fa&quot;&gt;Mount Namespace 开发&lt;&#x2F;h3&gt;
&lt;p&gt;下面的代码，使用 &lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 的方式通过 &lt;code&gt;clone(2)&lt;&#x2F;code&gt; 系统调用，创建一个新的进程。在该进程中执行 &lt;code&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;code&gt; 程序。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;_GNU_SOURCE
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;mount.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;types.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;wait.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sched.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;signal.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unistd.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;STACK_SIZE (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static char&lt;&#x2F;span&gt;&lt;span&gt; container_stack[STACK_SIZE];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; container_args[] = {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        NULL
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;container_main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Container - inside the container!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execv&lt;&#x2F;span&gt;&lt;span&gt;(container_args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], container_args);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Something&amp;#39;s wrong!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Parent - start a container!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; container_pid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(container_main, container_stack + STACK_SIZE, CLONE_NEWNS | SIGCHLD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(container_pid &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to create a new process&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waitpid&lt;&#x2F;span&gt;&lt;span&gt;(container_pid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Parent - container stopped!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;编译并运行程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; gcc main.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; mn; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;mn
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Parent&lt;&#x2F;span&gt;&lt;span&gt; - start a container!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt; - inside the container!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[root@zephyrus&lt;&#x2F;span&gt;&lt;span&gt; 01-mount-namespace]#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如此，就成功的进入到了容器环境内。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;注意&lt;&#x2F;em&gt;: 是要使用 &lt;code&gt;root&lt;&#x2F;code&gt; 权限执行这个程序。&lt;&#x2F;p&gt;
&lt;p&gt;然后，在容器内执行 &lt;code&gt;df -h&lt;&#x2F;code&gt; 指令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[root@zephyrus&lt;&#x2F;span&gt;&lt;span&gt; 01-mount-namespace]# df&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Filesystem&lt;&#x2F;span&gt;&lt;span&gt;      Size  Used Avail Use% Mounted on
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;dev&#x2F;sdd&lt;&#x2F;span&gt;&lt;span&gt;        251G   39G  200G  17% &#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tools&lt;&#x2F;span&gt;&lt;span&gt;           931G  362G  570G  39% &#x2F;init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G     0  2.0G   0% &#x2F;dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tmpfs&lt;&#x2F;span&gt;&lt;span&gt;           2.0G     0  2.0G   0% &#x2F;sys&#x2F;fs&#x2F;cgroup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G  8.0K  2.0G   1% &#x2F;run
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G     0  2.0G   0% &#x2F;run&#x2F;lock
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G     0  2.0G   0% &#x2F;run&#x2F;shm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G     0  2.0G   0% &#x2F;run&#x2F;user
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tmpfs&lt;&#x2F;span&gt;&lt;span&gt;           2.0G     0  2.0G   0% &#x2F;mnt&#x2F;wsl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;dev&#x2F;sdc&lt;&#x2F;span&gt;&lt;span&gt;        251G   11G  228G   5% &#x2F;mnt&#x2F;wsl&#x2F;docker-desktop-data&#x2F;isocache
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G   12K  2.0G   1% &#x2F;mnt&#x2F;wsl&#x2F;docker-desktop&#x2F;shared-sockets&#x2F;host-services
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;dev&#x2F;sdb&lt;&#x2F;span&gt;&lt;span&gt;        251G  117M  239G   1% &#x2F;mnt&#x2F;wsl&#x2F;docker-desktop&#x2F;docker-desktop-proxy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;dev&#x2F;loop0&lt;&#x2F;span&gt;&lt;span&gt;      231M  231M     0 100% &#x2F;mnt&#x2F;wsl&#x2F;docker-desktop&#x2F;cli-tools
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;C:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span&gt;            931G  362G  570G  39% &#x2F;mnt&#x2F;c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;会发现，解决与在宿主机上执行该命令的结果是相同的。这个结果很不好，甚至可以说很危险。因为，不但容器可以看到宿主机上的文件，甚至于还拥有 &lt;code&gt;root&lt;&#x2F;code&gt; 权限。接下来，尝试通过在容器中设置挂载点的方式解决这个问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mount-namespace-zhi-ding-gua-zai-dian&quot;&gt;Mount Namespace 指定挂载点&lt;&#x2F;h3&gt;
&lt;p&gt;修改 &lt;code&gt;container_main&lt;&#x2F;code&gt; 函数:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;container_main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Container - inside the container!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;tmp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tmpfs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execv&lt;&#x2F;span&gt;&lt;span&gt;(container_args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], container_args);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Something&amp;#39;s wrong!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用 &lt;code&gt;mount(2)&lt;&#x2F;code&gt; 系统调用，在容器进程中，增加一个挂载点。&lt;&#x2F;p&gt;
&lt;p&gt;使用 &lt;code&gt;ls&lt;&#x2F;code&gt; 指令确认 &lt;code&gt;&#x2F;tmp&lt;&#x2F;code&gt; 目录为空目录，说明挂载成功:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ls&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;之后，在确认一下系统的文件系统:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 在原来的文件系统基础之上会多出一个
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[root@zephyrus&lt;&#x2F;span&gt;&lt;span&gt; 01-mount-namespace]# df&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Filesystem&lt;&#x2F;span&gt;&lt;span&gt;      Size  Used Avail Use% Mounted on
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;            2.0G     0  2.0G   0% &#x2F;tmp
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[root@zephyrus&lt;&#x2F;span&gt;&lt;span&gt; 01-mount-namespace]# mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -l &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; tmpfs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;tmp type tmpfs (rw,relatime)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这些都可以说明，已经成功在容器内挂载了一个文件系统。而且，在宿主机上是无法看到这个挂载点的。到目前为止，一切都是按照预期发展的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mount-namespace-gua-zai-gen-mu-lu&quot;&gt;Mount Namespace 挂载根目录&lt;&#x2F;h3&gt;
&lt;p&gt;既然可以在容器内部挂载 &lt;code&gt;&#x2F;tmp&lt;&#x2F;code&gt;，那么现在来尝试挂载 &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;首先，准备一下必要的环境:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bash&lt;&#x2F;strong&gt;: 作为容器的第一个进程，允许在容器执行其他指令&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ls&lt;&#x2F;strong&gt;: 观察容器内的文件系统是否符合预期&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;lib&lt;&#x2F;strong&gt;: 存放 &lt;code&gt;bash&lt;&#x2F;code&gt; 与 &lt;code&gt;ls&lt;&#x2F;code&gt; 必须的动态链接库&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;}&#x2F;{bin,etc,lib,usr}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp -v&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;bin&#x2F;{bash,ls} ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;}&#x2F;bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp -v&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;profile ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;}&#x2F;etc&#x2F;profile
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ldd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &#x2F;bin&#x2F;ls &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;egrep -o &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;lib.*\.[0-9]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;awk -F &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{print $1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dirname &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp -v &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ldd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &#x2F;bin&#x2F;bash &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;egrep -o &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;lib.*\.[0-9]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;awk -F &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{print $1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dirname &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp -v &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;与上一个实验不同的是，现在期望容器内的文件系统与宿主机独立。即，使用不同的根目录。因此，在代码层面需要将之前的 &lt;code&gt;mount(2)&lt;&#x2F;code&gt; 系统调用，改变为 &lt;code&gt;chroot(2)&lt;&#x2F;code&gt; 系统调用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; man 2 chroot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CHROOT&lt;&#x2F;span&gt;&lt;span&gt;(2)                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; Programmer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s Manual                           CHROOT(2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NAME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       chroot - change root directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SYNOPSIS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       #include &amp;lt;unistd.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       int chroot(const char *path);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DESCRIPTION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       chroot() changes the root directory of the calling process to that specified in path. This
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       directory will be used for pathnames beginning with &#x2F;. The root directory is inherited by
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       all children of the calling process.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       Only a privileged process (Linux: one with the CAP_SYS_CHROOT capability in its user namespace)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       may call chroot().
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最终，函数 &lt;code&gt;container_main&lt;&#x2F;code&gt; 的代码为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;container_main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Container - inside the container!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; rev = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chroot&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;root&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;!= rev) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to chroot&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    rev = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chdir&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;!= rev) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to chdir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    rev = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execv&lt;&#x2F;span&gt;&lt;span&gt;(container_args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], container_args);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;!= rev) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to exec&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Something&amp;#39;s wrong!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;与之前一样，编译并执行程序，即可进入到容器内部:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; gcc main.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; mn; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;mn
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Parent&lt;&#x2F;span&gt;&lt;span&gt; - start a container!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt; - inside the container!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash-4.4#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后，执行 &lt;code&gt;ls&lt;&#x2F;code&gt; 可以看到根目录 &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; 的文件就是之前在 &lt;code&gt;root&lt;&#x2F;code&gt; 目录预先准备好的文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash-4.4#&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span&gt;  etc  lib  lib64  usr
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash-4.4#&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash&lt;&#x2F;span&gt;&lt;span&gt;  ls
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash-4.4#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;综上所述，如果在 &lt;code&gt;root&lt;&#x2F;code&gt; 目录中保存的是一个完成的操作系统，那么，就可以实现容器内的进程就可以使用内部的 &lt;code&gt;&#x2F;bin&lt;&#x2F;code&gt;，&lt;code&gt;&#x2F;lib&lt;&#x2F;code&gt; 的系统环境，从而与宿主机，与其他容器相互隔离的目的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bei-zhu&quot;&gt;备注&lt;&#x2F;h3&gt;
&lt;p&gt;挂载 &lt;code&gt;tmpfs&lt;&#x2F;code&gt; 实验的运行环境为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;os-release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Arch Linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRETTY_NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Arch Linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;arch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BUILD_ID&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rolling
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ANSI_COLOR&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;38;2;23;147;209&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.archlinux.org&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DOCUMENTATION_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SUPPORT_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;bbs.archlinux.org&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BUG_REPORT_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;bugs.archlinux.org&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LOGO&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;archlinux
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4.19.104-microsoft-standard
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;chroot&lt;&#x2F;code&gt; 实验的运行环境为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;os-release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Ubuntu&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18.04.4 LTS (Bionic Beaver)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID_LIKE&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;debian
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRETTY_NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Ubuntu 18.04.4 LTS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION_ID&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18.04&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.ubuntu.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SUPPORT_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;help.ubuntu.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BUG_REPORT_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;bugs.launchpad.net&#x2F;ubuntu&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIVACY_POLICY_URL&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.ubuntu.com&#x2F;legal&#x2F;terms-and-policies&#x2F;privacy-policy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION_CODENAME&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bionic
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UBUNTU_CODENAME&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bionic
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4.15.0-112-generic
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;unionfs&quot;&gt;UnionFS&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 时代，上云过程繁琐的根本原因在于: 本地环境与云主机环境不一致。&lt;&#x2F;p&gt;
&lt;p&gt;在狭义上，软件的依赖指编程时所使用的第三方库；广义上，依赖不止包括编程使用的第三方库，操作系统同样也是软件的依赖。&lt;&#x2F;p&gt;
&lt;p&gt;通过上面对 &lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 技术简单的实验，已经验证了在容器内打包一个完整的操作系统作为容器的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 是可行的。到目前为止，从技术的角度而言，已经解决了容器隔离的问题。但从使用角度，或者说用户体验的角度而言，每次构建一个容器，都要打包一份操作系统文件，似乎实在是不便于使用。&lt;&#x2F;p&gt;
&lt;p&gt;比如，开发者使用 &lt;code&gt;Ubuntu&lt;&#x2F;code&gt; 操作系统的 &lt;code&gt;ISO&lt;&#x2F;code&gt; 制作了一个 &lt;code&gt;rootfs&lt;&#x2F;code&gt;，并依次为基础，安装 &lt;code&gt;Java&lt;&#x2F;code&gt; 环境，进而部署 &lt;code&gt;Java&lt;&#x2F;code&gt; 应用。如果，另一个开发者也有同样的需求，或者同一开发者需要部署另一个 &lt;code&gt;Java&lt;&#x2F;code&gt; 应用，显然，最理想情况是能够复用之前已经安装了 &lt;code&gt;Java&lt;&#x2F;code&gt; 的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 环境，而不是重复一遍流程。&lt;&#x2F;p&gt;
&lt;p&gt;直观的解决办法，构建 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 时，每执行一个有意义的操作之后，都生成一个新的 &lt;code&gt;rootfs&lt;&#x2F;code&gt;。之后，就可以选择一个合适的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 作为基础，添加新的操作构建目标 &lt;code&gt;rootfs&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;但这个方案并不完美，如果每次构建过程都产生一个新的 &lt;code&gt;rootfs&lt;&#x2F;code&gt;，最后将会导致系统内有极其多的 &lt;code&gt;rootfs&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;幸运的是，这个问题并不难解决。将问题一般化，基于既有 &lt;code&gt;A&lt;&#x2F;code&gt;，每一种操作 &lt;code&gt;F&lt;&#x2F;code&gt; 都可以产生唯一结果 &lt;code&gt;B&lt;&#x2F;code&gt;。并且，&lt;code&gt;B&lt;&#x2F;code&gt; 可以作为下一轮的输入。结果发现，这像极了 &lt;code&gt;git&lt;&#x2F;code&gt; 和区块链。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt; 在设计 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像时也是使用了类似的方法。他们引入了层 &lt;code&gt;(layer)&lt;&#x2F;code&gt; 概念。用户制作镜像的每一步操作，都会生成一个层，将 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 从全量保存，改为了增量保存。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yao-shi-unionfs&quot;&gt;什么是 UnionFS&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像的这种实现方式，依赖于一种叫做 &lt;code&gt;UnionFS&lt;&#x2F;code&gt; 的文件系统。&lt;&#x2F;p&gt;
&lt;p&gt;简单来讲，&lt;a href=&quot;https:&#x2F;&#x2F;de.wikipedia.org&#x2F;wiki&#x2F;UnionFS&quot;&gt;UnionFS&lt;&#x2F;a&gt; 允许将多个设备文件或目录挂载到同一个目录上，将多个设备的内容作为整体对外展示，或者将一个设备文件挂载到一个已有的目录上。&lt;&#x2F;p&gt;
&lt;p&gt;比如，在 &lt;code&gt;Ubuntu 18.04&lt;&#x2F;code&gt; 上:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 准备测试目录
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; A&#x2F;{a,x}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; B&#x2F;{b,x}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; rm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -rf&lt;&#x2F;span&gt;&lt;span&gt; C &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p&lt;&#x2F;span&gt;&lt;span&gt; C
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用联合挂载的方式，将这两个目录挂载到一个公共的目录 &lt;code&gt;C&lt;&#x2F;code&gt; 上:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; aufs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; dirs=.&#x2F;A:.&#x2F;B none .&#x2F;C
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这时可以看到目录 &lt;code&gt;A&lt;&#x2F;code&gt; 与目录 &lt;code&gt;B&lt;&#x2F;code&gt; 被合并到了目录 &lt;code&gt;C&lt;&#x2F;code&gt; 中&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tree C
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;C
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; directories, 0 files
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时，如果修改 &lt;code&gt;C&lt;&#x2F;code&gt; 也会反应到对应的 &lt;code&gt;A&lt;&#x2F;code&gt; 或 &lt;code&gt;B&lt;&#x2F;code&gt; 中。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt; 支持多种&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;storage&#x2F;storagedriver&#x2F;select-storage-driver&#x2F;&quot;&gt;存储驱动&lt;&#x2F;a&gt;，但目前默认使用的驱动为 &lt;code&gt;overlay2&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;overlay2&quot;&gt;Overlay2&lt;&#x2F;h3&gt;
&lt;p&gt;接下来通过一个例子来探索 &lt;code&gt;overlay2&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;首先，启动一个容器:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; ubuntu:latest sleep 3600000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个命令的含义是，使用 &lt;code&gt;ubuntu:latest&lt;&#x2F;code&gt; 这个 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像来运行一个容器。然后，使用命令查看镜像的细节:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker image inspect ubuntu:latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GraphDriver&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;LowerDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;f34511250966eebf394cfcd377e3f3b3e226910881a87b14a9a9743bcbd30c05&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;268f8bdf24c70efcb96bcfedbc22458b36d532bd1a9494f8a5989069eb849802&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02&#x2F;diff&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MergedDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;df8d02faf11610c87d3ed7c92b5201902b87c468061bb495597fb2ce8d68d90e&#x2F;merged&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UpperDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;df8d02faf11610c87d3ed7c92b5201902b87c468061bb495597fb2ce8d68d90e&#x2F;diff&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WorkDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;df8d02faf11610c87d3ed7c92b5201902b87c468061bb495597fb2ce8d68d90e&#x2F;work&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;overlay2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RootFS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;layers&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Layers&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:e1c75a5e0bfa094c407e411eb6cc8a159ee8b060cbd0398f1693978b4af9af10&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:9e97312b63ff63ad98bb1f3f688fdff0721ce5111e7475b02ab652f10a4ff97d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:ec1817c93e7c08d27bfee063f0f1349185a558b87b2d806768af0a8fbbf5bc11&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:05f3b67ed530c5b55f6140dfcdfb9746cdae7b76600de13275197d009086bb3d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            ]
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RootFS&lt;&#x2F;code&gt;: 由于 &lt;code&gt;Docker&lt;&#x2F;code&gt; 的镜像为分层结构，制作镜像的每一步，都是一个层。因此，一个完整的 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像包括 &lt;code&gt;image&lt;&#x2F;code&gt; 和 &lt;code&gt;layer&lt;&#x2F;code&gt;。为了解决空间，提高效率等目的， &lt;code&gt;Docker&lt;&#x2F;code&gt; 构建镜像时，使用了 &lt;code&gt;COW&lt;&#x2F;code&gt; 技术，即 &lt;code&gt;layer&lt;&#x2F;code&gt; 在 &lt;code&gt;image&lt;&#x2F;code&gt; 之间是被共享的。一个 &lt;code&gt;Image&lt;&#x2F;code&gt; 是由多个有先后逻辑顺序的 &lt;code&gt;Layer&lt;&#x2F;code&gt; 所构成，也就是 &lt;code&gt;RootFS&lt;&#x2F;code&gt; 中的 &lt;code&gt;Layer&lt;&#x2F;code&gt; ，上面是底层，下面是顶层。这个信息保存在 &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;imagedb&#x2F;content&#x2F;sha256&#x2F;&amp;lt;image_id&amp;gt;&lt;&#x2F;code&gt; 文件中。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ll &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;layerdb&#x2F;sha256&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwx------&lt;&#x2F;span&gt;&lt;span&gt; 2 root root 4096 Aug 16 13:48 27d46ebb54384edbc8c807984f9eb065321912422b0e6c49d6a9cd8c8b7d8ffc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwx------&lt;&#x2F;span&gt;&lt;span&gt; 2 root root 4096 Aug 16 13:48 8a8d1f0b34041a66f09e49bdc03e75c2190f606b0db7e08b75eb6747f7b49e11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwx------&lt;&#x2F;span&gt;&lt;span&gt; 2 root root 4096 Aug 16 13:48 e1c75a5e0bfa094c407e411eb6cc8a159ee8b060cbd0398f1693978b4af9af10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwx------&lt;&#x2F;span&gt;&lt;span&gt; 2 root root 4096 Aug 16 13:48 f1b8f74eff975ae600be0345aaac8f0a3d16680c2531ffc72f77c5e17cbfeeee
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;结果在 &lt;code&gt;RootFS.Layers&lt;&#x2F;code&gt; 中只找到了 &lt;code&gt;e1c75a5e0bfa094c407e411eb6cc8a159ee8b060cbd0398f1693978b4af9af10&lt;&#x2F;code&gt;。这是为 &lt;code&gt;Docker&lt;&#x2F;code&gt; 使用了 &lt;code&gt;ChainID&lt;&#x2F;code&gt; 的方式去保存其他的 &lt;code&gt;layer&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:e1c75a5e0bfa094c407e411eb6cc8a159ee8b060cbd0398f1693978b4af9af10 sha256:9e97312b63ff63ad98bb1f3f688fdff0721ce5111e7475b02ab652f10a4ff97d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sha256sum&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;27d46ebb54384edbc8c807984f9eb065321912422b0e6c49d6a9cd8c8b7d8ffc&lt;&#x2F;span&gt;&lt;span&gt;  -
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:27d46ebb54384edbc8c807984f9eb065321912422b0e6c49d6a9cd8c8b7d8ffc sha256:ec1817c93e7c08d27bfee063f0f1349185a558b87b2d806768af0a8fbbf5bc11&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sha256sum&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f1b8f74eff975ae600be0345aaac8f0a3d16680c2531ffc72f77c5e17cbfeeee&lt;&#x2F;span&gt;&lt;span&gt;  -
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256:f1b8f74eff975ae600be0345aaac8f0a3d16680c2531ffc72f77c5e17cbfeeee sha256:05f3b67ed530c5b55f6140dfcdfb9746cdae7b76600de13275197d009086bb3d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sha256sum&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8a8d1f0b34041a66f09e49bdc03e75c2190f606b0db7e08b75eb6747f7b49e11&lt;&#x2F;span&gt;&lt;span&gt;  -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如此就找到了所有的 &lt;code&gt;layer&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;但是，上面的文件保存的只有元数据 &lt;code&gt;(metadata )&lt;&#x2F;code&gt;，还需要找到真实的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 保存的位置:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;layerdb&#x2F;sha256&#x2F;e1c75a5e0bfa094c407e411eb6cc8a159ee8b060cbd0398f1693978b4af9af10&#x2F;cache-id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;overlay2&lt;&#x2F;code&gt; 的所有 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 都保存在 &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&lt;&#x2F;code&gt; 中，具体到上面的 &lt;code&gt;layer: e1c75a5e0bfa094c407e411eb6cc8a159ee8b060cbd0398f1693978b4af9af10&lt;&#x2F;code&gt; 的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 的位置就是 &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;以此类推，可以找到上述的四个 &lt;code&gt;layer&lt;&#x2F;code&gt; 的 &lt;code&gt;rootfs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;layerdb&#x2F;sha256&#x2F;27d46ebb54384edbc8c807984f9eb065321912422b0e6c49d6a9cd8c8b7d8ffc&#x2F;cache-id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;268f8bdf24c70efcb96bcfedbc22458b36d532bd1a9494f8a5989069eb849802
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;layerdb&#x2F;sha256&#x2F;f1b8f74eff975ae600be0345aaac8f0a3d16680c2531ffc72f77c5e17cbfeeee&#x2F;cache-id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f34511250966eebf394cfcd377e3f3b3e226910881a87b14a9a9743bcbd30c05
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;overlay2&#x2F;layerdb&#x2F;sha256&#x2F;8a8d1f0b34041a66f09e49bdc03e75c2190f606b0db7e08b75eb6747f7b49e11&#x2F;cache-id
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;df8d02faf11610c87d3ed7c92b5201902b87c468061bb495597fb2ce8d68d90e
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;将他们通过 &lt;code&gt;Union mount&lt;&#x2F;code&gt; 的方式挂载到某个目录，就能得到容器完整的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 了。而且，可以观察出，上面得到的结果就是 &lt;code&gt;GraphDriver&lt;&#x2F;code&gt; 中的结果。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;committed&lt;&#x2F;span&gt;&lt;span&gt;  diff  link
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;268f8bdf24c70efcb96bcfedbc22458b36d532bd1a9494f8a5989069eb849802
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;committed&lt;&#x2F;span&gt;&lt;span&gt;  diff  link  lower  work
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;f34511250966eebf394cfcd377e3f3b3e226910881a87b14a9a9743bcbd30c05
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;committed&lt;&#x2F;span&gt;&lt;span&gt;  diff  link  lower  work
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;df8d02faf11610c87d3ed7c92b5201902b87c468061bb495597fb2ce8d68d90e
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;committed&lt;&#x2F;span&gt;&lt;span&gt;  diff  link  lower  work
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;除了最底层 &lt;code&gt;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02&lt;&#x2F;code&gt; 之外，其他各上层的 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 中都存在 &lt;code&gt;lower&lt;&#x2F;code&gt; 目录，这是保存各自的底层 &lt;code&gt;(文档中表述为 parent)&lt;&#x2F;code&gt;。比如对于倒数第二层 &lt;code&gt;268f8bdf24c70efcb96bcfedbc22458b36d532bd1a9494f8a5989069eb849802&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;268f8bdf24c70efcb96bcfedbc22458b36d532bd1a9494f8a5989069eb849802&#x2F;lower
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&#x2F;QEYZLDRIUA2DNUJIGGVCZYDVRM
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -l&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;l&#x2F;QEYZLDRIUA2DNUJIGGVCZYDVRM
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;l&#x2F;QEYZLDRIUA2DNUJIGGVCZYDVRM&lt;&#x2F;span&gt;&lt;span&gt; -&amp;gt; ..&#x2F;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02&#x2F;diff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最后，根据当前的 &lt;code&gt;lower&lt;&#x2F;code&gt; 可以得到底层的 &lt;code&gt;diff&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;通过上述操作，将 &lt;code&gt;lower&lt;&#x2F;code&gt; 与 &lt;code&gt;diff&lt;&#x2F;code&gt; 关联起来了:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lower&lt;&#x2F;code&gt;: 可理解为当前的镜像层，对于当前层而言，是只读的&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;diff&lt;&#x2F;code&gt;: 是容器可读可写层，初始为空，容器内有文件被修改时，这个文件夹就会有对应的变化，也就是所谓的 &lt;code&gt;COW&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;使用如下方式验证:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker ps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CONTAINER&lt;&#x2F;span&gt;&lt;span&gt; ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;7baea70ac0a0&lt;&#x2F;span&gt;&lt;span&gt;        ubuntu:latest       &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sleep 3600000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;     2 hours ago         Up 2 hours                              vigorous_poitras
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker inspect 7baea70ac0a0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GraphDriver&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;LowerDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;9667b87c5a650e82e2a27a6420813fd8b7891a0e37b13558448e6f82a2e7a877-init&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;df8d02faf11610c87d3ed7c92b5201902b87c468061bb495597fb2ce8d68d90e&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;f34511250966eebf394cfcd377e3f3b3e226910881a87b14a9a9743bcbd30c05&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;268f8bdf24c70efcb96bcfedbc22458b36d532bd1a9494f8a5989069eb849802&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;286b92fb4ca407b7475db92eec9dccbd7bc279b968e9f7ca61deb13a9eee9c02&#x2F;diff&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MergedDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;9667b87c5a650e82e2a27a6420813fd8b7891a0e37b13558448e6f82a2e7a877&#x2F;merged&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UpperDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;9667b87c5a650e82e2a27a6420813fd8b7891a0e37b13558448e6f82a2e7a877&#x2F;diff&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WorkDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;9667b87c5a650e82e2a27a6420813fd8b7891a0e37b13558448e6f82a2e7a877&#x2F;work&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;overlay2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -ti&lt;&#x2F;span&gt;&lt;span&gt; 7baea70ac0a0 bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;touch ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;a.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后在另一个终端:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tree &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;9667b87c5a650e82e2a27a6420813fd8b7891a0e37b13558448e6f82a2e7a877
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; diff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └── root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;       └── a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; link
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; lower
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; merged
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; work
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; work
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 &lt;code&gt;diff&lt;&#x2F;code&gt; 中多出了文件 &lt;code&gt;root&#x2F;a.txt&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;此外，很容易发现还有一个以 &lt;code&gt;-init&lt;&#x2F;code&gt; 结尾的文件，这同样是一个层，夹在只读层和读写层之间。&lt;code&gt;Init&lt;&#x2F;code&gt; 层是 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目单独生成的一个内部层，专门用来存放 &lt;code&gt;&#x2F;etc&#x2F;hosts&lt;&#x2F;code&gt;、 &lt;code&gt;&#x2F;etc&#x2F;resolv.conf&lt;&#x2F;code&gt; 等信息。&lt;&#x2F;p&gt;
&lt;p&gt;需要这样一层的原因是，这些文件本来属于只读的 &lt;code&gt;Ubuntu&lt;&#x2F;code&gt; 镜像的一部分，但是用户往往需要在启动容器时写入一些指定的值比如 &lt;code&gt;hostname&lt;&#x2F;code&gt;，所以就需要在可读写层对它们进行修改。&lt;&#x2F;p&gt;
&lt;p&gt;可是，这些修改往往只对当前的容器有效，我们并不希望执行 &lt;code&gt;docker commit&lt;&#x2F;code&gt; 时，把这些信息连同可读写层一起提交掉。&lt;&#x2F;p&gt;
&lt;p&gt;所以， &lt;code&gt;Docker&lt;&#x2F;code&gt; 做法是，在修改了这些文件之后，以一个单独的层挂载了出来。而用户执行 &lt;code&gt;docker commit&lt;&#x2F;code&gt; 只会提交可读写层，所以是不包含这些内容的。&lt;&#x2F;p&gt;
&lt;p&gt;最终，这几个层都被联合挂载，表现为一个完整的 &lt;code&gt;Ubuntu&lt;&#x2F;code&gt; 操作系统供容器使用。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 技术为容器提供了独立 &lt;code&gt;rootfs&lt;&#x2F;code&gt; 的能力，使容器在本地环境，测试环境，云环境之间具备了真正的 &lt;strong&gt;一致性&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;UnionFS&lt;&#x2F;code&gt; 为 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像提供了快速迭代，分层下载，复用已有镜像等能力。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coolshell.cn&#x2F;articles&#x2F;17061.html&quot;&gt;DOCKER基础技术：AUFS&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;blog.csdn.net&#x2F;ra681t58cjxsgckj31&#x2F;article&#x2F;details&#x2F;104707642&quot;&gt;一文读懂容器三大核心技术——Namespace，Cgroup和UnionFS&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;storage&#x2F;storagedriver&#x2F;select-storage-driver&#x2F;&quot;&gt;Docker storage drivers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>容器 - 隔离与限制</title>
		<published>2020-08-17T20:25:09+00:00</published>
		<updated>2020-08-17T20:25:09+00:00</updated>
		<link href="https://blog.kiyoko.io/namespace-and-cgroup/" type="text/html"/>
		<id>https://blog.kiyoko.io/namespace-and-cgroup/</id>
		<content type="html">&lt;p&gt;容器技术的本质是一种沙盒技术，可以将应用及相关配置、脚本 &lt;strong&gt;装&lt;&#x2F;strong&gt; 到一个 &lt;strong&gt;箱子&lt;&#x2F;strong&gt; 中。这样，多个应用之间就会因为有了边界而避免相互干扰。并且，应用被装进箱子后，也便于移动。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jin-cheng&quot;&gt;进程&lt;&#x2F;h2&gt;
&lt;p&gt;要实现一个程序，从一个文件读取两个整数，将计算结果写入到另一个文件中，则至少需要有三个文件:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;可执行文件&lt;&#x2F;li&gt;
&lt;li&gt;输入文件&lt;&#x2F;li&gt;
&lt;li&gt;输出文件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;由于计算机只认识 &lt;code&gt;0&lt;&#x2F;code&gt; 和 &lt;code&gt;1&lt;&#x2F;code&gt;，因此无论用哪种语言编写这段代码，最后这三个文件都需要通过某种方式翻译成二进制文件，才能在计算机操作系统中运行与使用。初始状态时，三个文件都存放在磁盘上。可执行文件被称作 &lt;strong&gt;程序&lt;&#x2F;strong&gt;，剩余两个文件是 &lt;strong&gt;数据&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;要完成功能，需要在计算机上执行这个程序。&lt;&#x2F;p&gt;
&lt;p&gt;首先，操作系统将 &lt;strong&gt;程序&lt;&#x2F;strong&gt; 载入到内存中，表现为指令序列。在执行过程中，当执行到从文件加载输入数据的指令时，操作系统控制存储控制器完成将数据从磁盘载入到内存。之后，操作系统读取到计算加法的指令时，通过 &lt;code&gt;CPU&lt;&#x2F;code&gt;、寄存器与内存的共同协作完成加法计算将计算结果暂存在内存中。最后，执行将结果保存到文件的指令时，操作系统会通过存储控制器，将内存中的结果写入到磁盘上。同时，操作系统中还需要维护其他状态，辅助这一过程顺利进行。&lt;&#x2F;p&gt;
&lt;p&gt;在操作系统中，将上述过程所涉及到的总和称作: 进程。&lt;&#x2F;p&gt;
&lt;p&gt;而容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造出一个 &lt;strong&gt;边界&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;对于 &lt;code&gt;Docker&lt;&#x2F;code&gt; 等大多数 &lt;code&gt;Linux&lt;&#x2F;code&gt; 容器来说，使用 &lt;code&gt;cgroups&lt;&#x2F;code&gt; 技术来制造约束，使用 &lt;code&gt;namespace&lt;&#x2F;code&gt; 技术来修改进程视图。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chuang-jian-rong-qi&quot;&gt;创建容器&lt;&#x2F;h2&gt;
&lt;p&gt;首先创建一个容器:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --help
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Usage:&lt;&#x2F;span&gt;&lt;span&gt;  docker run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;OPTIONS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; IMAGE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;COMMAND&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt;ARG...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -it&lt;&#x2F;span&gt;&lt;span&gt; busybox &#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Unable&lt;&#x2F;span&gt;&lt;span&gt; to find image &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;busybox:latest&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; locally
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;latest:&lt;&#x2F;span&gt;&lt;span&gt; Pulling from library&#x2F;busybox
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;91f30d776fb2:&lt;&#x2F;span&gt;&lt;span&gt; Pull complete
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Digest:&lt;&#x2F;span&gt;&lt;span&gt; sha256:9ddee63a712cea977267342e8750ecbc60d3aab25f04ceacfa795e6fce341793
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Status:&lt;&#x2F;span&gt;&lt;span&gt; Downloaded newer image for busybox:latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;参数 &lt;code&gt;-it&lt;&#x2F;code&gt; 的含义是&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-i&lt;&#x2F;strong&gt;: --interactive     Keep STDIN open even if not attached&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;-t&lt;&#x2F;strong&gt;, --tty             Allocate a pseudo-TTY&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;结果就是，在操作系统中创建了一个容器，该容器中执行的程序为 &lt;code&gt;&#x2F;bin&#x2F;sh&lt;&#x2F;code&gt;。并且，在容器启动之后，申请了一个随机的 &lt;code&gt;tty&lt;&#x2F;code&gt;，使用交互方式访问这个容器。&lt;&#x2F;p&gt;
&lt;p&gt;现在，执行 &lt;code&gt;ps&lt;&#x2F;code&gt; 指令，结果真是 &lt;strong&gt;Amazing&lt;&#x2F;strong&gt; 啊:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PID&lt;&#x2F;span&gt;&lt;span&gt;   USER     TIME  COMMAND
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; root      0:00 &#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt; root      0:00 ps
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在创建容器时指定的 &lt;code&gt;&#x2F;bin&#x2F;sh&lt;&#x2F;code&gt; 进程，竟然就是容器内部的第一个进程&lt;code&gt;(pid=1)&lt;&#x2F;code&gt;，并且，这个容器内只有两个进程正在运行中，另一个进程是正在执行的 &lt;code&gt;ps&lt;&#x2F;code&gt; 指令。&lt;&#x2F;p&gt;
&lt;p&gt;而这正是 &lt;code&gt;namespace&lt;&#x2F;code&gt; 技术的神奇之处。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;namespace&quot;&gt;Namespace&lt;&#x2F;h2&gt;
&lt;p&gt;首先，通过 &lt;code&gt;manpages&lt;&#x2F;code&gt; 对 &lt;code&gt;namespace&lt;&#x2F;code&gt; 有一个初步的了解:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; man namespaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAMESPACES&lt;&#x2F;span&gt;&lt;span&gt;(7)                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; Programmer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s Manual                       NAMESPACES(7)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NAME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       namespaces - overview of Linux namespaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DESCRIPTION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       A namespace wraps a global system resource in an abstraction that makes it appear to the processes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       within the namespace that they have their own isolated instance of the global resource. Changes to
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       the global resource are visible to other processes that are members of the namespace, but are
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       invisible to other processes. One use of namespaces is to implement containers.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       This page provides pointers to information on the various namespace types, describes the associated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      &#x2F;proc files, and summarizes the APIs for working with namespaces.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;总的来说，&lt;code&gt;Linux Namespace&lt;&#x2F;code&gt; 提供了一种内核级别隔离系统资源的方法，通过将系统的全局资源放在不同的 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 中，来实现资源隔离的目的。不同 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 的程序，可以享有一份独立的系统资源。目前 &lt;code&gt;Linux&lt;&#x2F;code&gt; 中提供了以下几种系统资源的隔离机制：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Namespace&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Flag&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Page&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;Isolates&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Cgroup&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWCGROUP&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;cgroup_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Cgroup root directory&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;IPC&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWIPC&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;ipc_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;System V IPC, POSIX message queues&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Network&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWNET&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;network_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Network devices, stacks, ports, etc.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Mount&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWNS&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;mount_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Mount points&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;PID&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWPID&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;pid_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Process IDs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Time&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWTIME&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;time_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Boot and monotonic clocks&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;User&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWUSER&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;user_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;User and group IDs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;UTS&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;CLONE_NEWUTS&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;uts_namespaces(7)&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;Hostname and NIS domain name&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;ru-he-shi-yong-namespace-ji-zhu&quot;&gt;如何使用 Namespace 技术&lt;&#x2F;h3&gt;
&lt;p&gt;以 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt; 为例，简单说明如何在编程中使用这种技术。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;&#x2F;code&gt; 实现 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 机制的方式，是通过在创建进程的时候，传入特定的选项。更具体一些，就是在调用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; man 2 clone
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CLONE&lt;&#x2F;span&gt;&lt;span&gt;(2)                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; Programmer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s Manual                           CLONE(2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NAME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       clone, __clone2, clone3 - create a child process
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SYNOPSIS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       &#x2F;* Prototype for the glibc wrapper function *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       #define _GNU_SOURCE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       #include &amp;lt;sched.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       int clone(int (*fn)(void *), void *stack, int flags, void *arg, ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                 &#x2F;* pid_t *parent_tid, void *tls, pid_t *child_tid *&#x2F; );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;系统调用时，传入对应的 &lt;code&gt;Flag&lt;&#x2F;code&gt; 作为参数 &lt;code&gt;flag&lt;&#x2F;code&gt; 的值。比如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; pid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(main_function, stack_size, SIGCHLD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就会创建一个新的进程，并且返回它的进程号 &lt;code&gt;pid&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;如果，同时指定 &lt;code&gt;CLONE_NEWPID&lt;&#x2F;code&gt; 参数:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; pid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(main_function, stack_size, CLONE_NEWPID | SIGCHLD, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;新创建进程将会 &lt;strong&gt;看到&lt;&#x2F;strong&gt; 一个全新的进程空间，在这个进程空间里，它的 &lt;code&gt;pid&lt;&#x2F;code&gt; 是 &lt;code&gt;1&lt;&#x2F;code&gt;。之所以说 &lt;strong&gt;看到&lt;&#x2F;strong&gt;，是因为这只是一个 &lt;strong&gt;障眼法&lt;&#x2F;strong&gt;，在宿主机真实的进程空间里，这个进程的 &lt;code&gt;pid&lt;&#x2F;code&gt; 还是真实的数值，比如 &lt;code&gt;404&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;如果多次执行上面的 &lt;code&gt;clone()&lt;&#x2F;code&gt; 调用，就会创建多个 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt;，而每个 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 里的应用进程都会认为自己是当前容器里的 &lt;strong&gt;第 1 号进程&lt;&#x2F;strong&gt;，它们既看不到宿主机里真正的进程空间，也看不到其他 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt; 里的具体情况。&lt;&#x2F;p&gt;
&lt;p&gt;而其他的几种 &lt;code&gt;Namespace&lt;&#x2F;code&gt;，在写法上与 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt; 是相同的，区别只在于目的不同。&lt;&#x2F;p&gt;
&lt;p&gt;所以，&lt;code&gt;Docker&lt;&#x2F;code&gt; 容器这个听起来玄而又玄的概念，实际上是在创建容器进程时，指定了这个进程所需要启用的一组 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 参数。这样，容器就只能 &lt;strong&gt;看到&lt;&#x2F;strong&gt; 当前 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 所限定的资源、文件、设备、状态，或者配置。而对于宿主机以及其他不相关的程序，它就完全看不到了。&lt;&#x2F;p&gt;
&lt;p&gt;本质仍旧是进程。因此，在之前出现过的虚拟机对比容器的图片中，才没有出现 &lt;code&gt;Docker&lt;&#x2F;code&gt; 的位置。因为，容器只是通过 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 技术被隔离的进程，与其他进程一样，也是直接运行在宿主机操作系统之上的。&lt;code&gt;Docker&lt;&#x2F;code&gt; 只是充当了一个管理者的身份。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;what-is-the-docker&#x2F;virtualization-vs-containers.png&quot; alt=&quot;virtualization-vs-containers&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;既然，虚拟机与容器是两种不同的技术，那么二者之间就应该有一些区别。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rong-qi-de-you-shi&quot;&gt;容器的优势&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;zhan-yong-zi-yuan-xiao&quot;&gt;占用资源小&lt;&#x2F;h5&gt;
&lt;p&gt;容器占用的内存，要比同等功能的虚拟机占用的内存小，因为虚拟机本身也需要消耗一定的资源。比如，运行 &lt;code&gt;CentOS&lt;&#x2F;code&gt; 的 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机至少需要 &lt;code&gt;100 ~ 200 MB&lt;&#x2F;code&gt; 的内存&lt;&#x2F;p&gt;
&lt;h5 id=&quot;geng-hao-de-i-o-xing-neng&quot;&gt;更好的 I&#x2F;O 性能&lt;&#x2F;h5&gt;
&lt;p&gt;在参考阅读 &lt;a href=&quot;https:&#x2F;&#x2F;dominoweb.draco.res.ibm.com&#x2F;reports&#x2F;rc25482.pdf&quot;&gt;An Updated Performance Comparison of Virtual Machines and Linux Containers&lt;&#x2F;a&gt; 中显示&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在随机读写场景中，无论是 &lt;code&gt;iops&lt;&#x2F;code&gt; 还是 &lt;code&gt;latency&lt;&#x2F;code&gt;，容器的性能都接近于物理机性能，远好于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机&lt;&#x2F;li&gt;
&lt;li&gt;在顺序读写场景中，容器的性能基本与物理机性能，略好于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;host network&lt;&#x2F;code&gt; 场景中，容器的性能接近于物理机的性能，好于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;nat network&lt;&#x2F;code&gt; 场景中，容器的性能略逊于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机，但差别不大&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;总的来说，容器的 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 性能优于 &lt;code&gt;KVM&lt;&#x2F;code&gt; 虚拟机&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rong-qi-de-lie-shi&quot;&gt;容器的劣势&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;ping-tai-yi-lai-xing&quot;&gt;平台依赖性&lt;&#x2F;h5&gt;
&lt;ul&gt;
&lt;li&gt;尽管，可以通过 &lt;code&gt;Mount Namespace&lt;&#x2F;code&gt; 的方式挂起与宿主机不同的 &lt;code&gt;Linux&lt;&#x2F;code&gt; 发行版，但容器中进程使用的内核依然是宿主机的内核。
&lt;ul&gt;
&lt;li&gt;因此 &lt;code&gt;Windows&lt;&#x2F;code&gt; 耗费了那么长的时间才对容器技术有了比较好的支持。&lt;&#x2F;li&gt;
&lt;li&gt;同样，也无法在低版本内核的宿主机上运行高版本内核的容器。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;you-xian-de-ge-chi&quot;&gt;有限的隔离&lt;&#x2F;h5&gt;
&lt;p&gt;部分资源无法被隔离，比如 &lt;strong&gt;时间&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;如果在容器中调用 &lt;code&gt;settimeofday(2)&lt;&#x2F;code&gt; 系统调用修改系统时间，会导致宿主机系统的时间被修改，这显然是一个很可怕的事情。因此，在使用容器的时候必须要了解 &lt;strong&gt;什么能做，什么不能做&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cgroup&quot;&gt;Cgroup&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Namespace&lt;&#x2F;code&gt; 技术的作用是隔离进程，但只有隔离是不够的。虽然，容器内的进程无法感知到其他运行在宿主机上的进程或容器，但从操作系统的角度而言，所有的进程与容器都是平等的地位。这就意味着，虽然容器是一个独立的小空间，但其可用的资源仍旧与其他进程之间有着竞争的关系。&lt;&#x2F;p&gt;
&lt;p&gt;因此，就需要用到 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 技术的帮助了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Cgroup&lt;&#x2F;code&gt; 全称为 &lt;code&gt;Control Group&lt;&#x2F;code&gt;，用途是限制一个进程组能够使用的资源上限，包括 &lt;code&gt;CPU&lt;&#x2F;code&gt;、&lt;code&gt;MEM&lt;&#x2F;code&gt;、&lt;code&gt;DISK&lt;&#x2F;code&gt;、&lt;code&gt;NETWORK&lt;&#x2F;code&gt; 等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cgroup-in-action&quot;&gt;Cgroup In Action&lt;&#x2F;h3&gt;
&lt;p&gt;在 &lt;code&gt;Linux&lt;&#x2F;code&gt; 中 &lt;code&gt;Everything is a file&lt;&#x2F;code&gt;，因此，操作 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 的途径也是通过文件系统。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; cgroup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu type cgroup (rw,nosuid,nodev,noexec,relatime,cpu)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;net_cls type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_prio)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup&lt;&#x2F;span&gt;&lt;span&gt; on &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;rdma type cgroup (rw,nosuid,nodev,noexec,relatime,rdma)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，&lt;code&gt;Cgroup&lt;&#x2F;code&gt; 是一系列定义在 &lt;code&gt;&#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;&lt;&#x2F;code&gt; 目录下的各种文件或文件夹。每一个文件夹都被用来限制某一种特定的资源。以 &lt;code&gt;cpu&lt;&#x2F;code&gt; 资源为例:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;000-metadata&lt;&#x2F;span&gt;&lt;span&gt;  cgroup.clone_children  cpu.cfs_period_us  cpu.rt_runtime_us  docker    notify_on_release  systemreserved
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;001-binfmt&lt;&#x2F;span&gt;&lt;span&gt;    cgroup.procs           cpu.cfs_quota_us   cpu.shares         kmsg      podruntime         tasks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;002-bridge&lt;&#x2F;span&gt;&lt;span&gt;    cgroup.sane_behavior   cpu.rt_period_us   cpu.stat           kubepods  release_agent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;列举了限制 &lt;code&gt;cpu&lt;&#x2F;code&gt; 资源的各种参数选项。&lt;&#x2F;p&gt;
&lt;p&gt;使用 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 的方式非常简单，在对应的资源目录下面创建一个目录，比如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup.clone_children&lt;&#x2F;span&gt;&lt;span&gt;  cpu.cfs_period_us  cpu.rt_period_us   cpu.shares  notify_on_release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cgroup.procs&lt;&#x2F;span&gt;&lt;span&gt;           cpu.cfs_quota_us   cpu.rt_runtime_us  cpu.stat    tasks
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个目录被称作 &lt;strong&gt;控制组&lt;&#x2F;strong&gt;，&lt;code&gt;Linux&lt;&#x2F;code&gt; 会在控制组下自动创建各种资源限制文件。&lt;&#x2F;p&gt;
&lt;p&gt;然后，在后台执行脚本:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; while : ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt; 12555
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;显然，这是一个死循环进程，会占用 &lt;code&gt;100%&lt;&#x2F;code&gt; 的 &lt;code&gt;CPU&lt;&#x2F;code&gt;。使用 &lt;code&gt;top&lt;&#x2F;code&gt; 指令，也可以确认确实使用了 &lt;code&gt;100%&lt;&#x2F;code&gt; 的 &lt;code&gt;CPU&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 12555
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt; - 21:00:26 up  4:43,  0 users,  load average: 0.66, 0.66, 0.56
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tasks:&lt;&#x2F;span&gt;&lt;span&gt;   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie
&lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cpu&lt;&#x2F;span&gt;&lt;span&gt;(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;  0.0 us,  2.5 sy,  3.7 ni, 93.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span&gt; Mem :   7958.1 total,   5885.9 free,    539.2 used,   1533.0 buff&#x2F;cache
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span&gt; Swap:  16384.0 total,  16384.0 free,      0.0 used.   7183.5 avail Mem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PID&lt;&#x2F;span&gt;&lt;span&gt; USER      PR  NI    VIRT    RES    SHR S  %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MEM&lt;&#x2F;span&gt;&lt;span&gt;     TIME+ COMMAND
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;12555&lt;&#x2F;span&gt;&lt;span&gt; diviner+  25   5   13576   4816      0 R 100.0   0.1   0:46.30 zsh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来，是时候展现 &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 的魔法了。首先，查看两个接下来要使用的关键文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container&#x2F;cpu.cfs_quota_us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container&#x2F;cpu.cfs_period_us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;100000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cfs_period_us&lt;&#x2F;strong&gt;: 资源组获取资源的时间周期，单位微妙&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;cfs_quota_us&lt;&#x2F;strong&gt;: 在获取资源时间周期内获得资源的时间，单位微妙&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;所以 &lt;code&gt;usage = cfs_quota_us &#x2F; cfs_period_us&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;为了验证这一点，尝试将进程的 &lt;code&gt;CPU&lt;&#x2F;code&gt; 使用率控制在 &lt;code&gt;20%&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;首先，根据上面推测的公式，因为 &lt;code&gt;cfs_period_us = 100000&lt;&#x2F;code&gt;，所以应该修改 &lt;code&gt;cfs_quota_us&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; 20000 | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container&#x2F;cpu.cfs_quota_us
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但这还不够，还需要将被限制的进程的 &lt;code&gt;PID&lt;&#x2F;code&gt; 写入到 &lt;strong&gt;控制组&lt;&#x2F;strong&gt; &lt;code&gt;container&lt;&#x2F;code&gt; 的 &lt;code&gt;tasks&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; 12555 | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;container&#x2F;tasks
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后使用 &lt;code&gt;top&lt;&#x2F;code&gt; 查看:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt; - 21:09:11 up  4:52,  0 users,  load average: 0.41, 0.76, 0.70
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tasks:&lt;&#x2F;span&gt;&lt;span&gt;   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie
&lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Cpu&lt;&#x2F;span&gt;&lt;span&gt;(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;  0.0 us,  0.8 sy,  0.9 ni, 98.4 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span&gt; Mem :   7958.1 total,   5883.8 free,    541.1 used,   1533.1 buff&#x2F;cache
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span&gt; Swap:  16384.0 total,  16384.0 free,      0.0 used.   7181.6 avail Mem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PID&lt;&#x2F;span&gt;&lt;span&gt; USER      PR  NI    VIRT    RES    SHR S  %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU  &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MEM&lt;&#x2F;span&gt;&lt;span&gt;     TIME+ COMMAND
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;12555&lt;&#x2F;span&gt;&lt;span&gt; diviner+  25   5   13576   4816      0 R  20.0   0.1   8:17.25 zsh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Linux Cgroups&lt;&#x2F;code&gt; 的设计还是比较易用的，可以简单地理解为，一个子系统目录加上一组资源限制文件的组合。而对于 &lt;code&gt;Docker&lt;&#x2F;code&gt; 等 &lt;code&gt;Linux&lt;&#x2F;code&gt; 容器项目来说，它们只需要在每个子系统下面，为每个容器创建一个&lt;strong&gt;控制组&lt;&#x2F;strong&gt; (即创建一个新目录)，然后在启动容器进程之后，把这个进程的 &lt;code&gt;PID&lt;&#x2F;code&gt; 填写到对应控制组的 &lt;code&gt;tasks&lt;&#x2F;code&gt; 文件中就可以了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cgroup-in-docker&quot;&gt;Cgroup in Docker&lt;&#x2F;h2&gt;
&lt;p&gt;在通过 &lt;code&gt;Docker&lt;&#x2F;code&gt; 启动容器的时候，也可以限制 &lt;code&gt;cpu&lt;&#x2F;code&gt; 使用率:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -it --cpu-period&lt;&#x2F;span&gt;&lt;span&gt;=100000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --cpu-quota&lt;&#x2F;span&gt;&lt;span&gt;=20000 ubuntu &#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;611f8f2c0c7613c2f3f3964e7dc3dbe407c74689e376736e34d7fe4735ec95d4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;docker&#x2F;611f8f2c0c7613c2f3f3964e7dc3dbe407c74689e376736e34d7fe4735ec95d4&#x2F;cpu.cfs_period_us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;100000
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;docker&#x2F;611f8f2c0c7613c2f3f3964e7dc3dbe407c74689e376736e34d7fe4735ec95d4&#x2F;cpu.cfs_quota_us
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;20000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时，这个容器最多只能使用 &lt;code&gt;20%&lt;&#x2F;code&gt; 的 &lt;code&gt;CPU&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-yue-du&quot;&gt;参考阅读&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dominoweb.draco.res.ibm.com&#x2F;reports&#x2F;rc25482.pdf&quot;&gt;An Updated Performance Comparison of Virtual Machines and Linux Containers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Docker - 概述</title>
		<published>2020-08-16T20:49:59+00:00</published>
		<updated>2020-08-16T20:49:59+00:00</updated>
		<link href="https://blog.kiyoko.io/what-is-the-docker/" type="text/html"/>
		<id>https://blog.kiyoko.io/what-is-the-docker/</id>
		<content type="html">&lt;h2 id=&quot;paas-de-fa-zhan-guo-cheng&quot;&gt;PaaS 的发展过程&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;容器&lt;&#x2F;strong&gt; 这个概念从来就不是什么新鲜的东西，也不是 &lt;code&gt;Docker&lt;&#x2F;code&gt; 公司发明的。在红极一时的 &lt;code&gt;PaaS&lt;&#x2F;code&gt; 项目 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 中，也同样使用到了容器技术，只不过容器只是其最底层、最没人关注的那一部分。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;PaaS&lt;&#x2F;code&gt; 项目被大家接纳的一个主要原因，就是它提供了一种名叫 &lt;strong&gt;应用托管&lt;&#x2F;strong&gt; 的能力。在当时，虚拟机和云计算已经是比较普遍的技术和服务，主流用户的普遍用法，就是租一批 &lt;code&gt;AWS&lt;&#x2F;code&gt; 或者 &lt;code&gt;OpenStack&lt;&#x2F;code&gt; 的虚拟机，然后像以前管理物理服务器那样，用脚本或者手工的方式在这些机器上部署应用。&lt;&#x2F;p&gt;
&lt;p&gt;但是，在部署过程中，难免会碰到云端虚拟机和本地环境不一致的问题。所以当时的云计算服务，比的就是谁能更好地模拟本地服务器环境，能带来更好的 &lt;strong&gt;上云&lt;&#x2F;strong&gt; 体验。而 &lt;code&gt;PaaS&lt;&#x2F;code&gt; 开源项目 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 就是当时解决这个问题的一个最佳方案。&lt;&#x2F;p&gt;
&lt;p&gt;举个栗子，创建好虚拟机之后，运维人员只需要在这些机器上部署 &lt;code&gt;Cloud Foundry Agent&lt;&#x2F;code&gt;，随后开发者只要执行一条命令就能把本地的应用部署到云上:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cf&lt;&#x2F;span&gt;&lt;span&gt; push &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;我的应用&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;事实上，&lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 最核心的组件就是一套应用的打包和分发机制。&lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 为每种主流编程语言都定义了一种打包格式。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cf push&lt;&#x2F;code&gt; 的作用是把应用的可执行文件和启动脚本打进一个压缩包内，上传到云上 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 的存储中。接着，&lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 会通过调度器选择一个可以运行这个应用的虚拟机，然后通知这个机器上的 &lt;code&gt;Agent&lt;&#x2F;code&gt; 把应用压缩包下载下来启动。&lt;&#x2F;p&gt;
&lt;p&gt;这时候关键来了，由于需要在一个虚拟机上启动很多个来自不同用户的应用，&lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 通过操作系统的 &lt;code&gt;cgroups&lt;&#x2F;code&gt; 和 &lt;code&gt;namespace&lt;&#x2F;code&gt; 机制为每一个应用单独创建一个称作 &lt;strong&gt;沙盒&lt;&#x2F;strong&gt; 的隔离环境，然后在 &lt;strong&gt;沙盒&lt;&#x2F;strong&gt; 中启动这些应用进程。这样，就实现了把多个用户的应用互不干涉地在虚拟机里批量地、自动地运行起来的目的。而这个 &lt;strong&gt;沙盒&lt;&#x2F;strong&gt; 就是所谓的 &lt;strong&gt;容器&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;而本文的主角 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目，与 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 的容器并没有本质上的差异。因此在它发布后不久，&lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 的首席产品经理 &lt;code&gt;James Bayer&lt;&#x2F;code&gt; 就在社区里做了一次详细对比，告诉用户 &lt;code&gt;Docker&lt;&#x2F;code&gt; 只是一个同样使用 &lt;code&gt;cgroups&lt;&#x2F;code&gt; 和 &lt;code&gt;namespace&lt;&#x2F;code&gt; 实现的 &lt;strong&gt;沙盒&lt;&#x2F;strong&gt; 而已，没有什么特别的黑科技，也不需要特别关注。&lt;&#x2F;p&gt;
&lt;p&gt;然而，短短几个月，&lt;code&gt;Docker&lt;&#x2F;code&gt; 项目就迅速崛起了。它的崛起速度如此之快，以至于 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 以及所有的 &lt;code&gt;PaaS&lt;&#x2F;code&gt; 社区还没来得及成为它的竞争对手，就直接被宣告出局了，堪称 &lt;strong&gt;降维打击&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;docker-jing-xiang&quot;&gt;Docker 镜像&lt;&#x2F;h2&gt;
&lt;p&gt;究其根本原因，虽然 &lt;code&gt;Docker&lt;&#x2F;code&gt; 与 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 无论是在核心原理还是在技术实现上大部分相同，但正是被大家忽视的那一小部分成为 &lt;code&gt;Docker&lt;&#x2F;code&gt; 的制胜法宝——&lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Cloud Fondry&lt;&#x2F;code&gt; 成也“打包”，败萧“打包”。其一，每种语言，每种框架的打包方式都不甚相同，甚至于每个版本都需要打包；其二，虽然打包之后可以在云上直接使用，但在从本地上云的过程中，可能仍旧需要反复修改、配置，甚至于在不断试错中体会&lt;strong&gt;玄学调参&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;结果大家发现，虽然 &lt;code&gt;cf push&lt;&#x2F;code&gt; 可以一键部署，但是为了实现&lt;strong&gt;一键部署&lt;&#x2F;strong&gt;这一目的的过程却需要费尽心机。&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像却从根本上解决了这一问题。&lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像，实际上也是一个压缩包，但是内容却要比 &lt;code&gt;Cloud Foundry&lt;&#x2F;code&gt; 的丰富的多。它不但包含可执行文件与启动脚本，更是包含了一个完整的操作系统，所以这个压缩包的内容可以与开发环境、测试环境的完全一样。&lt;&#x2F;p&gt;
&lt;p&gt;假设，开发时使用 &lt;code&gt;centos 8&lt;&#x2F;code&gt; 作为开发环境，此时，只需要使用 &lt;code&gt;centos 8&lt;&#x2F;code&gt; 的 &lt;code&gt;iso&lt;&#x2F;code&gt; 连同可执行文件一起制作一个压缩包，那么，无论在哪里解压这个压缩包，都可以为可执行文件提供完全一致的运行环境。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rong-qi-yu-xu-ni-hua&quot;&gt;容器与虚拟化&lt;&#x2F;h2&gt;
&lt;p&gt;虚拟化允许多个操作系统 &lt;code&gt;(Windows&#x2F;Linux)&lt;&#x2F;code&gt; 同时在单个硬件系统上运行。&lt;&#x2F;p&gt;
&lt;p&gt;容器可共享同一个操作系统内核，将应用进程与系统其他部分隔离开。例如：&lt;code&gt;ARM Linux&lt;&#x2F;code&gt; 系统运行 &lt;code&gt;ARM Linux&lt;&#x2F;code&gt; 容器，&lt;code&gt;x86 Linux&lt;&#x2F;code&gt; 系统运行 &lt;code&gt;x86 Linux&lt;&#x2F;code&gt; 容器，&lt;code&gt;x86 Windows&lt;&#x2F;code&gt; 系统运行 &lt;code&gt;x86 Windows&lt;&#x2F;code&gt; 容器。&lt;code&gt;Linux&lt;&#x2F;code&gt; 容器具有极佳的可移植性，但前提是它们必须与底层系统兼容。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;what-is-the-docker&#x2F;virtualization-vs-containers.png&quot; alt=&quot;virtualization-vs-containers&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这意味着，虚拟化会使用虚拟机监控程序模拟硬件，从而使多个操作系统能够并行运行。但这不如容器轻便。&lt;code&gt;Linux&lt;&#x2F;code&gt; 容器在本机操作系统上运行，与所有容器共享该操作系统，因此应用和服务能够保持轻巧，并行化快速运行。&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
