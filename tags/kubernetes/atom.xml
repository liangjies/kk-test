<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>不是在改BUG，就是在改BUG的路上 - kubernetes</title>
	<link href="https://blog.kiyoko.io/tags/kubernetes/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.kiyoko.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-03-19T09:36:32+00:00</updated>
	<id>https://blog.kiyoko.io/tags/kubernetes/atom.xml</id>
	<entry xml:lang="en">
		<title>Docker container 137 错误码异常退出</title>
		<published>2021-03-19T09:36:32+00:00</published>
		<updated>2021-03-19T09:36:32+00:00</updated>
		<link href="https://blog.kiyoko.io/docker-container-exitcode-137-without-oomkilled-flag-set/" type="text/html"/>
		<id>https://blog.kiyoko.io/docker-container-exitcode-137-without-oomkilled-flag-set/</id>
		<content type="html">&lt;p&gt;又是一次喜闻乐见的容器 &lt;strong&gt;137&lt;&#x2F;strong&gt; 错误码退出事件，事件案发现场如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; ns get pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                 READY   STATUS      RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cassification-xwcc2&lt;&#x2F;span&gt;&lt;span&gt;         0&#x2F;1     Error       0          2d12h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; ns describe pod cassification-xwcc2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name:&lt;&#x2F;span&gt;&lt;span&gt;         cassification-xwcc2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Namespace:&lt;&#x2F;span&gt;&lt;span&gt;    ns
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Priority:&lt;&#x2F;span&gt;&lt;span&gt;     0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Node:&lt;&#x2F;span&gt;&lt;span&gt;         n017.example.com&#x2F;10.100.200.27
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt; Time:   Tue, 16 Mar 2021 20:41:13 +0800
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Labels:&lt;&#x2F;span&gt;&lt;span&gt;       controller-uid=9c5aed2c-895b-4012-8a06-9bb9d44d49b4
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job-name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cassification
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Annotations:  &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;none&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Status:&lt;&#x2F;span&gt;&lt;span&gt;       Failed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IP:&lt;&#x2F;span&gt;&lt;span&gt;           10.216.3.55
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IPs:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IP:&lt;&#x2F;span&gt;&lt;span&gt;           10.216.3.55
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Controlled&lt;&#x2F;span&gt;&lt;span&gt; By:  Job&#x2F;cassification
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Containers:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cassification:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt; ID:  docker:&#x2F;&#x2F;f0c2b1129c1c7ce74e8eff9633b31cc4d564a18b6fc5a1416a305df811420242
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Image:&lt;&#x2F;span&gt;&lt;span&gt;         harbor.exmple.com&#x2F;pytorch:v3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Image&lt;&#x2F;span&gt;&lt;span&gt; ID:      docker-pullable:&#x2F;&#x2F;harbor.exmple.com&#x2F;pytorch@sha256:3197c2b34fb0b525652b5382d3f61c580700d80dd0332796bc1a96149b0853cc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Port:          &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;none&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Host&lt;&#x2F;span&gt;&lt;span&gt; Port:     &amp;lt;none&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Command:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-c
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt; 8000000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;State:&lt;&#x2F;span&gt;&lt;span&gt;          Terminated
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Reason:&lt;&#x2F;span&gt;&lt;span&gt;       Error
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Exit&lt;&#x2F;span&gt;&lt;span&gt; Code:    137
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Started:&lt;&#x2F;span&gt;&lt;span&gt;      Tue, 16 Mar 2021 20:41:15 +0800
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Finished:&lt;&#x2F;span&gt;&lt;span&gt;     Thu, 18 Mar 2021 18:47:45 +0800
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ready:&lt;&#x2F;span&gt;&lt;span&gt;          False
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Restart&lt;&#x2F;span&gt;&lt;span&gt; Count:  0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Limits:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu:&lt;&#x2F;span&gt;&lt;span&gt;             5
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory:&lt;&#x2F;span&gt;&lt;span&gt;          50Gi
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvidia.com&#x2F;gpu:&lt;&#x2F;span&gt;&lt;span&gt;  2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Requests:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu:&lt;&#x2F;span&gt;&lt;span&gt;             5
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory:&lt;&#x2F;span&gt;&lt;span&gt;          50Gi
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvidia.com&#x2F;gpu:&lt;&#x2F;span&gt;&lt;span&gt;  2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Environment:       &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;none&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Conditions:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;              Status
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Initialized&lt;&#x2F;span&gt;&lt;span&gt;       True
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ready&lt;&#x2F;span&gt;&lt;span&gt;             False
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContainersReady&lt;&#x2F;span&gt;&lt;span&gt;   False
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PodScheduled&lt;&#x2F;span&gt;&lt;span&gt;      Trued
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Volumes:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default-token-9rxgg:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type:&lt;&#x2F;span&gt;&lt;span&gt;        Secret (a volume populated by a Secret)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SecretName:&lt;&#x2F;span&gt;&lt;span&gt;  default-token-9rxgg
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Optional:&lt;&#x2F;span&gt;&lt;span&gt;    false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QoS&lt;&#x2F;span&gt;&lt;span&gt; Class:       Guaranteed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Node-Selectors:  &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;none&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Tolerations:&lt;&#x2F;span&gt;&lt;span&gt;     node.kubernetes.io&#x2F;not-ready:NoExecute for 300s
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.kubernetes.io&#x2F;unreachable:NoExecute&lt;&#x2F;span&gt;&lt;span&gt; for 300s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Events:          &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;none&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;137&lt;&#x2F;strong&gt; 错误码大部分情况是超出资源被 &lt;code&gt;kill -9&lt;&#x2F;code&gt; 干掉了。但还是本着负责任的态度~~(空口无凭，研发不信)~~找出真相。&lt;&#x2F;p&gt;
&lt;p&gt;根据 &lt;code&gt;Container ID&lt;&#x2F;code&gt; 查看容器信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker inspect f0c2b1129c1c7ce74e8eff9633b31cc4d564a18b6fc5a1416a305df811420242
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;f0c2b1129c1c7ce74e8eff9633b31cc4d564a18b6fc5a1416a305df811420242&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Created&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2021-03-16T12:41:15.010687771Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Args&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; [
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sleep 8000000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Status&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exited&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Running&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Paused&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Restarting&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OOMKilled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Dead&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pid&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: 0,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: 137,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;StartedAt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2021-03-16T12:41:15.553418777Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;FinishedAt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2021-03-18T10:47:45.230995698Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;很遗憾 &lt;code&gt;State.OOMKilled&lt;&#x2F;code&gt; 是 &lt;code&gt;false&lt;&#x2F;code&gt;，没关系，还可以查看 &lt;code&gt;dmesg&lt;&#x2F;code&gt; 信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; dmesg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -T &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; killed | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; f0c2b1129c1c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[四&lt;&#x2F;span&gt;&lt;span&gt; 3月 18 18:47:12 2021] Task in &#x2F;kubepods&#x2F;pod3759885e-2d2e-45f6-a100-a1230831cbac&#x2F;f0c2b1129c1c7ce74e8eff9633b31cc4d564a18b6fc5a1416a305df811420242 killed as a result of limit of &#x2F;kubepods&#x2F;pod3759885e-2d2e-45f6-a100-a1230831cbac
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[四&lt;&#x2F;span&gt;&lt;span&gt; 3月 18 18:47:12 2021] Task in &#x2F;kubepods&#x2F;pod3759885e-2d2e-45f6-a100-a1230831cbac&#x2F;f0c2b1129c1c7ce74e8eff9633b31cc4d564a18b6fc5a1416a305df811420242 killed as a result of limit of &#x2F;kubepods&#x2F;pod3759885e-2d2e-45f6-a100-a1230831cbac
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[四&lt;&#x2F;span&gt;&lt;span&gt; 3月 18 18:47:12 2021] Task in &#x2F;kubepods&#x2F;pod3759885e-2d2e-45f6-a100-a1230831cbac&#x2F;f0c2b1129c1c7ce74e8eff9633b31cc4d564a18b6fc5a1416a305df811420242 killed as a result of limit of &#x2F;kubepods&#x2F;pod3759885e-2d2e-45f6-a100-a1230831cbac
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;dmesg&lt;&#x2F;code&gt; 的信息中的时间与 &lt;code&gt;container&lt;&#x2F;code&gt; 异常退出的时间非常接近。&lt;&#x2F;p&gt;
&lt;p&gt;至此，结案。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pod 持续处于 Terminating 状态</title>
		<published>2021-03-12T10:11:34+00:00</published>
		<updated>2021-03-12T10:11:34+00:00</updated>
		<link href="https://blog.kiyoko.io/pod-stuck-in-terminating-state/" type="text/html"/>
		<id>https://blog.kiyoko.io/pod-stuck-in-terminating-state/</id>
		<content type="html">&lt;h2 id=&quot;gai-shu&quot;&gt;概述&lt;&#x2F;h2&gt;
&lt;p&gt;当删除 &lt;code&gt;Pod&lt;&#x2F;code&gt; 时&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;containersolutions.github.io&#x2F;runbooks&#x2F;posts&#x2F;kubernetes&#x2F;pod-stuck-in-terminating-state&#x2F;&quot;&gt;pod stuck in terminating state&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Volcano Plugin - binpack</title>
		<published>2020-12-07T15:17:39+00:00</published>
		<updated>2020-12-07T15:17:39+00:00</updated>
		<link href="https://blog.kiyoko.io/volcano-plugin-binpack/" type="text/html"/>
		<id>https://blog.kiyoko.io/volcano-plugin-binpack/</id>
		<content type="html">&lt;h2 id=&quot;mu-biao&quot;&gt;目标&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;binpack&lt;&#x2F;strong&gt; 解决的问题是，提高节点的利用率，避免资源碎片化。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yuan-ma-fen-xi&quot;&gt;源码分析&lt;&#x2F;h2&gt;
&lt;p&gt;如下代码来自: &lt;code&gt;pkg&#x2F;scheduler&#x2F;plugins&#x2F;binpack&#x2F;binpack.go&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; BinPackingScore use the best fit polices during scheduling.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Goals:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - Schedule Jobs using BestFit Policy using Resource Bin Packing Priority Function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - Reduce Fragmentation of scarce resources on the Cluster
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;BinPackingScore&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;TaskInfo&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;NodeInfo&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;priorityWeight&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weightSum &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requested &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Resreq
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocatable &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Allocatable
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;used &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Used
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requested&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ResourceNames&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requested&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocate &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocatable&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeUsed &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;used&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ResourceCPU&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BinPackingCPU
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ResourceMemory&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BinPackingMemory
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BinPackingResources&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceScore &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ResourceBinPackingScore&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeUsed&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;klog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Infof&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; on node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, need &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, used &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, allocatable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Namespace&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeUsed&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceScore&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceScore
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weightSum &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resourceWeight
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; mapping the result from [0, weightSum] to [0, 10(MaxPriority)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weightSum &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;float64&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weightSum&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span&gt;*= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;float64&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v1alpha1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MaxNodeScore &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int64&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BinPackingWeight&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ResourceBinPackingScore calculate the binpack score for resource with provided info
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ResourceBinPackingScore&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requested&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capacity&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;used &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capacity &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usedFinally &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requested &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;used
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usedFinally &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capacity &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usedFinally &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;float64&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capacity
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;pei-zhi-wen-jian&quot;&gt;配置文件&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ConfigMap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;volcano-scheduler-configmap
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;volcano-system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volcano-scheduler.conf&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    actions: &amp;quot;enqueue, allocate, backfill&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    tiers:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    - plugins:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: priority
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: gang
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: conformance
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    - plugins:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: drf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: predicates
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: proportion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: nodeorder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - name: binpack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        arguments:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          # binpack 插件权重
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          - binpack.weight: 10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          # cpu 资源权重
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          - binpack.cpu: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          # memory 资源权重
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          - binpack.memory: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          # gpu 等其他资源类型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          - binpack.resources: nvidia.com&#x2F;gpu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          # gpu 等其他资源权重配置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          - binpack.resources.nvidia.com&#x2F;gpu: 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;volcano-scheduler-ri-zhi&quot;&gt;Volcano Scheduler 日志&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Volcano Scheduler&lt;&#x2F;strong&gt; 中可以看到 &lt;strong&gt;binpack plugin&lt;&#x2F;strong&gt; 加载的配置文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; volcano-system logs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; volcano-scheduler-566b6f749d-4wr6m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;I1208&lt;&#x2F;span&gt;&lt;span&gt; 07:27:43.875761       1 binpack.go:161] Leaving binpack plugin. binpack.weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, binpack.cpu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, binpack.memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, nvidia.com&#x2F;gpu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>删除所有 Evicted 状态的 Pod</title>
		<published>2020-12-01T13:53:47+00:00</published>
		<updated>2020-12-01T13:53:47+00:00</updated>
		<link href="https://blog.kiyoko.io/delete-all-evicted-pods/" type="text/html"/>
		<id>https://blog.kiyoko.io/delete-all-evicted-pods/</id>
		<content type="html">&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get pods&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --all-namespaces -ojson &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jq -r &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.items[] | select(.status.reason!=null) | select(.status.reason | contains(&amp;quot;Evicted&amp;quot;)) | .metadata.namespace + &amp;quot; &amp;quot; + .metadata.name&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xargs -n2 -l&lt;&#x2F;span&gt;&lt;span&gt; bash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubectl delete pods -n $0 $1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Volcano</title>
		<published>2020-11-16T14:43:43+00:00</published>
		<updated>2020-11-16T14:43:43+00:00</updated>
		<link href="https://blog.kiyoko.io/volcano/" type="text/html"/>
		<id>https://blog.kiyoko.io/volcano/</id>
		<content type="html">&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;从 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;volcano-sh&#x2F;volcano&#x2F;releases&quot;&gt;volocano release&lt;&#x2F;a&gt; 下载 &lt;strong&gt;Volcano&lt;&#x2F;strong&gt;，通过 &lt;strong&gt;yaml&lt;&#x2F;strong&gt; 文件创建 &lt;strong&gt;Deployment&lt;&#x2F;strong&gt; 等。&lt;&#x2F;p&gt;
&lt;p&gt;以当前版本 &lt;strong&gt;v1.1.0&lt;&#x2F;strong&gt; 为例:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; wget https:&#x2F;&#x2F;github.com&#x2F;volcano-sh&#x2F;volcano&#x2F;releases&#x2F;download&#x2F;v1.1.0&#x2F;volcano-v1.1.0-linux-gnu.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tar xzf volcano-v1.1.0-linux-gnu.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;volcano-v1.1.0.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;namespace&#x2F;volcano-system&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;namespace&#x2F;volcano-monitoring&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configmap&#x2F;volcano-scheduler-configmap&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serviceaccount&#x2F;volcano-scheduler&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrole.rbac.authorization.k8s.io&#x2F;volcano-scheduler&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrolebinding.rbac.authorization.k8s.io&#x2F;volcano-scheduler-role&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;volcano-scheduler&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&#x2F;volcano-scheduler-service&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serviceaccount&#x2F;volcano-admission&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrole.rbac.authorization.k8s.io&#x2F;volcano-admission&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrolebinding.rbac.authorization.k8s.io&#x2F;volcano-admission-role&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;volcano-admission&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&#x2F;volcano-admission-service&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job.batch&#x2F;volcano-admission-init&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serviceaccount&#x2F;volcano-controllers&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrole.rbac.authorization.k8s.io&#x2F;volcano-controllers&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrolebinding.rbac.authorization.k8s.io&#x2F;volcano-controllers-role&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;volcano-controllers&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Warning:&lt;&#x2F;span&gt;&lt;span&gt; apiextensions.k8s.io&#x2F;v1beta1 CustomResourceDefinition is deprecated in v1.16+, unavailable in v1.22+; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; apiextensions.k8s.io&#x2F;v1 CustomResourceDefinition
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customresourcedefinition.apiextensions.k8s.io&#x2F;jobs.batch.volcano.sh&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customresourcedefinition.apiextensions.k8s.io&#x2F;commands.bus.volcano.sh&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customresourcedefinition.apiextensions.k8s.io&#x2F;podgroups.scheduling.volcano.sh&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customresourcedefinition.apiextensions.k8s.io&#x2F;queues.scheduling.volcano.sh&lt;&#x2F;span&gt;&lt;span&gt; created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;验证 &lt;strong&gt;Volcano&lt;&#x2F;strong&gt; 组件运行状态:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; volcano-system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                     READY   STATUS      RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pod&#x2F;volcano-admission-7cfdf5b8d-cd2mk&lt;&#x2F;span&gt;&lt;span&gt;    1&#x2F;1     Running     0          6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pod&#x2F;volcano-admission-init-rmd7w&lt;&#x2F;span&gt;&lt;span&gt;         0&#x2F;1     Completed   0          6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pod&#x2F;volcano-controllers-c4c5f48b-dtx4w&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1     Running     0          6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pod&#x2F;volcano-scheduler-54f77d6788-d6t9j&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1     Running     0          6m27s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&#x2F;volcano-admission-service&lt;&#x2F;span&gt;&lt;span&gt;   ClusterIP   10.5.51.59    &amp;lt;none&amp;gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;443&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;TCP    6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&#x2F;volcano-scheduler-service&lt;&#x2F;span&gt;&lt;span&gt;   ClusterIP   10.5.128.19   &amp;lt;none&amp;gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8080&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;TCP   6m27s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                  READY   UP-TO-DATE   AVAILABLE   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;volcano-admission&lt;&#x2F;span&gt;&lt;span&gt;     1&#x2F;1     1            1           6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;volcano-controllers&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1     1            1           6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;volcano-scheduler&lt;&#x2F;span&gt;&lt;span&gt;     1&#x2F;1     1            1           6m27s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                           DESIRED   CURRENT   READY   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicaset.apps&#x2F;volcano-admission-7cfdf5b8d&lt;&#x2F;span&gt;&lt;span&gt;    1         1         1       6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicaset.apps&#x2F;volcano-controllers-c4c5f48b&lt;&#x2F;span&gt;&lt;span&gt;   1         1         1       6m27s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicaset.apps&#x2F;volcano-scheduler-54f77d6788&lt;&#x2F;span&gt;&lt;span&gt;   1         1         1       6m27s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                               COMPLETIONS   DURATION   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job.batch&#x2F;volcano-admission-init&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1           4m24s      6m27s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;chuang-jian-ren-wu&quot;&gt;创建任务&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cpu-ren-wu&quot;&gt;CPU 任务&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubeflow.org&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MPIJob
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openmpi-helloworld-job
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;schedulerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;volcano
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slotsPerWorker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cleanPodPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Running
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mpiReplicaSpecs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Launcher&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;divinerapier&#x2F;openmpi-helloworld:0.0.1
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openmpi-helloworld-job
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mpirun
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--allow-run-as-root
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-np
&lt;&#x2F;span&gt;&lt;span&gt;             - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;helloworld&#x2F;mpi_hello_world
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;divinerapier&#x2F;openmpi-helloworld:0.0.1
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openmpi-helloworld-job
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;gpu-ren-wu&quot;&gt;GPU 任务&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubeflow.org&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MPIJob
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow-benchmarks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;schedulerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;volcano
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slotsPerWorker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cleanPodPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Running
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mpiReplicaSpecs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Launcher&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mpioperator&#x2F;tensorflow-benchmarks:latest
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow-benchmarks
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mpirun
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--allow-run-as-root
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-np
&lt;&#x2F;span&gt;&lt;span&gt;             - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-bind-to
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;none
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-map-by
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;slot
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-x
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NCCL_DEBUG=INFO
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-x
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;LD_LIBRARY_PATH
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-x
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PATH
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-mca
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pml
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ob1
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-mca
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;btl
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^openib
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;python
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scripts&#x2F;tf_cnn_benchmarks&#x2F;tf_cnn_benchmarks.py
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--model=resnet101
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--batch_size=64
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--variable_update=horovod
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvidia.com&#x2F;gpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mpioperator&#x2F;tensorflow-benchmarks:latest
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow-benchmarks
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvidia.com&#x2F;gpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zhu-yi-shi-xiang&quot;&gt;注意事项&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;volcano-scheduler&lt;&#x2F;strong&gt; 在调度任务时，当任务使用的资源太少时会被跳过，具体逻辑为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minMilliCPU &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minMilliScalarResources &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minMemory &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alloc &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Action&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssn &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;framework&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Session&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pendingTasks&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UID&lt;&#x2F;span&gt;&lt;span&gt;]; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;found &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tasks &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewPriorityQueue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TaskOrderFn&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TaskStatusIndex&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pending&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Skip BestEffort task in &amp;#39;allocate&amp;#39; action.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Resreq&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsEmpty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;klog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Infof&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Task &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt; is BestEffort task, skip it.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Namespace&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tasks&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pendingTasks&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UID&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tasks
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; IsEmpty returns bool after checking any of resource is less than min possible value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Resource&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;IsEmpty&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MilliCPU &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minMilliCPU &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Memory &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minMemory &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rQuant &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ScalarResources &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rQuant &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minMilliScalarResources &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以，在使用 &lt;strong&gt;volcano&lt;&#x2F;strong&gt; 作为调度器时，必须要对 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 使用的资源做出限制。对于使用 &lt;strong&gt;volcano&lt;&#x2F;strong&gt; 调度 &lt;strong&gt;MPIJob&lt;&#x2F;strong&gt; 时，无论是 &lt;strong&gt;Launcher&lt;&#x2F;strong&gt; 还是 &lt;strong&gt;Worker&lt;&#x2F;strong&gt; 都需要显示声明需要的资源。&lt;&#x2F;p&gt;
&lt;p&gt;更具体地，&lt;strong&gt;volcano&lt;&#x2F;strong&gt; 会将资源分为两个大类:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU&lt;&#x2F;strong&gt; 与 &lt;strong&gt;Memory&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;其他资源&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;要求上述两类资源，至少有一类使用的资源满足最低要求即可。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>调度与驱逐 —— 将 Pod 分配到节点上</title>
		<published>2020-11-15T18:47:40+00:00</published>
		<updated>2020-11-15T18:47:40+00:00</updated>
		<link href="https://blog.kiyoko.io/scheduling-and-eviction-assigning-pods-to-nodes/" type="text/html"/>
		<id>https://blog.kiyoko.io/scheduling-and-eviction-assigning-pods-to-nodes/</id>
		<content type="html">&lt;p&gt;Kubernetes 允许用户强制 Pod 只能在特定的 Node(s) 上，或者建议优先在特定的 Node(s) 上运行。常规方法是使用 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;working-with-objects&#x2F;labels&#x2F;&quot;&gt;Labels and Selectors&lt;&#x2F;a&gt; 来选择。该约束为可选项，默认情况下调度器将自动进行合理的调度，比如，将 pod 分散到节点上，而非在可用资源不足的节点上。但在某些情况下，用户期望对调度 Pod 的 Node(s) 有更多控制，例如，确保 pod 最终落在有 SSD 的机器上，或者将若干有大量通信的服务的 pod 放置在同一个可用区。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nodeselector&quot;&gt;nodeSelector&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;nodeSelector&lt;&#x2F;strong&gt; 是最简单推荐形式的节点选择约束。nodeSelector 是 PodSpec 的一个字段，其包含键值对映射。为了使 pod 可以在某个节点上运行，约束键值对构成的集合必须是节点标签集合的子集。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;get-nodes&quot;&gt;Get nodes&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get nodes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;get-the-names-of-cluster-s-nodes&quot;&gt;Get the names of cluster&#x27;s nodes&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get nodes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;attach-label-to-the-node&quot;&gt;Attach label to the node&lt;&#x2F;h3&gt;
&lt;p&gt;规则为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; label nodes &amp;lt;node-name&amp;gt; &amp;lt;label-key&amp;gt;=&amp;lt;label-value&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;例如，节点 &#x27;kubernetes-foo-node-1.c.a-robinson.internal&#x27;，标签 &#x27;disktype=ssd&#x27;，则可以执行:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; label nodes kubernetes-foo-node-1.c.a-robinson.internal disktype=ssd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过命令验证:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get nodes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --show-labels
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; describe node &amp;lt;node-name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;add-a-nodeselector-field-to-your-pod-configuration&quot;&gt;Add a nodeSelector field to your pod configuration&lt;&#x2F;h3&gt;
&lt;p&gt;如下为原始 Pod 配置文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在此基础上，添加 nodeSelector:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;imagePullPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;IfNotPresent
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeSelector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disktype&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ssd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而改文件可以在 &lt;a href=&quot;https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;pods&#x2F;pod-nginx.yaml&quot;&gt;https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;pods&#x2F;pod-nginx.yaml&lt;&#x2F;a&gt; 得到。因此，使用如下命令创建 Pod:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;pods&#x2F;pod-nginx.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;之后，查看 Pod 所在的 Node 并验证约束是否有效:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get pods&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; wide
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; describe node &amp;lt;node-name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;affinity-and-anti-affinity&quot;&gt;Affinity and anti-affinity&lt;&#x2F;h3&gt;
&lt;p&gt;Affinity and anti-affinity (亲和与反亲和) 是 nodeSelector 提供的一种非常简单的将 pod 约束到具有特定标签的节点上的方法，极大地扩展了用户可以表达约束的类型。关键增强表现为:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;语言更具表现力，不只是 “完全匹配的 AND” 语义&lt;&#x2F;li&gt;
&lt;li&gt;规则可以是一种建议性的，而非硬性要求，即使调度器无法找到满足要求的 Node，依旧会调度该 pod&lt;&#x2F;li&gt;
&lt;li&gt;除了可以使用 Node 本身的标签作为约束之外，还可以使用运行在 Node 上的 pod 的标签作为约束，表明可以或者不可以与哪些 pod 运行在同一 Node 上。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Affinity 功能包含两种类型的 affinity: &lt;strong&gt;node affinity&lt;&#x2F;strong&gt; 与 &lt;strong&gt;inter-pod affinity&#x2F;anti-affinity&lt;&#x2F;strong&gt;。&lt;strong&gt;node affinity&lt;&#x2F;strong&gt; 类似于 &lt;strong&gt;nodeSelector&lt;&#x2F;strong&gt;，对应上述 &lt;strong&gt;1,2&lt;&#x2F;strong&gt; 两点优势。而 &lt;strong&gt;inter-pod affinity&#x2F;anti-affinity&lt;&#x2F;strong&gt; 具有上述 &lt;strong&gt;1,2,3&lt;&#x2F;strong&gt; 三点优势。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;node-affinity&quot;&gt;Node affinity&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Node affinity&lt;&#x2F;strong&gt; 概念上类似于 &lt;strong&gt;nodeSelector&lt;&#x2F;strong&gt;，可以根据节点上的标签来约束 pod 可以调度到哪些节点。&lt;&#x2F;p&gt;
&lt;p&gt;目前有两种类型的 Node affinity，分别为 &lt;strong&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt; 和 &lt;strong&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt; 指定了将 pod 调度到一个节点上必须满足的规则，原则上等同于 nodeSelector，但语法更具有表现力。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt; 指定调度器将尝试执行但不能保证的偏好。&lt;&#x2F;p&gt;
&lt;p&gt;名称中 &lt;strong&gt;IgnoredDuringExecution&lt;&#x2F;strong&gt; 类似于 &lt;strong&gt;nodeSelector&lt;&#x2F;strong&gt; 的用法，表明如果节点的标签在 Pod 运行时发生变更，从而不再满足 pod 上的 affinity 规则时，pod 将仍然继续运行在原节点上。&lt;strong&gt;requiredDuringSchedulingRequiredDuringExecution&lt;&#x2F;strong&gt; 还只存在于计划中。&lt;&#x2F;p&gt;
&lt;p&gt;因此，在下面的示例中:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt; 的含义为: &lt;strong&gt;必须将 pod 运行在具有 kubernetes.io&#x2F;e2e-az-name=e2e-az1 或 kubernetes.io&#x2F;e2e-az-name=e2e-az2 标签的 Node 上&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt; 的含义为: &lt;strong&gt;尝试将 pod 运行具有 another-node-label-key=another-node-label-value 标签的 Node 上，如果这不可能的话，则允许 pod 在其他地方运行&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;with-node-affinity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;affinity&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeAffinity&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeSelectorTerms&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchExpressions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubernetes.io&#x2F;e2e-az-name
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operator&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;In
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;e2e-az1
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;e2e-az2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preference&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchExpressions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;another-node-label-key
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operator&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;In
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;another-node-label-value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;with-node-affinity
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;pause:2.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Node affinity 语法支持的操作符: In，NotIn，Exists，DoesNotExist，Gt，Lt。使用 NotIn 和 DoesNotExist 来实现 &lt;strong&gt;node anti-affinity&lt;&#x2F;strong&gt; 行为，或者使用 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;scheduling-eviction&#x2F;taint-and-toleration&#x2F;&quot;&gt;node taints(节点污点将)&lt;&#x2F;a&gt; pod 从特定节点中驱逐。&lt;&#x2F;p&gt;
&lt;p&gt;如果同时指定了 &lt;strong&gt;nodeSelector&lt;&#x2F;strong&gt; 和 &lt;strong&gt;nodeAffinity&lt;&#x2F;strong&gt;，则要求两者必须同时满足，才能将 pod 调度到候选 Node 上。&lt;&#x2F;p&gt;
&lt;p&gt;如果指定了多个与 &lt;strong&gt;nodeAffinity&lt;&#x2F;strong&gt; 类型关联的 &lt;strong&gt;nodeSelectorTerms&lt;&#x2F;strong&gt;，则 Node 只需要满足其中任何一个 nodeSelectorTerms 即可将 pod 调度到 Node 上。&lt;&#x2F;p&gt;
&lt;p&gt;如果指定了多个与 &lt;strong&gt;nodeSelectorTerms&lt;&#x2F;strong&gt; 关联的 &lt;strong&gt;matchExpressions&lt;&#x2F;strong&gt;，则当且仅当所有 &lt;strong&gt;matchExpressions&lt;&#x2F;strong&gt; 得到满足时才将 pod 调度到该 Node 上。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;scheduling-eviction&#x2F;assign-pod-node&#x2F;&quot;&gt;Assigning Pods to Nodes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes DaemonSet</title>
		<published>2020-10-28T14:41:29+00:00</published>
		<updated>2020-10-28T14:41:29+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-daemonset/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-daemonset/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;DaemonSet&lt;&#x2F;strong&gt; 确保全部 (或者某些) 节点上运行一个 Pod 的副本。 当有节点加入集群时，也会为他们新增一个 Pod 。当有节点从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。&lt;&#x2F;p&gt;
&lt;p&gt;DaemonSet 的一些典型用法:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在每个节点上运行集群守护进程
&lt;ul&gt;
&lt;li&gt;比如: 网络插件，存储插件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;在每个节点上运行日志收集守护进程&lt;&#x2F;li&gt;
&lt;li&gt;在每个节点上运行监控守护进程&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chuang-jian-daemonset&quot;&gt;创建 DaemonSet&lt;&#x2F;h2&gt;
&lt;p&gt;下面的 &lt;strong&gt;daemonset.yaml&lt;&#x2F;strong&gt; 文件描述了一个运行 &lt;strong&gt;fluentd-elasticsearch&lt;&#x2F;strong&gt; Docker 镜像的 DaemonSet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DaemonSet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fluentd-elasticsearch
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kube-system
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k8s-app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fluentd-logging
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fluentd-elasticsearch
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fluentd-elasticsearch
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tolerations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# this toleration is to have the daemonset runnable on master nodes
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# remove it if your masters can&amp;#39;t run pods
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;node-role.kubernetes.io&#x2F;master
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;effect&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NoSchedule
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fluentd-elasticsearch
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;quay.io&#x2F;fluentd_elasticsearch&#x2F;fluentd:v2.5.2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;200Mi
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;100m
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;200Mi
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;varlog
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;log
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;varlibdockercontainers
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readOnly&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;terminationGracePeriodSeconds&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;varlog
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostPath&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;log
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;varlibdockercontainers
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostPath&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用 &lt;strong&gt;yaml&lt;&#x2F;strong&gt; 文件创建 &lt;strong&gt;DaemonSet&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;controllers&#x2F;daemonset.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ru-he-diao-du-daemon-pods&quot;&gt;如何调度 Daemon Pods&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;tong-guo-mo-ren-diao-du-qi-diao-du&quot;&gt;通过默认调度器调度&lt;&#x2F;h3&gt;
&lt;p&gt;DaemonSet 确保所有符合条件的节点都运行该 Pod 的一个副本。 通常，运行 Pod 的节点由 Kubernetes 调度器选择。不过，DaemonSet pods 由 DaemonSet 控制器创建和调度。这就带来了以下问题:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pod 行为的不一致性: 正常 Pod 在被创建后等待调度时处于 Pending 状态， DaemonSet Pods 创建后不会处于 Pending 状态下。这使用户感到困惑。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;pod-priority-preemption&#x2F;&quot;&gt;Pod 抢占&lt;&#x2F;a&gt; 由默认调度器处理。启用抢占后，DaemonSet 控制器将在不考虑 Pod 优先级和抢占 的情况下制定调度决策。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;ScheduleDaemonSetPods&lt;&#x2F;strong&gt; 控制 Kubernetes 使用 &lt;strong&gt;默认调度器&lt;&#x2F;strong&gt; 而不是 &lt;strong&gt;DaemonSet 控制器&lt;&#x2F;strong&gt; 来调度 DaemonSets，通过将 &lt;strong&gt;yaml&lt;&#x2F;strong&gt; 配置文件中 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 部分的 &lt;strong&gt;.spec.nodeName&lt;&#x2F;strong&gt; 替换为 &lt;strong&gt;.spec.affinity.nodeAffinity&lt;&#x2F;strong&gt;。更多内容请点击 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;scheduling-eviction&#x2F;assign-pod-node&#x2F;#affinity-and-anti-affinity&quot;&gt;Assigning Pods to Nodes: Affinity and anti-affinity&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;with-node-affinity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;affinity&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeAffinity&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeSelectorTerms&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchExpressions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubernetes.io&#x2F;e2e-az-name
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operator&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;In
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;e2e-az1
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;e2e-az2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preference&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchExpressions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;another-node-label-key
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operator&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;In
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;another-node-label-value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;with-node-affinity
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;pause:2.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt;: 必须将 Pod 部署到满足条件的节点上，否则不断重试&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;&#x2F;strong&gt;: 优先将 Pod 部署到满足条件的节点上，否则忽略该条件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;此外，系统会自动添加 &lt;strong&gt;node.kubernetes.io&#x2F;unschedulable: NoSchedule&lt;&#x2F;strong&gt; 容忍度到 &lt;strong&gt;DaemonSet Pods&lt;&#x2F;strong&gt;。在调度 DaemonSet Pod 时，默认调度器会忽略 &lt;strong&gt;unschedulable&lt;&#x2F;strong&gt; 节点。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;daemonset&#x2F;&quot;&gt;Kubernetes DaemonSet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;pod-priority-preemption&#x2F;&quot;&gt;Pod Priority and Preemption&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;scheduling-eviction&#x2F;assign-pod-node&#x2F;#affinity-and-anti-affinity&quot;&gt;Assigning Pods to Nodes: Affinity and anti-affinity&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes StatefulSet</title>
		<published>2020-10-27T11:58:31+00:00</published>
		<updated>2020-10-27T11:58:31+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-statefulset/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-statefulset/</id>
		<content type="html">&lt;p&gt;StatefulSet 是用来管理有状态应用的工作负载 API 对象。&lt;&#x2F;p&gt;
&lt;p&gt;StatefulSet 用来管理 Deployment 和扩展一组 Pod，并且能为这些 Pod 提供序号和唯一性保证。&lt;&#x2F;p&gt;
&lt;p&gt;和 Deployment 相同的是，StatefulSet 管理了基于相同容器定义的一组 Pod。但和 Deployment 不同的是，StatefulSet 为它们的每个 Pod 维护了一个固定的 ID。这些 Pod 是基于相同的声明来创建的，但是不能相互替换：无论怎么调度，每个 Pod 都有一个永久不变的 ID。&lt;&#x2F;p&gt;
&lt;p&gt;StatefulSet 和其他控制器使用相同的工作模式。你在 StatefulSet 对象 中定义你期望的状态，然后 StatefulSet 的 控制器 就会通过各种更新来达到那种你想要的状态。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-yong-statefulsets&quot;&gt;使用 StatefulSets&lt;&#x2F;h2&gt;
&lt;p&gt;StatefulSets 对于需要满足以下一个或多个需求的应用程序很有价值:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;稳定的、唯一的网络标识符。&lt;&#x2F;li&gt;
&lt;li&gt;稳定的、持久的存储。&lt;&#x2F;li&gt;
&lt;li&gt;有序的、优雅的部署和缩放。&lt;&#x2F;li&gt;
&lt;li&gt;有序的、自动的滚动更新。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在上面，稳定意味着 Pod 调度或重调度的整个过程是有持久性的。如果应用程序不需要任何稳定的标识符或有序的部署、删除或伸缩，则应该使用由一组无状态的副本控制器提供的工作负载来部署应用程序，比如 Deployment 或者 ReplicaSet 可能更适用于您的无状态应用部署需要。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xian-zhi&quot;&gt;限制&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;给定 Pod 的存储必须由 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;examples&#x2F;tree&#x2F;master&#x2F;staging&#x2F;persistent-volume-provisioning&#x2F;README.md&quot;&gt;PersistentVolume&lt;&#x2F;a&gt; 驱动 基于所请求的 &lt;strong&gt;storage class&lt;&#x2F;strong&gt; 来提供，或者由管理员预先提供。&lt;&#x2F;li&gt;
&lt;li&gt;删除或者收缩 StatefulSet 并 &lt;strong&gt;不会删除&lt;&#x2F;strong&gt; 它关联的存储卷。这样做是为了保证数据安全，它通常比自动清除 StatefulSet 所有相关的资源更有价值。&lt;&#x2F;li&gt;
&lt;li&gt;StatefulSet 当前需要 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;service&#x2F;#headless-services&quot;&gt;Headless Services&lt;&#x2F;a&gt; 来负责 Pod 的网络标识。用户需要负责创建此服务。&lt;&#x2F;li&gt;
&lt;li&gt;当删除 StatefulSets 时，StatefulSet 不提供任何终止 Pod 的保证。为了实现 StatefulSet 中的 Pod 可以有序和优雅的终止，可以在删除之前将 StatefulSet 缩放为 0。&lt;&#x2F;li&gt;
&lt;li&gt;在默认 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;statefulset&#x2F;#pod-management-policies&quot;&gt;Pod 管理策略&lt;&#x2F;a&gt;(&lt;strong&gt;OrderedReady&lt;&#x2F;strong&gt;) 时使用 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;statefulset&#x2F;#rolling-updates&quot;&gt;滚动更新&lt;&#x2F;a&gt;，可能进入需要 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;statefulset&#x2F;#forced-rollback&quot;&gt;人工干预&lt;&#x2F;a&gt; 才能修复的损坏状态。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zu-jian&quot;&gt;组件&lt;&#x2F;h2&gt;
&lt;p&gt;下面的示例演示了 StatefulSet 的组件。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;web
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterIP&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+++
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;StatefulSet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;web
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# has to match .spec.template.metadata.labels
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serviceName&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# by default is 1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# has to match .spec.selector.matchLabels
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;terminationGracePeriodSeconds&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;nginx-slim:0.8
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;web
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;www
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeClaimTemplates&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;www
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;accessModes&lt;&#x2F;span&gt;&lt;span&gt;: [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ReadWriteOnce&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;storageClassName&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my-storage-class&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;storage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1Gi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;名为 &lt;strong&gt;nginx&lt;&#x2F;strong&gt; 的 Headless Service 用来控制网络域名。&lt;&#x2F;li&gt;
&lt;li&gt;名为 &lt;strong&gt;web&lt;&#x2F;strong&gt; 的 StatefulSet 有一个 Spec，它表明将在独立的 3 个 Pod 副本中启动 nginx 容器。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;volumeClaimTemplates&lt;&#x2F;strong&gt; 将通过 PersistentVolumes 驱动提供的 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;persistent-volumes&#x2F;&quot;&gt;PersistentVolumes&lt;&#x2F;a&gt; 来提供稳定的存储。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;StatefulSet 对象的 &lt;strong&gt;name&lt;&#x2F;strong&gt; 必须是合法的 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;working-with-objects&#x2F;names#dns-subdomain-names&quot;&gt;DNS 域名&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pod-selector&quot;&gt;Pod Selector&lt;&#x2F;h2&gt;
&lt;p&gt;必须将 StatefullSet 的 &lt;strong&gt;.spec.selector&lt;&#x2F;strong&gt; 字段与 &lt;strong&gt;.spec.template.metadata.labels&lt;&#x2F;strong&gt; 设置相同的值。&lt;&#x2F;p&gt;
&lt;p&gt;在 Kubernetes 1.8 版本之前，忽略 &lt;strong&gt;.spec.selector&lt;&#x2F;strong&gt; 字段会获得默认设置值。在 1.8 及以后的版本中，未指定匹配的 Pod Selector 将在创建 StatefulSet 期间导致验证错误。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;statefulset&#x2F;&quot;&gt;Kubernetes StatefulSet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes Deployment</title>
		<published>2020-10-27T10:48:23+00:00</published>
		<updated>2020-10-27T10:48:23+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-deployment/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-deployment/</id>
		<content type="html">&lt;p&gt;一个 Deployment 控制器为 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;&quot;&gt;Pods&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;replicaset&#x2F;&quot;&gt;ReplicaSets&lt;&#x2F;a&gt; 提供声明式的更新能力。&lt;&#x2F;p&gt;
&lt;p&gt;用户负责描述 Deployment 中的 &lt;strong&gt;目标状态&lt;&#x2F;strong&gt;，而 Deployment 控制器以受控速率更改 &lt;strong&gt;实际状态&lt;&#x2F;strong&gt;，使其变为 &lt;strong&gt;期望状态&lt;&#x2F;strong&gt;。用户可以定义 Deployment 以创建新的 ReplicaSet，或删除现有 Deployment， 并通过新的 Deployment 接收(adopt)其资源。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;&#x2F;strong&gt;： 不要管理 Deployment 所拥有的 ReplicaSet 。 如果存在下面未覆盖的使用场景，请考虑在 Kubernetes 仓库中提出 Issue。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;yong-li&quot;&gt;用例&lt;&#x2F;h2&gt;
&lt;p&gt;以下是 Deployments 的典型用例：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;deployment&#x2F;#creating-a-deployment&quot;&gt;创建 Deployment 使 ReplicaSet 上线(rollout)&lt;&#x2F;a&gt;。 ReplicaSet 在后台创建 Pods。 检查 ReplicaSet 的上线状态，查看其是否成功。&lt;&#x2F;li&gt;
&lt;li&gt;通过更新 Deployment 的 PodTemplateSpec，声明 Pod 的新状态 。 新的 ReplicaSet 会被创建，Deployment 以受控速率将 Pod 从旧 ReplicaSet 迁移到新 ReplicaSet。 每个新的 ReplicaSet 都会更新 Deployment 的修订版本。&lt;&#x2F;li&gt;
&lt;li&gt;如果 Deployment 的当前状态不稳定，回滚到较早的 Deployment 版本。 每次回滚都会更新 Deployment 的修订版本。&lt;&#x2F;li&gt;
&lt;li&gt;扩大 Deployment 规模以承担更多负载。&lt;&#x2F;li&gt;
&lt;li&gt;暂停 Deployment 以应用对 PodTemplateSpec 所作的多项修改， 然后恢复其执行以启动新的上线版本。&lt;&#x2F;li&gt;
&lt;li&gt;使用 Deployment 状态 来判定上线过程是否出现停滞。&lt;&#x2F;li&gt;
&lt;li&gt;清理较旧的不再需要的 ReplicaSet。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chuang-jian-deployment&quot;&gt;创建 Deployment&lt;&#x2F;h2&gt;
&lt;p&gt;下面是 Deployment 示例。Deployment 创建一个 ReplicaSet，负责启动三个 &lt;strong&gt;nginx&lt;&#x2F;strong&gt; Pods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx:1.14.2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在该例中:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建名为 &lt;strong&gt;nginx-deployment&lt;&#x2F;strong&gt; (由 &lt;strong&gt;.metadata.name&lt;&#x2F;strong&gt; 字段标明) 的 Deployment。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;该 Deployment 创建三个 (由 &lt;strong&gt;.spec.replicas&lt;&#x2F;strong&gt; 字段标明) Pod 副本。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;.spec.selector&lt;&#x2F;strong&gt; 字段定义 Deployment 如何查找要管理的 Pods。 在这里，你只需选择在 Pod 模板中定义的标签（app: nginx）。 不过，更复杂的选择规则是也可能的，只要 Pod 模板&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;&#x2F;strong&gt;： &lt;strong&gt;matchLabels&lt;&#x2F;strong&gt; 字段是 {key,value} 字典映射。在 &lt;strong&gt;matchLabels&lt;&#x2F;strong&gt; 映射中的单个 {key,value} 映射等效于 &lt;strong&gt;matchExpressions&lt;&#x2F;strong&gt; 中的一个元素，即其 key 字段是 “key”，operator 为 “In”，value 数组仅包含 “value”。在 &lt;strong&gt;matchLabels&lt;&#x2F;strong&gt; 和 &lt;strong&gt;matchExpressions&lt;&#x2F;strong&gt; 中给出的所有条件都必须满足才能匹配。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;.spec.template&lt;&#x2F;strong&gt; 字段包含以下子字段:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;strong&gt;.metadata.labels&lt;&#x2F;strong&gt; 字段为 Pod 设置标签 &lt;strong&gt;app: nginx&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;.template.spec&lt;&#x2F;strong&gt; 字段表示 Pod 的模板，指示 Pods 运行一个 &lt;strong&gt;nginx&lt;&#x2F;strong&gt; 容器，该容器运行 &lt;strong&gt;nginx:1.14.2&lt;&#x2F;strong&gt; 镜像。&lt;&#x2F;li&gt;
&lt;li&gt;创建一个容器，使用 &lt;strong&gt;.spec.template.spec.containers[0].name&lt;&#x2F;strong&gt; 字段 &lt;strong&gt;nginx&lt;&#x2F;strong&gt; 作为名字&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;开始之前，请确保的 Kubernetes 集群已启动并运行。 按照以下步骤创建上述 Deployment:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过运行以下命令创建 Deployment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;controllers&#x2F;nginx-deployment.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;检查 Deployment 是否已创建。如果仍在创建 Deployment， 则输出类似于:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get deployments
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;               READY   UP-TO-DATE   AVAILABLE   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt;   0&#x2F;3     0            0           1s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在检查集群中的 Deployment 时，所显示的字段有：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;NAME 列出了集群中 Deployment 的名称。&lt;&#x2F;li&gt;
&lt;li&gt;READY 显示应用程序的可用的 &lt;strong&gt;副本&lt;&#x2F;strong&gt; 数。显示的模式是“就绪个数&#x2F;期望个数”。&lt;&#x2F;li&gt;
&lt;li&gt;UP-TO-DATE 显示为了打到期望状态已经更新的副本数。&lt;&#x2F;li&gt;
&lt;li&gt;AVAILABLE 显示应用可供用户使用的副本数。&lt;&#x2F;li&gt;
&lt;li&gt;AGE 显示应用程序运行的时间。
请注意期望副本数是根据 &lt;strong&gt;.spec.replicas&lt;&#x2F;strong&gt; 字段设置 3。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;查看 Deployment 上线状态:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; rollout status deployment.v1.apps&#x2F;nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Waiting&lt;&#x2F;span&gt;&lt;span&gt; for rollout to finish: 2 out of 3 new replicas have been updated...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; successfully rolled out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;查看 Deployment 创建的 ReplicaSet (rs):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                          DESIRED   CURRENT   READY   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-75675f5897&lt;&#x2F;span&gt;&lt;span&gt;   3         3         3       18s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ReplicaSet 输出中包含以下字段:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;NAME 列出名字空间中 ReplicaSet 的名称；&lt;&#x2F;li&gt;
&lt;li&gt;DESIRED 显示应用的期望副本个数，即在创建 Deployment 时所定义的值。 此为期望状态；&lt;&#x2F;li&gt;
&lt;li&gt;CURRENT 显示当前运行状态中的副本个数；&lt;&#x2F;li&gt;
&lt;li&gt;READY 显示应用中有多少副本可以为用户提供服务；&lt;&#x2F;li&gt;
&lt;li&gt;AGE 显示应用已经运行的时间长度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;&#x2F;strong&gt;: ReplicaSet 的名称始终被格式化为 &lt;strong&gt;[Deployment名称]-[随机字符串]&lt;&#x2F;strong&gt;。 其中的随机字符串是使用 &lt;strong&gt;pod-template-hash&lt;&#x2F;strong&gt; 作为种子随机生成的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;查看每个 Pod 自动生成的标签:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get pods&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --show-labels
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                READY     STATUS    RESTARTS   AGE       LABELS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-75675f5897-7ci7o&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1       Running   0          18s       app=nginx,pod-template-hash=3123191453
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-75675f5897-kzszj&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1       Running   0          18s       app=nginx,pod-template-hash=3123191453
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-75675f5897-qqcnn&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1       Running   0          18s       app=nginx,pod-template-hash=3123191453
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所创建的 ReplicaSet 确保总是存在三个 &lt;strong&gt;nginx&lt;&#x2F;strong&gt; Pod。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;&#x2F;strong&gt;: 必须在 Deployment 中指定适当的 &lt;strong&gt;.spec.selector&lt;&#x2F;strong&gt; 和 &lt;strong&gt;.spec.template.metadata.labels&lt;&#x2F;strong&gt;。不要与其他控制器重叠。 Kubernetes 不会阻止这样做，但是如果多个控制器具有重叠的 selector，它们可能会发生冲突 执行难以预料的操作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;pod-template-hash-biao-qian&quot;&gt;Pod-template-hash 标签&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;&#x2F;strong&gt;: 不要更改此标签&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Deployment 控制器将 &lt;strong&gt;pod-template-hash&lt;&#x2F;strong&gt; 标签添加到 Deployment 所创建或接收(adopt) 的 每个 ReplicaSet 。&lt;&#x2F;p&gt;
&lt;p&gt;此标签可确保 Deployment 的子 ReplicaSets 不重叠。 标签是通过对 ReplicaSet 的 PodTemplate 进行哈希处理。 所生成的哈希值被添加到 ReplicaSet 的 &lt;strong&gt;selector&lt;&#x2F;strong&gt;、Pod 的 &lt;strong&gt;label&lt;&#x2F;strong&gt;，并存在于在 ReplicaSet 可能拥有的任何现有 Pod 中。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;geng-xin-deployment&quot;&gt;更新 Deployment&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;&#x2F;strong&gt;: 仅当 Deployment 的 &lt;strong&gt;.spec.template&lt;&#x2F;strong&gt; 发生改变时，例如模板的标签或容器镜像被更新，才会触发 Deployment 上线。其他更新(如对 Deployment 执行扩缩容的操作) 不会触发上线动作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;按照以下步骤更新 Deployment:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;更新 &lt;strong&gt;nginx&lt;&#x2F;strong&gt; Pod 镜像，从 &lt;strong&gt;nginx:1.14.2&lt;&#x2F;strong&gt; 到 &lt;strong&gt;nginx:1.16.1&lt;&#x2F;strong&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --record&lt;&#x2F;span&gt;&lt;span&gt; deployment.apps&#x2F;nginx-deployment set image \
&lt;&#x2F;span&gt;&lt;span&gt;   deployment.v1.apps&#x2F;nginx-deployment nginx=nginx:1.16.1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt; image updated
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者使用下面的命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl set image deployment&#x2F;nginx-deployment nginx=nginx:1.16.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --record
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt; image updated
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者，可以 &lt;strong&gt;edit&lt;&#x2F;strong&gt; Deployment 并将 &lt;strong&gt;.spec.template.spec.containers[0].image&lt;&#x2F;strong&gt; 从 &lt;strong&gt;nginx:1.14.2&lt;&#x2F;strong&gt; 更改至 &lt;strong&gt;nginx:1.16.1&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl edit deployment.v1.apps&#x2F;nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment.apps&#x2F;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt; edited
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;查看上线状态，运行:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl rollout status deployment.v1.apps&#x2F;nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Waiting&lt;&#x2F;span&gt;&lt;span&gt; for rollout to finish: 2 out of 3 new replicas have been updated...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 或者
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; successfully rolled out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;获取关于已更新的 Deployment 的更多信息:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看 Deployment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get deployments
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment&lt;&#x2F;span&gt;&lt;span&gt;   3         3         3            3           36s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;查看 Deployment 通过创建新的 ReplicaSet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                          DESIRED   CURRENT   READY   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-1564180365&lt;&#x2F;span&gt;&lt;span&gt;   3         3         3       6s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-2035384211&lt;&#x2F;span&gt;&lt;span&gt;   0         0         0       36s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;查看 Deployment 的 Pod&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get pods
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;                                READY     STATUS    RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-1564180365-khku8&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1       Running   0          14s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-1564180365-nacti&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1       Running   0          14s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-deployment-1564180365-z9gth&lt;&#x2F;span&gt;&lt;span&gt;   1&#x2F;1       Running   0          14s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Deployment 可确保在更新时仅关闭一定数量的 Pod。默认情况下，它确保至少所需 Pods 数量的 &lt;strong&gt;75%&lt;&#x2F;strong&gt; 处于运行状态 (最大不可用比例为 25%)。&lt;&#x2F;p&gt;
&lt;p&gt;Deployment 还确保所创建 Pod 的数量只比期望 Pods 的数量超出一定数值。默认情况下，Deployment 可确保实际启动的 Pod 个数最大为期望值的 125%。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;获取 Deployment 的更多信息:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; describe deployments
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;&quot;&gt;Kubernetes Pods&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;replicaset&#x2F;&quot;&gt;Kubernetes ReplicaSets&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>&#x2F;opt&#x2F;cni - readonly filesystem</title>
		<published>2020-10-26T11:44:37+00:00</published>
		<updated>2020-10-26T11:44:37+00:00</updated>
		<link href="https://blog.kiyoko.io/opt-cni-is-readonly-directory/" type="text/html"/>
		<id>https://blog.kiyoko.io/opt-cni-is-readonly-directory/</id>
		<content type="html">&lt;p&gt;在部署 &lt;a href=&quot;https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;getting-started&#x2F;kubernetes&#x2F;flannel&#x2F;flannel&quot;&gt;Canal&lt;&#x2F;a&gt; 时遇到如下错误:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;查看 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 状态:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get pods&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --all-namespaces
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAMESPACE&lt;&#x2F;span&gt;&lt;span&gt;     NAME                                                              READY   STATUS                   RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kube-system&lt;&#x2F;span&gt;&lt;span&gt;   canal-5qk26                                                       0&#x2F;2     Init:RunContainerError   0          10m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kube-system&lt;&#x2F;span&gt;&lt;span&gt;   kube-proxy-tt2qn                                                  0&#x2F;1     CrashLoopBackOff         10         11m
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;查看 &lt;strong&gt;canal-5qk26&lt;&#x2F;strong&gt; 事件:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; kube-system describe pod canal-5qk26
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Events:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;     Reason          Age                     From                Message
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;----&lt;&#x2F;span&gt;&lt;span&gt;     ------          ----                    ----                -------
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Normal&lt;&#x2F;span&gt;&lt;span&gt;   Scheduled       6m41s                   default-scheduler   Successfully assigned kube-system&#x2F;canal-5qk26 to ubuntu-01
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Warning&lt;&#x2F;span&gt;&lt;span&gt;  Failed          6m40s                   kubelet, ubuntu-01  Error: failed to start container &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;install-cni&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: Error response from daemon: can&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;t join IPC of container 1f3affaa9eba3f1087ac2309f7c4147a54e2cbad09be733e9c394ce7a8ba583b: container 1f3affaa9eba3f1087ac2309f7c4147a54e2cbad09be733e9c394ce7a8ba583b is not running
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  Warning  Failed          6m39s                   kubelet, ubuntu-01  Error: failed to start container &amp;quot;install-cni&amp;quot;: Error response from daemon: cannot join network of a non running container: 1861c340dfadba101b333af1163329a88a8e02fd25e5d657b4e0954acd09d3d5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  Warning  Failed          6m37s                   kubelet, ubuntu-01  Error: failed to start container &amp;quot;install-cni&amp;quot;: Error response from daemon: error while creating mount source path &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&#x2F;opt&#x2F;cni&#x2F;bin&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: mkdir &#x2F;opt&#x2F;cni: read-only file system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  Warning  BackOff         6m34s (x3 over 6m38s)   kubelet, ubuntu-01  Back-off restarting failed container
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  Normal   Pulled          6m33s (x5 over 6m40s)   kubelet, ubuntu-01  Container image &amp;quot;calico&#x2F;cni:v3.16.4&amp;quot; already present on machine
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  Normal   Created         6m33s (x5 over 6m40s)   kubelet, ubuntu-01  Created container install-cni
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  Normal   SandboxChanged  100s (x269 over 6m39s)  kubelet, ubuntu-01  Pod sandbox changed, it will be killed and re-created.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;查看 &lt;strong&gt;kube-proxy-tt2qn&lt;&#x2F;strong&gt; 事件:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; kube-system describe pod kube-proxy-tt2qn
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Events:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;     Reason          Age                      From                Message
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;----&lt;&#x2F;span&gt;&lt;span&gt;     ------          ----                     ----                -------
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Normal&lt;&#x2F;span&gt;&lt;span&gt;   Scheduled       11m                      default-scheduler   Successfully assigned kube-system&#x2F;kube-proxy-tt2qn to ubuntu-01
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Normal&lt;&#x2F;span&gt;&lt;span&gt;   Pulled          11m (x2 over 11m)        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubelet,&lt;&#x2F;span&gt;&lt;span&gt; ubuntu-01  Container image &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;registry.aliyuncs.com&#x2F;google_containers&#x2F;kube-proxy:v1.19.3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; already present on machine
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Normal&lt;&#x2F;span&gt;&lt;span&gt;   Created         11m (x2 over 11m)        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubelet,&lt;&#x2F;span&gt;&lt;span&gt; ubuntu-01  Created container kube-proxy
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Warning&lt;&#x2F;span&gt;&lt;span&gt;  Failed          11m                      kubelet, ubuntu-01  Error: failed to start container &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kube-proxy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: Error response from daemon: cannot join network of a non running container: 119388927b173ad23226c1049db0c1269ada343b133774807a1615cc79442246
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Warning&lt;&#x2F;span&gt;&lt;span&gt;  BackOff         11m (x9 over 11m)        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubelet,&lt;&#x2F;span&gt;&lt;span&gt; ubuntu-01  Back-off restarting failed container
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Normal&lt;&#x2F;span&gt;&lt;span&gt;   SandboxChanged  11m (x10 over 11m)       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubelet,&lt;&#x2F;span&gt;&lt;span&gt; ubuntu-01  Pod sandbox changed, it will be killed and re-created.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;查看 &lt;strong&gt;Worker&lt;&#x2F;strong&gt; 节点上 &lt;strong&gt;Kubelet&lt;&#x2F;strong&gt; 与 &lt;strong&gt;Docker&lt;&#x2F;strong&gt; 日志:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; journalctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt; Logs begin at Mon 2020-10-19 10:09:50 UTC. --
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Oct&lt;&#x2F;span&gt;&lt;span&gt; 26 02:31:35 ubuntu-01 docker.dockerd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1781&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: time=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2020-10-26T02:31:35.429587085Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; level=error msg=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Handler for POST &#x2F;v1.40&#x2F;containers&#x2F;aef879b89cd75d23249e76091a4716c1303855b904979e983920aae02da01d18&#x2F;start returned error: error while creating mount source path &amp;#39;&#x2F;opt&#x2F;cni&#x2F;bin&amp;#39;: mkdir &#x2F;opt&#x2F;cni: read-only file system&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Oct&lt;&#x2F;span&gt;&lt;span&gt; 26 02:31:35 ubuntu-01 kubelet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;281110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: E1026 02:31:35.474035  281110 remote_runtime.go:248] StartContainer &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aef879b89cd75d23249e76091a4716c1303855b904979e983920aae02da01d18&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; from runtime service failed: rpc error: code = Unknown desc = failed to start container &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aef879b89cd75d23249e76091a4716c1303855b904979e983920aae02da01d18&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: Error response from daemon: error while creating mount source path &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;opt&#x2F;cni&#x2F;bin&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: mkdir &#x2F;opt&#x2F;cni: read-only file system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Oct&lt;&#x2F;span&gt;&lt;span&gt; 26 02:31:35 ubuntu-01 kubelet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;281110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: E1026 02:31:35.474175  281110 pod_workers.go:191] Error syncing pod 5f45d450-c4e9-45dc-b2c6-52a95570ba71 (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;canal-5qk26_kube-system(5f45d450-c4e9-45dc-b2c6-52a95570ba71)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; skipping: failed to &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;StartContainer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; for &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;install-cni&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; with RunContainerError: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to start container &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aef879b89cd75d23249e76091a4716c1303855b904979e983920aae02da01d18&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: Error response from daemon: error while creating mount source path &amp;#39;&#x2F;opt&#x2F;cni&#x2F;bin&amp;#39;: mkdir &#x2F;opt&#x2F;cni: read-only file system&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Oct&lt;&#x2F;span&gt;&lt;span&gt; 26 02:31:36 ubuntu-01 audit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;315954&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: AVC apparmor=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DENIED&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; operation=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; info=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no new privs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; error=-1 profile=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;snap.docker.dockerd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; name=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pause&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; pid=315954 comm=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runc:[2:INIT]&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; requested_mask=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; denied_mask=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; fsuid=0 ouid=0 target=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker-default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Oct&lt;&#x2F;span&gt;&lt;span&gt; 26 02:31:36 ubuntu-01 kernel: audit: type=1400 audit(1603679496.465:6039)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; apparmor=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DENIED&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; operation=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; info=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no new privs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; error=-1 profile=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;snap.docker.dockerd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; name=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pause&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; pid=315954 comm=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;runc:[2:INIT]&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; requested_mask=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; denied_mask=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; fsuid=0 ouid=0 target=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker-default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Oct&lt;&#x2F;span&gt;&lt;span&gt; 26 02:31:36 ubuntu-01 kubelet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;281110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: W1026 02:31:36.635730  281110 cni.go:239] Unable to update cni config: no networks found in &#x2F;etc&#x2F;cni&#x2F;net.d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;根据上述日志信息，可以确认根本错误出现在 &lt;strong&gt;Docker&lt;&#x2F;strong&gt; 中:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;error while creating mount source path &amp;#39;&#x2F;opt&#x2F;cni&#x2F;bin&amp;#39;: mkdir &#x2F;opt&#x2F;cni: read-only file system
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但宿主机目录 &lt;strong&gt;&#x2F;opt&#x2F;cni&lt;&#x2F;strong&gt; 的权限为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; stat &#x2F;opt&#x2F;cni&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File:&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;opt&#x2F;cni&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size:&lt;&#x2F;span&gt;&lt;span&gt; 4096            Blocks: 8          IO Block: 4096   directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Device:&lt;&#x2F;span&gt;&lt;span&gt; fd00h&#x2F;64768d    Inode: 917533      Links: 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; (0755&#x2F;drwxr-xr-x)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Uid:&lt;&#x2F;span&gt;&lt;span&gt; (    0&#x2F;    root)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gid:&lt;&#x2F;span&gt;&lt;span&gt; (    0&#x2F;    root)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-26 01:41:07.222221020 +0000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Modify:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-20 13:00:36.461719609 +0000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Change:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-20 13:00:36.461719609 +0000
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Birth:&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因此，推测为 &lt;strong&gt;Docker&lt;&#x2F;strong&gt; 服务的问题。最终，通过重启 &lt;strong&gt;Docker&lt;&#x2F;strong&gt; 解决问题:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart docker.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>MPI Operator</title>
		<published>2020-10-24T18:17:12+00:00</published>
		<updated>2020-10-24T18:17:12+00:00</updated>
		<link href="https://blog.kiyoko.io/mpi-operator/" type="text/html"/>
		<id>https://blog.kiyoko.io/mpi-operator/</id>
		<content type="html">&lt;h2 id=&quot;an-zhuang&quot;&gt;安装&lt;&#x2F;h2&gt;
&lt;p&gt;部署默认配置的 &lt;strong&gt;mpi-operator&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;kubeflow&#x2F;mpi-operator
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; mpi-operator
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; deploy&#x2F;v1&#x2F;mpi-operator.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;验证是否安装成功:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get crd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# NAME                                          CREATED AT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# mpijobs.kubeflow.org                          2020-10-23T08:40:15Z
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;can-shu-xuan-xiang&quot;&gt;参数选项&lt;&#x2F;h3&gt;
&lt;p&gt;在使用 &lt;strong&gt;v1&lt;&#x2F;strong&gt; 版本时，需要注意几个选项:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-namespace&lt;&#x2F;strong&gt;: 不为空时，只监控指定 &lt;strong&gt;namespace&lt;&#x2F;strong&gt; 的 &lt;strong&gt;MPIJob&lt;&#x2F;strong&gt;，否则将监控所有的 &lt;strong&gt;namespace&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;-gang-scheduling&lt;&#x2F;strong&gt;: 指定使用的 &lt;strong&gt;gang scheduler&lt;&#x2F;strong&gt; 的名字，此时会启动 &lt;strong&gt;gang scheduling&lt;&#x2F;strong&gt; 调度策略&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;launcher-runs-workloads&lt;&#x2F;strong&gt;: 在 &lt;strong&gt;launcher&lt;&#x2F;strong&gt; 拥有 &lt;strong&gt;GPU&lt;&#x2F;strong&gt; 时执行任务&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;shi-yong&quot;&gt;使用&lt;&#x2F;h2&gt;
&lt;p&gt;创建一个 &lt;strong&gt;MPIJob&lt;&#x2F;strong&gt; 的配置文件:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubeflow.org&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MPIJob
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openmpi-helloworld
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slotsPerWorker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cleanPodPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Running
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mpiReplicaSpecs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Launcher&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;divinerapier&#x2F;openmpi-helloworld:0.0.1
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openmpi-helloworld
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mpirun
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--allow-run-as-root
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-np
&lt;&#x2F;span&gt;&lt;span&gt;             - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;             - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;helloworld&#x2F;mpi_hello_world
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1Gi
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1Gi
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;divinerapier&#x2F;openmpi-helloworld:0.0.1
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openmpi-helloworld
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1Gi
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1Gi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;部署到 &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 上:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;openmpi-helloworld.yml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubeflow&#x2F;mpi-operator&quot;&gt;GitHub: MPI Operator&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;kubeflow&#x2F;introduction-to-kubeflow-mpi-operator-and-industry-adoption-296d5f2e6edc&quot;&gt;Introduction to Kubeflow MPI Operator and Industry Adoption&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.kubeflow.org&#x2F;docs&#x2F;components&#x2F;training&#x2F;mpi&#x2F;&quot;&gt;MPI Training&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>使用 kubeadm 创建 kubernetes 集群</title>
		<published>2020-10-19T20:38:25+00:00</published>
		<updated>2020-10-19T20:38:25+00:00</updated>
		<link href="https://blog.kiyoko.io/using-kubeadm-to-create-a-kubernetes-cluster/" type="text/html"/>
		<id>https://blog.kiyoko.io/using-kubeadm-to-create-a-kubernetes-cluster/</id>
		<content type="html">&lt;p&gt;在 &lt;strong&gt;Ubuntu 20.04&lt;&#x2F;strong&gt; 系统上搭建 &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 集群。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-zhuang-docker&quot;&gt;安装 Docker&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get remove docker docker-engine docker.io containerd runc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;    apt-transport-https \
&lt;&#x2F;span&gt;&lt;span&gt;    ca-certificates \
&lt;&#x2F;span&gt;&lt;span&gt;    curl \
&lt;&#x2F;span&gt;&lt;span&gt;    gnupg-agent \
&lt;&#x2F;span&gt;&lt;span&gt;    software-properties-common
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -fsSL&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-key add -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-key fingerprint 0EBFCD88
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; add-apt-repository \
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deb [arch=amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lsb_release -cs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;   stable&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --fix-missing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; docker-ce docker-ce-cli containerd.io
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;docker&#x2F;daemon.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;quot;exec-opts&amp;quot;: [&amp;quot;native.cgroupdriver=systemd&amp;quot;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;quot;log-driver&amp;quot;: &amp;quot;json-file&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;quot;log-opts&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &amp;quot;max-size&amp;quot;: &amp;quot;100m&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;quot;storage-driver&amp;quot;: &amp;quot;overlay2&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart docker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable docker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;xia-zai-kubernetes-xiang-guan-cheng-xu&quot;&gt;下载 Kubernetes 相关程序&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get update &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; apt-transport-https curl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -s&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;packages.cloud.google.com&#x2F;apt&#x2F;doc&#x2F;apt-key.gpg | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-key add -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F; kubernetes-xenial main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --fix-missing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; kubelet kubeadm kubectl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-mark hold kubelet kubeadm kubectl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;pei-zhi-qiao-jie-wang-luo-fang-huo-qiang&quot;&gt;配置桥接网络防火墙&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;net.bridge.bridge-nf-call-ip6tables = 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;net.bridge.bridge-nf-call-iptables = 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; sysctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --system
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;guan-bi-swap&quot;&gt;关闭 swap&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 临时关闭
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;swapoff -a
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 永久关闭，注释 swap 配置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vi&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;fstab
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;guan-bi-fang-huo-qiang&quot;&gt;关闭防火墙&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl stop firewalld
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl disable firewalld
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;guan-bi-selinux&quot;&gt;关闭 selinux&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; sed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -i &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s&#x2F;enforcing&#x2F;disabled&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &#x2F;etc&#x2F;selinux&#x2F;config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; setenforce 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;la-qu-gcr-jing-xiang&quot;&gt;拉取 gcr 镜像&lt;&#x2F;h2&gt;
&lt;p&gt;需要在所有的 &lt;strong&gt;Master&lt;&#x2F;strong&gt; 节点与 &lt;strong&gt;Worker&lt;&#x2F;strong&gt; 节点拉取镜像。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;bash&lt;&#x2F;strong&gt; 环境使用如下脚本:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_list&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubeadm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; config images list)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; image &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_list&lt;&#x2F;span&gt;&lt;span&gt;} ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cut -d&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; pull registry.aliyuncs.com&#x2F;google_containers&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; image tag registry.aliyuncs.com&#x2F;google_containers&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt; k8s.gcr.io&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; image rm registry.aliyuncs.com&#x2F;google_containers&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;zsh&lt;&#x2F;strong&gt; 环境使用如下脚本:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zsh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-zsh &quot;&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_list&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubeadm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; config images list)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;images&lt;&#x2F;span&gt;&lt;span&gt;=(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_list&lt;&#x2F;span&gt;&lt;span&gt;} | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tr &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39; &amp;#39;`)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; image &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;images&lt;&#x2F;span&gt;&lt;span&gt;} ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cut -d&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; pull registry.aliyuncs.com&#x2F;google_containers&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; image tag registry.aliyuncs.com&#x2F;google_containers&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt; k8s.gcr.io&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; image rm registry.aliyuncs.com&#x2F;google_containers&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;chu-shi-hua-master-jie-dian&quot;&gt;初始化 Master 节点&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;strong&gt;Master&lt;&#x2F;strong&gt; 节点执行命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; kubeadm init \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --apiserver-advertise-address &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname -i&lt;&#x2F;span&gt;&lt;span&gt;) \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --pod-network-cidr&lt;&#x2F;span&gt;&lt;span&gt; 10.244.0.0&#x2F;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --v&lt;&#x2F;span&gt;&lt;span&gt;=5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Your&lt;&#x2F;span&gt;&lt;span&gt; Kubernetes control-plane has initialized successfully!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt; start using your cluster, you need to run the following as a regular user:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chown $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -u&lt;&#x2F;span&gt;&lt;span&gt;):$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -g&lt;&#x2F;span&gt;&lt;span&gt;) $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;You&lt;&#x2F;span&gt;&lt;span&gt; should now deploy a pod network to the cluster.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Run &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubectl apply -f [podnetwork].yaml&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; with one of the options listed at:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Then&lt;&#x2F;span&gt;&lt;span&gt; you can join any number of worker nodes by running the following on each as root:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubeadm&lt;&#x2F;span&gt;&lt;span&gt; join 192.168.50.5:6443&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --token&lt;&#x2F;span&gt;&lt;span&gt; 7zjyq9.x3xkoatt6pb1cbsu \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --discovery-token-ca-cert-hash&lt;&#x2F;span&gt;&lt;span&gt; sha256:1c78c44bc57e6e887c5f81e7a9c6c3e52f098e1ba9255f5303ac78129d410774
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者省略下载镜像步骤，直接创建集群:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; kubeadm init \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --apiserver-advertise-address&lt;&#x2F;span&gt;&lt;span&gt;=$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname -i&lt;&#x2F;span&gt;&lt;span&gt;) \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --image-repository&lt;&#x2F;span&gt;&lt;span&gt; registry.aliyuncs.com&#x2F;google_containers \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --service-cidr&lt;&#x2F;span&gt;&lt;span&gt;=10.5.0.0&#x2F;16 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --pod-network-cidr&lt;&#x2F;span&gt;&lt;span&gt;=10.244.0.0&#x2F;16
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后配置 &lt;strong&gt;kubeconfig&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chown $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -u&lt;&#x2F;span&gt;&lt;span&gt;):$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -g&lt;&#x2F;span&gt;&lt;span&gt;) $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;pei-zhi-wang-luo&quot;&gt;配置网络&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;calico&quot;&gt;Calico&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;manifests&#x2F;canal.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;tian-jia-worker-jie-dian&quot;&gt;添加 Worker 节点&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;strong&gt;Worker&lt;&#x2F;strong&gt; 节点执行命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; kubeadm join 192.168.50.5:6443&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --token&lt;&#x2F;span&gt;&lt;span&gt; 4n2pwp.hq9jyo3auaibma3q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;     --discovery-token-ca-cert-hash&lt;&#x2F;span&gt;&lt;span&gt; sha256:750da2c87a67b96bfec73ade40888d22b61e045fdd28bbb7a4ff2c6ce3e0309c
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;This&lt;&#x2F;span&gt;&lt;span&gt; node has joined the cluster:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; Certificate signing request was sent to apiserver and a response was received.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; The Kubelet was informed of the new secure connection details.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Run &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubectl get nodes&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; on the control-plane to see this node join the cluster.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ce-shi-ji-qun&quot;&gt;测试集群&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kubernetes&#x2F;website&#x2F;master&#x2F;content&#x2F;en&#x2F;examples&#x2F;application&#x2F;nginx-app.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;qing-li-ji-qun&quot;&gt;清理集群&lt;&#x2F;h2&gt;
&lt;p&gt;在期望清理的节点执行:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; kubeadm reset
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; rm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -rf&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;cni&#x2F;net.d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rm -rf ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;install&#x2F;ubuntu&#x2F;&quot;&gt;Install Docker Engine on Ubuntu&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;production-environment&#x2F;container-runtimes&#x2F;&quot;&gt;Container runtimes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;production-environment&#x2F;tools&#x2F;kubeadm&#x2F;install-kubeadm&#x2F;&quot;&gt;Installing kubeadm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;production-environment&#x2F;tools&#x2F;kubeadm&#x2F;create-cluster-kubeadm&#x2F;&quot;&gt;Creating a cluster with kubeadm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudnativelabs&#x2F;kube-router&#x2F;blob&#x2F;master&#x2F;docs&#x2F;kubeadm.md&quot;&gt;Deploying kube-router with kubeadm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;getting-started&#x2F;kubernetes&#x2F;flannel&#x2F;flannel&quot;&gt;Install Calico for policy and flannel (aka Canal) for networking&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>训练系统相关读物</title>
		<published>2020-10-11T11:44:32+00:00</published>
		<updated>2020-10-11T11:44:32+00:00</updated>
		<link href="https://blog.kiyoko.io/readings-about-training-system/" type="text/html"/>
		<id>https://blog.kiyoko.io/readings-about-training-system/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;images.nvidia.com&#x2F;events&#x2F;sc15&#x2F;pdfs&#x2F;NCCL-Woolley.pdf&quot;&gt;NCCL: ACCELERATED MULTI-GPU COLLECTIVE COMMUNICATIONS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;download?doi=10.1.1.95.2490&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;Message Passing, Remote Procedure Calls and Distributed Shared Memory as Communication Paradigms for Distributed Systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;50116885&quot;&gt;分布式训练的方案和效率对比&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gaocegege.com&#x2F;Blog&#x2F;mpi-1&quot;&gt;MPI，OpenMPI 与深度学习&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mpitutorial.com&#x2F;tutorials&#x2F;mpi-introduction&#x2F;zh_cn&#x2F;&quot;&gt;MPI 教程介绍&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mpi-forum.org&#x2F;&quot;&gt;MPI Forum&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;149771261&quot;&gt;2020 Rethinking GPU 集群上的分布式训练&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;40578792&quot;&gt;Horovod-基于TensorFlow分布式深度学习框架&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;horovod&#x2F;horovod&quot;&gt;Github: Horovod&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;manage-gpus&#x2F;scheduling-gpus&#x2F;&quot;&gt;Schedule GPUs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;extend-kubernetes&#x2F;compute-storage-net&#x2F;device-plugins&#x2F;&quot;&gt;Device Plugins&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;towardsdatascience.com&#x2F;distributed-deep-learning-training-with-horovod-on-kubernetes-6b28ac1d6b5d&quot;&gt;Distributed Deep Learning Training with Horovod on Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.nvidia.com&#x2F;kubernetes-gpu&quot;&gt;Kubernetes on NVIDIA GPUs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes 存储卷</title>
		<published>2020-10-07T17:37:14+00:00</published>
		<updated>2020-10-07T17:37:14+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-volumes/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-volumes/</id>
		<content type="html">&lt;h2 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;strong&gt;Docker&lt;&#x2F;strong&gt; 中，&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;storage&#x2F;&quot;&gt;Volume&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 概念表示磁盘上或者另外一个容器内的一个目录。 直到最近，Docker 才支持对基于本地磁盘的 Volume 的生存期进行管理。 虽然 Docker 现在也能提供 Volume 驱动程序，但是目前功能还非常有限 （例如，截至 Docker 1.7，每个容器只允许有一个 Volume 驱动程序，并且无法将参数传递给 Volume）。&lt;&#x2F;p&gt;
&lt;p&gt;而在 &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 中，&lt;strong&gt;Volume&lt;&#x2F;strong&gt; 具有明确的生命周期——与其所属 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 相同。 因此，&lt;strong&gt;Volume 比 Pod 中运行的任何容器的存活期都长&lt;&#x2F;strong&gt;，在容器重新启动时数据也会得到保留。 当然，&lt;strong&gt;当一个 Pod 不再存在时，卷也将不再存在&lt;&#x2F;strong&gt;。 更重要的是，&lt;strong&gt;Kubernetes 可以支持许多类型的卷，Pod 也能同时使用任意数量的卷&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Volume&lt;&#x2F;strong&gt; 的核心是包含一些数据的目录，Pod 中的容器可以访问该目录。 特定的卷类型可以决定这个目录是如何形成的，并能决定它支持何种介质，以及目录中存放什么内容。&lt;&#x2F;p&gt;
&lt;p&gt;使用 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 时, Pod 声明中需要提供卷的类型 (&lt;strong&gt;.spec.volumes&lt;&#x2F;strong&gt; 字段) 和 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 挂载的位置 (&lt;strong&gt;.spec.containers.volumeMounts&lt;&#x2F;strong&gt; 字段).&lt;&#x2F;p&gt;
&lt;p&gt;容器中的进程能看到由它们的 Docker 镜像和卷组成的文件系统视图。 &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;userguide&#x2F;dockerimages&#x2F;&quot;&gt;Docker 镜像&lt;&#x2F;a&gt; 位于文件系统层次结构的根部，并且任何 Volume 都挂载在镜像内的指定路径上。 卷不能挂载到其他卷，也不能与其他卷有硬链接。 Pod 中的每个容器必须独立地指定每个卷的挂载位置(&lt;strong&gt;Volumes&lt;&#x2F;strong&gt; 之间的挂载点应该相互独立)。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;volume-de-lei-xing&quot;&gt;Volume 的类型&lt;&#x2F;h2&gt;
&lt;p&gt;Kubernetes 支持下列类型的卷:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#Cephfs&quot;&gt;cephfs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#ConfigMap&quot;&gt;configMap&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#CSI&quot;&gt;csi&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#DownwardAPI&quot;&gt;downwardAPI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#EmptyDir&quot;&gt;emptyDir&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#HostPath&quot;&gt;hostPath&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#Local&quot;&gt;local&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#Nfs&quot;&gt;nfs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#PersistentVolumeClaim&quot;&gt;persistentVolumeClaim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#Projected&quot;&gt;projected&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#Secret&quot;&gt;secret&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;cephfs&quot;&gt;Cephfs&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;cephfs&lt;&#x2F;strong&gt; 允许用户将现存的 &lt;strong&gt;CephFS&lt;&#x2F;strong&gt; 卷挂载到 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 中。 与 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.kiyoko.io&#x2F;kubernetes-volumes&#x2F;#EmptyDir&quot;&gt;emptyDir&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 不同的是，&lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 会在删除 Pod 的同时&lt;strong&gt;一并被删除&lt;&#x2F;strong&gt;，&lt;strong&gt;cephfs&lt;&#x2F;strong&gt; 卷的内容在删除 Pod 时会被保留，卷只是被卸载掉了。 这意味着 &lt;strong&gt;CephFS 卷可以被预先填充数据，并且这些数据可以在 Pod 之间&amp;quot;传递&amp;quot;&lt;&#x2F;strong&gt;。CephFS 卷可同时被多个写者挂载。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： 在您使用 Ceph 卷之前，您的 Ceph 服务器必须正常运行并且要使用的 share 被导出（exported）。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;更多信息请参考 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;examples&#x2F;tree&#x2F;master&#x2F;volumes&#x2F;cephfs&#x2F;&quot;&gt;CephFS 示例&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;configmap&quot;&gt;ConfigMap&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;configMap&lt;&#x2F;strong&gt; 资源提供了向 Pod &lt;strong&gt;注入配置数据&lt;&#x2F;strong&gt;的方法。 ConfigMap 对象中存储的数据可以被 configMap 类型的卷引用，然后被应用到 Pod 中运行的容器化应用。&lt;&#x2F;p&gt;
&lt;p&gt;当引用 configMap 对象时，你可以简单的在 Volume 中通过它名称来引用。 还可以自定义 ConfigMap 中特定条目所要使用的路径。 例如，要将名为 log-config 的 ConfigMap 挂载到名为 configmap-pod 的 Pod 中，您可以使用下面的 YAML:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;configmap-pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;busybox
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;config-vol
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;etc&#x2F;config
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;config-vol
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configMap&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log-config
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log_level
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log_level
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;csi&quot;&gt;CSI&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md&quot;&gt;容器存储接口 (CSI)&lt;&#x2F;a&gt; 为容器编排系统（如 Kubernetes）定义标准接口，以将任意存储系统暴露给它们的容器工作负载。&lt;&#x2F;p&gt;
&lt;p&gt;更多详情请阅读 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;community&#x2F;blob&#x2F;master&#x2F;contributors&#x2F;design-proposals&#x2F;storage&#x2F;container-storage-interface.md&quot;&gt;CSI 设计方案&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;CSI 的支持在 Kubernetes v1.9 中作为 alpha 特性引入，在 Kubernetes v1.10 中转为 beta 特性，并在 Kubernetes v1.13 正式 GA。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明:&lt;&#x2F;strong&gt; CSI驱动程序可能并非在所有Kubernetes版本中都兼容。 请查看特定CSI驱动程序的文档，以获取每个 Kubernetes 版本所支持的部署步骤以及兼容性列表。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;一旦在 &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 集群上部署了 CSI 兼容卷驱动程序，用户就可以使用 &lt;strong&gt;csi&lt;&#x2F;strong&gt; 作为卷类型来关联、挂载 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 暴露出来的卷。&lt;&#x2F;p&gt;
&lt;p&gt;允许如下三种方式，在 Pod 中使用 &lt;strong&gt;csi&lt;&#x2F;strong&gt; 类型的卷:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;strong&gt;PersistentVolumeClaim&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;通过 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;ephemeral-volumes&#x2F;#generic-ephemeral-volumes&quot;&gt;Generic ephemeral volumes&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;通过 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;ephemeral-volumes&#x2F;#csi-ephemeral-volumes&quot;&gt;CSI ephemeral volumes&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;存储管理员可以使用以下字段来配置 CSI 持久卷(CSI persistent volume):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;driver&lt;&#x2F;strong&gt;：指定要使用的卷 驱动程序(CSI Driver) 名称的字符串值。 这个值必须与 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 的 &lt;strong&gt;&lt;a href=&quot;(https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#getplugininfo)&quot;&gt;GetPluginInfoResponse&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 的 &lt;strong&gt;name&lt;&#x2F;strong&gt; 字段相同。 &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 使用所给的值来标识要调用的 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt;；&lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 也使用该值来&lt;strong&gt;辨识哪些 PV 对象属于该 CSI Driver&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;volumeHandle&lt;&#x2F;strong&gt;：唯一标识卷的字符串值。 该值必须与 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 的 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#createvolume&quot;&gt;CreateVolumeResponse&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 的 &lt;strong&gt;volume.id&lt;&#x2F;strong&gt; 字段相同。 在所有对 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 的调用中，引用该 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 时都使用此值作为 &lt;strong&gt;volume_id&lt;&#x2F;strong&gt; 参数。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;readOnly&lt;&#x2F;strong&gt;：一个可选的布尔值，指示通过 &lt;strong&gt;ControllerPublished&lt;&#x2F;strong&gt; 关联该卷时是否设置该卷为只读。 &lt;strong&gt;默认值是 false&lt;&#x2F;strong&gt;。 该值通过 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#controllerpublishvolume&quot;&gt;ControllerPublishVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 中的 &lt;strong&gt;readonly&lt;&#x2F;strong&gt; 字段传递给 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;fsType&lt;&#x2F;strong&gt;：如果 &lt;strong&gt;PV&lt;&#x2F;strong&gt; 的 &lt;strong&gt;VolumeMode&lt;&#x2F;strong&gt; 为 &lt;strong&gt;Filesystem&lt;&#x2F;strong&gt;，则该字段指定挂载卷时应该使用的文件系统。 倘若 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 尚未完成格式化，且支持格式化，则该值将被用于格式化。 可以通过 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#controllerpublishvolume&quot;&gt;ControllerPublishVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;、&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#nodestagevolume&quot;&gt;NodeStageVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 和 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#nodepublishvolume&quot;&gt;NodePublishVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 的 &lt;strong&gt;volume_capability&lt;&#x2F;strong&gt; 字段将该值传递给 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;volumeAttributes&lt;&#x2F;strong&gt;：一个 &lt;strong&gt;map[string]string&lt;&#x2F;strong&gt; 类型的映射表，用来设置 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 的静态属性。 该映射表必须与 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 返回的 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#createvolume&quot;&gt;CreateVolumeResponse&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 中的 volume.attributes 字段的映射相对应。 该映射表通过 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#controllerpublishvolume&quot;&gt;ControllerPublishVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;、&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#nodestagevolume&quot;&gt;NodeStageVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;、和 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#nodepublishvolume&quot;&gt;NodePublishVolumeRequest&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 中的 &lt;strong&gt;volume_attributes&lt;&#x2F;strong&gt; 字段传递给 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;&#x2F;strong&gt;: 在 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md&quot;&gt;spec&lt;&#x2F;a&gt; 中只看到了 &lt;strong&gt;volume_context&lt;&#x2F;strong&gt;，并没有 &lt;strong&gt;attributes&lt;&#x2F;strong&gt;，根据注释与数据类型来分析，或许是指这个字段？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;controllerPublishSecretRef&lt;&#x2F;strong&gt;：对包含敏感信息的 secret 对象的引用；该敏感信息会被传递给 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 来完成 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#controllerpublishvolume&quot;&gt;ControllerPublishVolume&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 和 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#controllerunpublishvolume&quot;&gt;ControllerUnpublishVolume&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 调用。 该字段为可选字段；为空表示不需要 secret。 如果 secret 对象包含多个 secret，则所有的 secret 都会被传递。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nodeStageSecretRef&lt;&#x2F;strong&gt;：对包含敏感信息的 secret 对象的引用，以传递给 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 来完成 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#nodestagevolume&quot;&gt;NodeStageVolume&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 调用。 该字段为可选字段；为空表示不需要 secret。 如果 secret 对象包含多个 secret，则所有的 secret 都会被传递。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nodePublishSecretRef&lt;&#x2F;strong&gt;：对包含敏感信息的 secret 对象的引用，以传递给 &lt;strong&gt;CSI Driver&lt;&#x2F;strong&gt; 来完成 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&#x2F;blob&#x2F;master&#x2F;spec.md#nodepublishvolume&quot;&gt;NodePublishVolume&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 调用。 该字段为可选字段；为空表示不需要 secret。 如果 secret 对象包含多个 secret，则所有的 secret 都会被传递。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;downwardapi&quot;&gt;DownwardAPI&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;downwardAPI&lt;&#x2F;strong&gt; 类型的 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 被用于使 &lt;strong&gt;downward API&lt;&#x2F;strong&gt; 数据对应用程序可见。其表现形式为，挂载一个目录，并将请求的数据写入到纯文本文件中。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;emptydir&quot;&gt;EmptyDir&lt;&#x2F;h3&gt;
&lt;p&gt;当 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 被指定到某个节点上时，首先创建的是一个 &lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 类型的 &lt;strong&gt;Volume&lt;&#x2F;strong&gt;，并且只要 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 保持在该节点上运行，&lt;strong&gt;Volume&lt;&#x2F;strong&gt; 就一直存在。正如名字所说的那样，&lt;strong&gt;Volume&lt;&#x2F;strong&gt; 的初始状态为空。虽然 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 中的容器挂载 &lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 类型 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 的路径可能不尽相同，但这都不重要，重要的是，这些容器都可以读写 &lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 类型 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 中的相同的文件。 无论因何种原因，只要 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 从节点上被删除，&lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 类型的 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 中的数据也会被永久删除。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;&#x2F;strong&gt;: 容器崩溃并不会导致 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 从节点上被移除，因此容器崩溃时 &lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 类型 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 中的数据是安全的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;有如下需求可以考虑使用 &lt;strong&gt;emptyDir&lt;&#x2F;strong&gt; 类型 &lt;strong&gt;Volume&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;缓存空间，例如基于磁盘的归并排序。&lt;&#x2F;li&gt;
&lt;li&gt;为耗时较长的计算任务提供检查点，以便任务能方便地从崩溃前状态恢复执行。&lt;&#x2F;li&gt;
&lt;li&gt;在 Web 服务器容器服务数据时，保存内容管理器容器获取的文件。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;默认情况下， &lt;strong&gt;emptyDir volume&lt;&#x2F;strong&gt; 所使用的的实际存储介质由节点使用何种存储介质决定: 可以是 &lt;strong&gt;HDD&lt;&#x2F;strong&gt; 或 &lt;strong&gt;SSD&lt;&#x2F;strong&gt; 或 &lt;strong&gt;NFS&lt;&#x2F;strong&gt; 等。但是，可以令 &lt;strong&gt;emptyDir.medium = Memory&lt;&#x2F;strong&gt; 使 &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 安装 &lt;strong&gt;tmpfs&lt;&#x2F;strong&gt;。但需要考虑到，&lt;strong&gt;tmpfs&lt;&#x2F;strong&gt; 的优势与劣势都很突出:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;优势: 基于 &lt;strong&gt;RAM&lt;&#x2F;strong&gt; 的文件系统，速度非常快&lt;&#x2F;li&gt;
&lt;li&gt;劣势: 随节点重启被清除，且写入的所有文件都会计入容器的内存消耗，受容器内存限制约束&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;emptydir-shi-li&quot;&gt;EmptyDir 示例&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-pd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k8s.gcr.io&#x2F;test-webserver
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-container
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;cache
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cache-volume
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cache-volume
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emptyDir&lt;&#x2F;span&gt;&lt;span&gt;: {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;hostpath&quot;&gt;HostPath&lt;&#x2F;h3&gt;
&lt;p&gt;A hostPath volume mounts a file or directory from the host node&#x27;s filesystem into your Pod. This is not something that most Pods will need, but it offers a powerful escape hatch for some applications.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;hostPath&lt;&#x2F;strong&gt; 类型的 &lt;strong&gt;Volume&lt;&#x2F;strong&gt; 会将宿主机节点的路径挂载到&lt;&#x2F;p&gt;
&lt;p&gt;For example, some uses for a hostPath are:&lt;&#x2F;p&gt;
&lt;p&gt;running a Container that needs access to Docker internals; use a hostPath of &#x2F;var&#x2F;lib&#x2F;docker
running cAdvisor in a Container; use a hostPath of &#x2F;sys
allowing a Pod to specify whether a given hostPath should exist prior to the Pod running, whether it should be created, and what it should exist as
In addition to the required path property, user can optionally specify a type for a hostPath volume.&lt;&#x2F;p&gt;
&lt;p&gt;The supported values for field type are:&lt;&#x2F;p&gt;
&lt;p&gt;Value Behavior  Empty string (default) is for backward compatibility, which means that no checks will be performed before mounting the hostPath volume. DirectoryOrCreate If nothing exists at the given path, an empty directory will be created there as needed with permission set to 0755, having the same group and ownership with Kubelet. Directory A directory must exist at the given path FileOrCreate If nothing exists at the given path, an empty file will be created there as needed with permission set to 0644, having the same group and ownership with Kubelet. File A file must exist at the given path Socket A UNIX socket must exist at the given path CharDevice A character device must exist at the given path BlockDevice A block device must exist at the given path
Watch out when using this type of volume, because:&lt;&#x2F;p&gt;
&lt;p&gt;Pods with identical configuration (such as created from a podTemplate) may behave differently on different nodes due to different files on the nodes
when Kubernetes adds resource-aware scheduling, as is planned, it will not be able to account for resources used by a hostPath
the files or directories created on the underlying hosts are only writable by root. You either need to run your process as root in a privileged Container or modify the file permissions on the host to be able to write to a hostPath volume&lt;&#x2F;p&gt;
&lt;h3 id=&quot;local&quot;&gt;Local&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;nfs&quot;&gt;Nfs&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;persistentvolumeclaim&quot;&gt;PersistentVolumeClaim&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;projected&quot;&gt;Projected&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;secret&quot;&gt;Secret&lt;&#x2F;h3&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;volumes&#x2F;&quot;&gt;Volumes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes 持久卷</title>
		<published>2020-10-07T17:30:27+00:00</published>
		<updated>2020-10-07T17:30:27+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-persistent-volume/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-persistent-volume/</id>
		<content type="html"></content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes 控制器</title>
		<published>2020-10-06T13:13:35+00:00</published>
		<updated>2020-10-06T13:13:35+00:00</updated>
		<link href="https://blog.kiyoko.io/kubernetes-controllers/" type="text/html"/>
		<id>https://blog.kiyoko.io/kubernetes-controllers/</id>
		<content type="html">&lt;p&gt;在机器人技术和自动化领域，控制回路（Control Loop）是一个非终止回路，用于调节系统状态。&lt;&#x2F;p&gt;
&lt;p&gt;这是一个控制环的例子：房间里的温度自动调节器。&lt;&#x2F;p&gt;
&lt;p&gt;当你设置了温度，告诉了温度自动调节器你的期望状态（Desired State）。 房间的实际温度是当前状态（Current State）。 通过对设备的开关控制，温度自动调节器让其当前状态接近期望状态。&lt;&#x2F;p&gt;
&lt;p&gt;控制器通过 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kube-apiserver&#x2F;&quot;&gt;apiserver&lt;&#x2F;a&gt; 监控集群的公共状态，并致力于将当前状态转变为期望的状态。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kong-zhi-qi-mo-shi&quot;&gt;控制器模式&lt;&#x2F;h2&gt;
&lt;p&gt;一个控制器至少追踪一种类型的 Kubernetes 资源。这些 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;working-with-objects&#x2F;kubernetes-objects&#x2F;&quot;&gt;对象&lt;&#x2F;a&gt; 有一个代表期望状态的 spec 字段。 该资源的控制器负责确保其当前状态接近期望状态。&lt;&#x2F;p&gt;
&lt;p&gt;控制器可能会自行执行操作；在 Kubernetes 中更常见的是一个控制器会发送信息给 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kube-apiserver&#x2F;&quot;&gt;API 服务器&lt;&#x2F;a&gt;，这会有副作用。 具体可参看后文的例子。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tong-guo-api-fu-wu-qi-lai-kong-zhi&quot;&gt;通过 API 服务器来控制&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;jobs-run-to-completion&quot;&gt;Job&lt;&#x2F;a&gt; 控制器是一个 Kubernetes 内置控制器的例子。 内置控制器通过和集群 API 服务器交互来管理状态。&lt;&#x2F;p&gt;
&lt;p&gt;Job 是一种 Kubernetes 资源，它运行一个或者多个 Pod， 来执行一个任务然后停止。 （一旦被调度了，对 kubelet 来说 Pod 对象就会变成了期望状态的一部分）。&lt;&#x2F;p&gt;
&lt;p&gt;在集群中，当 Job 控制器拿到新任务时，它会保证一组 Node 节点上的 kubelet 可以运行正确数量的 Pod 来完成工作。 Job 控制器不会自己运行任何的 Pod 或者容器。Job 控制器是通知 API 服务器来创建或者移除 Pod。&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;glossary&#x2F;?all=true#term-control-plane&quot;&gt;控制面&lt;&#x2F;a&gt;中的其它组件 根据新的消息作出反应（调度并运行新 Pod）并且最终完成工作。&lt;&#x2F;p&gt;
&lt;p&gt;创建新 Job 后，所期望的状态就是完成这个 Job。Job 控制器会让 Job 的当前状态不断接近期望状态：创建为 Job 要完成工作所需要的 Pod，使 Job 的状态接近完成。&lt;&#x2F;p&gt;
&lt;p&gt;控制器也会更新配置对象。例如：一旦 Job 的工作完成了，Job 控制器会更新 Job 对象的状态为 Finished。&lt;&#x2F;p&gt;
&lt;p&gt;（这有点像温度自动调节器关闭了一个灯，以此来告诉你房间的温度现在到你设定的值了）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-jie-kong-zhi&quot;&gt;直接控制&lt;&#x2F;h3&gt;
&lt;p&gt;相比 Job 控制器，有些控制器需要对集群外的一些东西进行修改。&lt;&#x2F;p&gt;
&lt;p&gt;例如，如果你使用一个控制环来保证集群中有足够的&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;architecture&#x2F;nodes&#x2F;&quot;&gt;节点&lt;&#x2F;a&gt;，那么控制就需要当前集群外的一些服务在需要时创建新节点。&lt;&#x2F;p&gt;
&lt;p&gt;和外部状态交互的控制器从 API 服务器获取到它想要的状态，然后直接和外部系统进行通信并使当前状态更接近期望状态。&lt;&#x2F;p&gt;
&lt;p&gt;（实际上有一个控制器可以水平地扩展集群中的节点。请参阅 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;administer-cluster&#x2F;cluster-management&#x2F;#cluster-autoscaling&quot;&gt;集群自动扩缩容&lt;&#x2F;a&gt;）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;she-ji&quot;&gt;设计&lt;&#x2F;h2&gt;
&lt;p&gt;作为设计原则之一，Kubernetes 使用了很多控制器，每个控制器管理集群状态的一个特定方面。 最常见的一个特定的控制器使用一种类型的资源作为它的期望状态， 控制器管理控制另外一种类型的资源向它的期望状态演化。&lt;&#x2F;p&gt;
&lt;p&gt;使用简单的控制器而不是一组相互连接的单体控制回路是很有用的。 控制器会失败，所以 Kubernetes 的设计正是考虑到了这一点。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：
可以有多个控制器来创建或者更新相同类型的对象。 在后台，Kubernetes 控制器确保它们只关心与其控制资源相关联的资源。&lt;&#x2F;p&gt;
&lt;p&gt;例如，你可以创建 Deployment 和 Job；它们都可以创建 Pod。 Job 控制器不会删除 Deployment 所创建的 Pod，因为有信息 （&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;working-with-objects&#x2F;labels&#x2F;&quot;&gt;标签&lt;&#x2F;a&gt;）让控制器可以区分这些 Pod。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;yun-xing-kong-zhi-qi-de-fang-shi&quot;&gt;运行控制器的方式&lt;&#x2F;h2&gt;
&lt;p&gt;Kubernetes 内置一组控制器，运行在 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;command-line-tools-reference&#x2F;kube-controller-manager&#x2F;&quot;&gt;kube-controller-manager&lt;&#x2F;a&gt; 内。 这些内置的控制器提供了重要的核心功能。&lt;&#x2F;p&gt;
&lt;p&gt;Deployment 控制器和 Job 控制器是 Kubernetes 内置控制器的典型例子。 Kubernetes 允许你运行一个稳定的控制平面，这样即使某些内置控制器失败了， 控制平面的其他部分会接替它们的工作。&lt;&#x2F;p&gt;
&lt;p&gt;你会遇到某些控制器运行在控制面之外，用以扩展 Kubernetes。 或者，如果你愿意，你也可以自己编写新控制器。 你可以以一组 Pod 来运行你的控制器，或者运行在 Kubernetes 之外。 最合适的方案取决于控制器所要执行的功能是什么。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ju-li-shuo-ming&quot;&gt;举例说明&lt;&#x2F;h2&gt;
&lt;p&gt;以 &lt;strong&gt;Deployment&lt;&#x2F;strong&gt; 为例:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx:1.7.9
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;该 Deployment 定义的编排动作要求: 确保携带了 &lt;strong&gt;app=nginx&lt;&#x2F;strong&gt; 标签的 Pod 的个数，永远等于 &lt;strong&gt;spec.replicas&lt;&#x2F;strong&gt; 指定的个数，即 &lt;strong&gt;2&lt;&#x2F;strong&gt; 个。&lt;&#x2F;p&gt;
&lt;p&gt;集群会根据携带 &lt;strong&gt;app=nginx&lt;&#x2F;strong&gt; 标签的 &lt;strong&gt;Pod&lt;&#x2F;strong&gt; 的实际数量来执行创建或者删除 Pod 操作，使数量收敛于 &lt;strong&gt;2&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;这时，你也许就会好奇：究竟是 Kubernetes 项目中的哪个组件，在执行这些操作呢？&lt;&#x2F;p&gt;
&lt;p&gt;在上一小节提到的 &lt;strong&gt;kube-controller-manager&lt;&#x2F;strong&gt; 就是负责管理 &lt;strong&gt;Controllers&lt;&#x2F;strong&gt; 的服务组件。并且，&lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 项目已经包含了若干的 &lt;strong&gt;Controllers&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd kubernetes&#x2F;pkg&#x2F;controller&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d &lt;&#x2F;span&gt;&lt;span&gt;*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deployment&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;             job&#x2F;                    podautoscaler&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cloud&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;                  disruption&#x2F;             namespace&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicaset&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;             serviceaccount&#x2F;         volume&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cronjob&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;                garbagecollector&#x2F;       nodelifecycle&#x2F;          replication&#x2F;            statefulset&#x2F;            daemon&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kong-zhi-xun-huan&quot;&gt;控制循环&lt;&#x2F;h3&gt;
&lt;p&gt;正如本文开篇所说，&lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; 的 &lt;strong&gt;Controllers&lt;&#x2F;strong&gt; 遵循 &lt;strong&gt;控制回路（Control Loop）&lt;&#x2F;strong&gt; 的工作模式。&lt;&#x2F;p&gt;
&lt;p&gt;比如，对于编排的对象 X，可以用一段 Go 语言风格的伪代码，来描述其 Controller 的控制循环：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;实际状态 &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;获取集群中对象X的实际状态&lt;&#x2F;span&gt;&lt;span&gt;（&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Actual State&lt;&#x2F;span&gt;&lt;span&gt;）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;期望状态 &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;获取集群中对象X的期望状态&lt;&#x2F;span&gt;&lt;span&gt;（&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Desired State&lt;&#x2F;span&gt;&lt;span&gt;）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;实际状态 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;期望状态&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;什么都不做
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;执行编排动作&lt;&#x2F;span&gt;&lt;span&gt;，&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;将实际状态调整为期望状态
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一般情况:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实际状态来自于 Kubernetes 集群本身&lt;&#x2F;strong&gt;: 比如，kubelet 通过心跳汇报的容器状态和节点状态，或者监控系统中保存的应用监控数据，或者控制器主动收集的它自己感兴趣的信息，这些都是常见的实际状态的来源。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;期望状态来自于用户提交的 YAML 文件&lt;&#x2F;strong&gt;: 比如，Deployment 对象中 Replicas 字段的值。很明显，这些信息往往都保存在 Etcd 中。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;具体到本示例，Deployment 控制器的工作流程为:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;从 Etcd 中获取到所有携带了 &lt;strong&gt;app: nginx&lt;&#x2F;strong&gt; 标签的 Pod，统计其数量，作为实际状态&lt;&#x2F;li&gt;
&lt;li&gt;从 Template 中获取 Deployment 对象的 &lt;strong&gt;spec.replicas&lt;&#x2F;strong&gt; 值，作为期望状态&lt;&#x2F;li&gt;
&lt;li&gt;将两个状态做比较，然后根据比较结果，确定是创建 Pod，还是删除已有的 Pod&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;以上即为 &lt;strong&gt;Kubernetes Controller&lt;&#x2F;strong&gt; 的工作模式。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;architecture&#x2F;controller&#x2F;&quot;&gt;Architecture-Controllers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;&quot;&gt;Workloads-Controllers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>理解 Kubernetes 对象</title>
		<published>2020-09-30T17:19:21+00:00</published>
		<updated>2020-09-30T17:19:21+00:00</updated>
		<link href="https://blog.kiyoko.io/understanding-kubernetes-objects/" type="text/html"/>
		<id>https://blog.kiyoko.io/understanding-kubernetes-objects/</id>
		<content type="html">&lt;p&gt;在 Kubernetes 系统中，Kubernetes 对象 是持久化的实体。 Kubernetes 使用这些实体去表示整个集群的状态。特别地，它们描述了如下信息：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;哪些容器化应用在运行（以及在哪些节点上）&lt;&#x2F;li&gt;
&lt;li&gt;可以被应用使用的资源&lt;&#x2F;li&gt;
&lt;li&gt;关于应用运行时表现的策略，比如重启策略、升级策略，以及容错策略&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Kubernetes 对象是 &lt;strong&gt;目标性记录&lt;&#x2F;strong&gt;，即一旦创建对象，Kubernetes 系统将持续工作以确保对象存在。 通过创建对象，本质上是在告知 Kubernetes 系统，所需要的集群工作负载看起来是什么样子的， 这就是 Kubernetes 集群的 &lt;strong&gt;期望状态（Desired State）&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;操作 Kubernetes 对象 —— 无论是创建、修改，或者删除 —— 需要使用 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;kubernetes-api&quot;&gt;Kubernetes API&lt;&#x2F;a&gt;。 比如，当使用 kubectl 命令行接口时，CLI 会执行必要的 Kubernetes API 调用， 也可以在程序中使用 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;using-api&#x2F;client-libraries&#x2F;&quot;&gt;客户端库&lt;&#x2F;a&gt; 直接调用 Kubernetes API。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dui-xiang-gui-yue-spec-yu-zhuang-tai-status&quot;&gt;对象规约（Spec）与状态（Status）&lt;&#x2F;h2&gt;
&lt;p&gt;几乎每个 Kubernetes 对象包含两个嵌套的对象字段，它们负责管理对象的配置： 对象 spec（规约） 和 对象 status（状态） 。 对于具有 spec 的对象，你必须在创建对象时设置其内容，描述你希望对象所具有的特征： 期望状态（Desired State） 。&lt;&#x2F;p&gt;
&lt;p&gt;status 描述了对象的 当前状态（Current State），它是由 Kubernetes 系统和组件 设置并更新的。在任何时刻，Kubernetes &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;glossary&#x2F;?all=true#term-control-plane&quot;&gt;控制平面&lt;&#x2F;a&gt; 都一直积极地管理着对象的实际状态，以使之与期望状态相匹配。&lt;&#x2F;p&gt;
&lt;p&gt;例如，Kubernetes 中的 Deployment 对象能够表示运行在集群中的应用。 当创建 Deployment 时，可能需要设置 Deployment 的 spec，以指定该应用需要有 3 个副本运行。 Kubernetes 系统读取 Deployment 规约，并启动我们所期望的应用的 3 个实例 —— 更新状态以与规约相匹配。 如果这些实例中有的失败了（一种状态变更），Kubernetes 系统通过执行修正操作 来响应规约和状态间的不一致 —— 在这里意味着它会启动一个新的实例来替换。&lt;&#x2F;p&gt;
&lt;p&gt;关于对象 spec、status 和 metadata 的更多信息，可参阅 &lt;a href=&quot;https:&#x2F;&#x2F;git.k8s.io&#x2F;community&#x2F;contributors&#x2F;devel&#x2F;sig-architecture&#x2F;api-conventions.md&quot;&gt;Kubernetes API 约定&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;miao-shu-kubernetes-dui-xiang&quot;&gt;描述 Kubernetes 对象&lt;&#x2F;h2&gt;
&lt;p&gt;创建 Kubernetes 对象时，必须提供对象的规约，用来描述该对象的期望状态， 以及关于对象的一些基本信息（例如名称）。 当使用 Kubernetes API 创建对象时（或者直接创建，或者基于kubectl）， API 请求必须在请求体中包含 JSON 格式的信息。 &lt;strong&gt;大多数情况下，需要在 .yaml 文件中为 kubectl 提供这些信息&lt;&#x2F;strong&gt;。 kubectl 在发起 API 请求时，将这些信息转换成 JSON 格式。&lt;&#x2F;p&gt;
&lt;p&gt;这里有一个 .yaml 示例文件，展示了 Kubernetes Deployment 的必需字段和对象规约：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# for versions before 1.9.0 use apps&#x2F;v1beta2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# tells deployment to run 2 pods matching the template
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx:1.14.2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用类似于上面的 .yaml 文件来创建 Deployment的一种方式是使用 kubectl 命令行接口（CLI）中的 kubectl apply 命令， 将 .yaml 文件作为参数。下面是一个示例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;application&#x2F;deployment.yaml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --record
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出类似如下这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;deployment.apps&#x2F;nginx-deployment created
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bi-xu-zi-duan&quot;&gt;必需字段&lt;&#x2F;h3&gt;
&lt;p&gt;在想要创建的 Kubernetes 对象对应的 .yaml 文件中，需要配置如下的字段：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;apiVersion - 创建该对象所使用的 Kubernetes API 的版本&lt;&#x2F;li&gt;
&lt;li&gt;kind - 想要创建的对象的类别&lt;&#x2F;li&gt;
&lt;li&gt;metadata - 帮助唯一性标识对象的一些数据，包括一个 name 字符串、UID 和可选的 namespace&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;你也需要提供对象的 spec 字段。 对象 spec 的精确格式对每个 Kubernetes 对象来说是不同的，包含了特定于该对象的嵌套字段。 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.19&#x2F;&quot;&gt;Kubernetes API 参考&lt;&#x2F;a&gt; 能够帮助我们找到任何我们想创建的对象的 spec 格式。 例如，可以从 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.19&#x2F;#podspec-v1-core&quot;&gt;core&#x2F;v1 PodSpec&lt;&#x2F;a&gt; 查看 Pod 的 spec 格式， 并且可以从 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;generated&#x2F;kubernetes-api&#x2F;v1.19&#x2F;#deploymentspec-v1-apps&quot;&gt;apps&#x2F;v1 DeploymentSpec&lt;&#x2F;a&gt; 查看 Deployment 的 spec 格式。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;working-with-objects&#x2F;kubernetes-objects&#x2F;&quot;&gt;理解 Kubernetes 对象&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;glossary&#x2F;?all=true#term-control-plane&quot;&gt;控制平面&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Play with Kubernetes</title>
		<published>2020-09-04T08:08:52+00:00</published>
		<updated>2020-09-04T08:08:52+00:00</updated>
		<link href="https://blog.kiyoko.io/play-with-k8s/" type="text/html"/>
		<id>https://blog.kiyoko.io/play-with-k8s/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;labs.play-with-k8s.com&#x2F;&quot;&gt;Play with Kubernetes&lt;&#x2F;a&gt; 是一个可以在浏览器使用的 &lt;code&gt;CentOS&lt;&#x2F;code&gt; 虚拟机环境，允许用户通过 &lt;code&gt;github&lt;&#x2F;code&gt; 账号登录。在这里，用户可以部署，学习使用 &lt;code&gt;k8s&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;跳过前面一些很简单的操作。在左侧添加 4 台虚拟机。每一台新创建的虚拟机控制台界面会有如下的提示:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt; 1. Initializes cluster master node:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; kubeadm init --apiserver-advertise-address $(hostname -i) --pod-network-cidr 10.5.0.0&#x2F;16
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; 2. Initialize cluster networking:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;cloudnativelabs&#x2F;kube-router&#x2F;master&#x2F;daemonset&#x2F;kubeadm-kuberouter.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; 3. (Optional) Create an nginx deployment:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kubernetes&#x2F;website&#x2F;master&#x2F;content&#x2F;en&#x2F;examples&#x2F;application&#x2F;nginx-app.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;da-jian-kubernetes-huan-jing&quot;&gt;搭建 Kubernetes 环境&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;code&gt;node-1&lt;&#x2F;code&gt; 中执行第一条命令，创建 &lt;code&gt;Master&lt;&#x2F;code&gt; 节点(虽然有 BLM 运动，但我不在乎)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubeadm init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --apiserver-advertise-address &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostname -i&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --pod-network-cidr&lt;&#x2F;span&gt;&lt;span&gt; 10.5.0.0&#x2F;16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt; start using your cluster, you need to run the following as a regular user:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chown $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -u&lt;&#x2F;span&gt;&lt;span&gt;):$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -g&lt;&#x2F;span&gt;&lt;span&gt;) $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.kube&#x2F;config
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;You&lt;&#x2F;span&gt;&lt;span&gt; should now deploy a pod network to the cluster.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Run &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kubectl apply -f [podnetwork].yaml&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; with one of the options listed at:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Then&lt;&#x2F;span&gt;&lt;span&gt; you can join any number of worker nodes by running the following on each as root:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubeadm&lt;&#x2F;span&gt;&lt;span&gt; join 192.168.0.38:6443&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --token&lt;&#x2F;span&gt;&lt;span&gt; xguam5.v5vgzeifjipno115 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --discovery-token-ca-cert-hash&lt;&#x2F;span&gt;&lt;span&gt; sha256:6ea81a284c1b7a5aeec9eb01c8856602f1f3e6f2edd5593816c27224bbccb960
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Waiting&lt;&#x2F;span&gt;&lt;span&gt; for api server to startup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Warning:&lt;&#x2F;span&gt;&lt;span&gt; kubectl apply should be used on resource created by either kubectl create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --save-config&lt;&#x2F;span&gt;&lt;span&gt; or kubectl apply
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemonset.apps&#x2F;kube-proxy&lt;&#x2F;span&gt;&lt;span&gt; configured
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;No&lt;&#x2F;span&gt;&lt;span&gt; resources found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后，从上述命令的输出中找到 &lt;code&gt;Worker&lt;&#x2F;code&gt; 节点加入 &lt;code&gt;Master&lt;&#x2F;code&gt; 节点的命令，在 &lt;code&gt;node[2-4]&lt;&#x2F;code&gt; 节点分别执行命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubeadm&lt;&#x2F;span&gt;&lt;span&gt; join 192.168.0.38:6443&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --token&lt;&#x2F;span&gt;&lt;span&gt; xguam5.v5vgzeifjipno115 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --discovery-token-ca-cert-hash&lt;&#x2F;span&gt;&lt;span&gt; sha256:6ea81a284c1b7a5aeec9eb01c8856602f1f3e6f2edd5593816c27224bbccb960
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;执行完成之后，&lt;code&gt;node[2-4]&lt;&#x2F;code&gt; 就成功加入了 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 集群中。在 &lt;code&gt;Master&lt;&#x2F;code&gt; 节点，即 &lt;code&gt;node-1&lt;&#x2F;code&gt; 上执行命令验证:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl get nodes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;    STATUS     ROLES    AGE   VERSION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node1&lt;&#x2F;span&gt;&lt;span&gt;   Ready      master   14m   v1.18.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node2&lt;&#x2F;span&gt;&lt;span&gt;   Ready      &amp;lt;none&amp;gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;m   v1.18.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node3&lt;&#x2F;span&gt;&lt;span&gt;   NotReady   &amp;lt;none&amp;gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;s   v1.18.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node4&lt;&#x2F;span&gt;&lt;span&gt;   NotReady   &amp;lt;none&amp;gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;s    v1.18.4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最后部署网络插件 &lt;code&gt;kube-router&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; kubectl apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;cloudnativelabs&#x2F;kube-router&#x2F;master&#x2F;daemonset&#x2F;kubeadm-kuberouter.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configmap&#x2F;kube-router-cfg&lt;&#x2F;span&gt;&lt;span&gt; unchanged
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daemonset.apps&#x2F;kube-router&lt;&#x2F;span&gt;&lt;span&gt; configured
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serviceaccount&#x2F;kube-router&lt;&#x2F;span&gt;&lt;span&gt; unchanged
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrole.rbac.authorization.k8s.io&#x2F;kube-router&lt;&#x2F;span&gt;&lt;span&gt; unchanged
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clusterrolebinding.rbac.authorization.k8s.io&#x2F;kube-router&lt;&#x2F;span&gt;&lt;span&gt; unchanged
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;部署完了，用去吧。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pod 的基本概念</title>
		<published>2020-09-02T21:06:17+00:00</published>
		<updated>2020-09-02T21:06:17+00:00</updated>
		<link href="https://blog.kiyoko.io/the-basics-of-pods/" type="text/html"/>
		<id>https://blog.kiyoko.io/the-basics-of-pods/</id>
		<content type="html">&lt;p&gt;前文提到，可以类比于虚拟机与应用程序之间的关系来理解 &lt;code&gt;Pod&lt;&#x2F;code&gt; 与 &lt;code&gt;Container&lt;&#x2F;code&gt; 之间的关系。这样就可以容易理解 &lt;strong&gt;凡是调度、网络、存储，以及安全相关的属性，基本都是 Pod 级别的&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;这些属性有一个共同点: 描述 &lt;strong&gt;机器&lt;&#x2F;strong&gt; 这个整体，而不是里面运行的 &lt;strong&gt;程序&lt;&#x2F;strong&gt;。比如:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;配置这个 &lt;strong&gt;机器&lt;&#x2F;strong&gt; 的网卡: &lt;code&gt;Pod&lt;&#x2F;code&gt; 的网络定义&lt;&#x2F;li&gt;
&lt;li&gt;配置这个 &lt;strong&gt;机器&lt;&#x2F;strong&gt; 的磁盘: &lt;code&gt;Pod&lt;&#x2F;code&gt; 的存储定义&lt;&#x2F;li&gt;
&lt;li&gt;配置这个 &lt;strong&gt;机器&lt;&#x2F;strong&gt; 的防火墙: &lt;code&gt;Pod&lt;&#x2F;code&gt; 的安全定义&lt;&#x2F;li&gt;
&lt;li&gt;这台 &lt;strong&gt;机器&lt;&#x2F;strong&gt; 运行在哪个服务器之上: &lt;code&gt;Pod&lt;&#x2F;code&gt; 的调度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;nodeselector&quot;&gt;NodeSelector&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;NodeSelector&lt;&#x2F;code&gt; 是一个供用户将 &lt;code&gt;Pod&lt;&#x2F;code&gt; 与 &lt;code&gt;Node&lt;&#x2F;code&gt; 进行绑定的字段，用法如下所示:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodeSelector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disktype&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ssd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样的一个配置，意味着这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 永远只能运行在携带了 &lt;code&gt;disktype: ssd&lt;&#x2F;code&gt; 标签 &lt;code&gt;(Label)&lt;&#x2F;code&gt; 的节点上。否则，将调度失败。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nodename&quot;&gt;NodeName&lt;&#x2F;h2&gt;
&lt;p&gt;当 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 将 &lt;code&gt;Pod&lt;&#x2F;code&gt; 调度到某个 &lt;code&gt;Node&lt;&#x2F;code&gt; 上之后，会自动设置 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;NodeName&lt;&#x2F;code&gt; 字段。即，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 会认为所有已被赋值 &lt;code&gt;NodeName&lt;&#x2F;code&gt; 字段的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 都是被调度过的。因此，通过用户也可以设置该字段来 &lt;strong&gt;骗过&lt;&#x2F;strong&gt; 调度器，比如在测试或者调试阶段。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hostaliases&quot;&gt;HostAliases&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;HostAliases&lt;&#x2F;code&gt; 定义 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;hosts&lt;&#x2F;code&gt; 文件 &lt;code&gt;(比如 &#x2F;etc&#x2F;hosts)&lt;&#x2F;code&gt; 里的内容。&lt;&#x2F;p&gt;
&lt;p&gt;比如，在这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;YAML&lt;&#x2F;code&gt; 文件中设置了一组 &lt;code&gt;IP&lt;&#x2F;code&gt; 和 &lt;code&gt;Hostname&lt;&#x2F;code&gt; 的数据。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostAliases&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10.1.2.3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostnames&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo.remote&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bar.remote&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 &lt;code&gt;Pod&lt;&#x2F;code&gt; 启动后，&lt;code&gt;&#x2F;etc&#x2F;hosts&lt;&#x2F;code&gt; 文件的内容将如下所示:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;hosts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Kubernetes-managed hosts file.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;127.0.0.1&lt;&#x2F;span&gt;&lt;span&gt; localhost
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10.244.135.10&lt;&#x2F;span&gt;&lt;span&gt; hostaliases-pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10.1.2.3&lt;&#x2F;span&gt;&lt;span&gt; foo.remote
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10.1.2.3&lt;&#x2F;span&gt;&lt;span&gt; bar.remote
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中，最下面两行记录，就是通过 &lt;code&gt;HostAliases&lt;&#x2F;code&gt; 字段写入的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;特别注意&lt;&#x2F;strong&gt;: 在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 中，强烈建议使用这种方式设置 hosts 文件里的内容。如果使用直接修改 &lt;code&gt;hosts&lt;&#x2F;code&gt; 文件的方式，在 &lt;code&gt;Pod&lt;&#x2F;code&gt; 被删除重建之后，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 会还原被修改的内容。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shareprocessnamespace&quot;&gt;ShareProcessNamespace&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;凡是跟容器的 &lt;code&gt;Linux Namespace&lt;&#x2F;code&gt; 相关的属性，也一定是 &lt;code&gt;Pod&lt;&#x2F;code&gt; 级别的&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;设计 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的初衷，就是要让里面的容器尽可能多地共享 &lt;code&gt;Linux Namespace&lt;&#x2F;code&gt;，仅保留必要的隔离和限制能力。这样，&lt;code&gt;Pod&lt;&#x2F;code&gt; 之于 &lt;code&gt;Container&lt;&#x2F;code&gt; 就会更近似于虚拟机之于程序。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shareProcessNamespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shell
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;busybox
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tty&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;shareProcessNamespace: true&lt;&#x2F;code&gt; 表示: &lt;code&gt;Pod&lt;&#x2F;code&gt; 里的 &lt;code&gt;Containers&lt;&#x2F;code&gt; 要共享 &lt;code&gt;PID Namespace&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gong-xiang-su-zhu-ji-de-namespace&quot;&gt;共享宿主机的 Namespace&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HostPID&lt;&#x2F;strong&gt; - 控制 Pod 中容器是否可以共享宿主上的进程 ID 空间。 注意，如果与 ptrace 相结合，这种授权可能被利用，导致向容器外的特权逃逸 (默认情况下 ptrace 是被禁止的)。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HostIPC&lt;&#x2F;strong&gt; - 控制 Pod 容器是否可共享宿主上的 IPC 名字空间。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HostNetwork&lt;&#x2F;strong&gt; - 控制是否 Pod 可以使用节点的网络名字空间。 此类授权将允许 Pod 访问本地回路 (loopback) 设备、在本地主机 (localhost) 上监听的服务、还可能用来监听同一节点上其他 Pod 的网络活动。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HostPorts&lt;&#x2F;strong&gt; -提供可以在宿主网络名字空间中可使用的端口范围列表。 该属性定义为一组 HostPortRange 对象的列表，每个对象中包含 min(含) 与 max(含) 值的设置。 默认不允许访问宿主端口。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;例如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostNetwork&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostIPC&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostPID&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shell
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;busybox
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tty&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;lifecycle&quot;&gt;Lifecycle&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Container Lifecycle Hooks&lt;&#x2F;code&gt;。顾名思义，是在容器状态发生变化时触发一系列 &lt;strong&gt;钩子&lt;&#x2F;strong&gt;。我们来看这样一个例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lifecycle-demo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lifecycle-demo-container
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lifecycle&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postStart&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo Hello from the postStart handler &amp;gt; &#x2F;usr&#x2F;share&#x2F;message&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preStop&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;sbin&#x2F;nginx&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;quit&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PostStart&lt;&#x2F;strong&gt;: 这个回调在创建容器之后立即执行。 但是，不能保证回调会在容器入口点 &lt;code&gt;(ENTRYPOINT)&lt;&#x2F;code&gt; 之前执行。没有参数传递给处理程序。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PreStop&lt;&#x2F;strong&gt;: 在容器因 API 请求或者管理事件 &lt;strong&gt;(诸如存活态探针失败、资源抢占、资源竞争等)&lt;&#x2F;strong&gt; 而被终止之前，此回调会被调用。如果容器已经处于终止或者完成状态，则对 preStop 回调的调用将失败。此调用是阻塞的，也是同步调用，因此必须在删除容器的调用之前完成。没有参数传递给处理程序。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 只有在 &lt;code&gt;Pod&lt;&#x2F;code&gt; 结束 &lt;strong&gt;(Terminated)&lt;&#x2F;strong&gt; 的时候才会发送 preStop 事件，这意味着在 Pod 完成 &lt;strong&gt;(Completed)&lt;&#x2F;strong&gt; 时 preStop 的事件处理逻辑不会被触发。这个限制在 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes&#x2F;issues&#x2F;55807&quot;&gt;issue #55087&lt;&#x2F;a&gt; 中被追踪。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;有关终止行为的更详细描述，请参见 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;zh&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;pod-lifecycle&#x2F;#termination-of-pods&quot;&gt;终止 Pod&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;status&quot;&gt;Status&lt;&#x2F;h2&gt;
&lt;p&gt;Pending。Pod 已被 Kubernetes 系统接受 &lt;strong&gt;(YAML 文件已经提交给了 Kubernetes)&lt;&#x2F;strong&gt;，但有一个或者多个容器尚未创建亦未运行。此阶段包括等待 Pod 被调度的时间和通过网络下载镜像的时间，&lt;&#x2F;p&gt;
&lt;p&gt;Running。Pod 已经绑定到了某个节点，Pod 中所有的容器都已被创建。至少有一个容器仍在运行，或者正处于启动或重启状态。&lt;&#x2F;p&gt;
&lt;p&gt;Succeeded。Pod 中的所有容器都已成功终止，并且不会再重启。这种情况在运行一次性任务时最为常见。&lt;&#x2F;p&gt;
&lt;p&gt;Failed。Pod 中的所有容器都已终止，并且至少有一个容器是因为失败终止。也就是说，容器以非 &lt;code&gt;0&lt;&#x2F;code&gt; 状态退出或者被系统终止。这个状态的出现，意味着你得想办法 Debug 这个容器的应用，比如查看 Pod 的 Events 和日志。&lt;&#x2F;p&gt;
&lt;p&gt;Unknown。这是一个异常状态，意味着 Pod 的状态不能持续地被 kubelet 汇报给 kube-apiserver，这很有可能是主从节点(Master 和 Kubelet)间的通信出现了问题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;zh&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;share-process-namespace&#x2F;&quot;&gt;在 Pod 中的容器之间共享进程命名空间&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;share-process-namespace&#x2F;&quot;&gt;Share Process Namespace between Containers in a Pod&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;zh&#x2F;docs&#x2F;concepts&#x2F;policy&#x2F;pod-security-policy&#x2F;&quot;&gt;Pod 安全策略&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;policy&#x2F;pod-security-policy&#x2F;&quot;&gt;Pod Security Policies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;zh&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;pod-lifecycle&#x2F;&quot;&gt;Pod 的生命周期&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;pod-lifecycle&#x2F;&quot;&gt;Pod Lifecycle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;zh&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;attach-handler-lifecycle-event&#x2F;&quot;&gt;为容器的生命周期事件设置处理函数&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;zh&#x2F;docs&#x2F;concepts&#x2F;containers&#x2F;container-lifecycle-hooks&#x2F;&quot;&gt;容器生命周期回调&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pod 的意义</title>
		<published>2020-08-31T16:34:52+00:00</published>
		<updated>2020-08-31T16:34:52+00:00</updated>
		<link href="https://blog.kiyoko.io/why-do-we-need-pods/" type="text/html"/>
		<id>https://blog.kiyoko.io/why-do-we-need-pods/</id>
		<content type="html">&lt;h2 id=&quot;rong-qi-de-ju-xian-xing&quot;&gt;容器的局限性&lt;&#x2F;h2&gt;
&lt;p&gt;既然要讨论 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的意义，或许可以想象一个如果没有 &lt;code&gt;Pod&lt;&#x2F;code&gt; 会是什么样子。&lt;&#x2F;p&gt;
&lt;p&gt;假设，有如下需求: 使用容器化来部署一个支持自动更新数据的文件服务。可以使用如下方法解决:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在一个容器中，同时运行两个进程，一个进程提供文件服务，一个进程定时更新数据。
&lt;ul&gt;
&lt;li&gt;优点:
&lt;ol&gt;
&lt;li&gt;无论是编码，还是部署都十分的容易，就像在物理机或者虚拟机里面一样&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;缺点:
&lt;ol&gt;
&lt;li&gt;容器的本质是进程，对操作系统而言是那个由 &lt;code&gt;entrypoint&lt;&#x2F;code&gt; 指定的进程，其他进程都是其子进程，或子进程的子进程等。而且，&lt;code&gt;entrypoint&lt;&#x2F;code&gt; 没有回收僵尸进程的能力。&lt;&#x2F;li&gt;
&lt;li&gt;耦合严重&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;每个进程分别位于各自的容器，两个容器之间通过挂载相同的外部 &lt;code&gt;volume&lt;&#x2F;code&gt; 实现容器间共享文件系统。
&lt;ul&gt;
&lt;li&gt;优点:
&lt;ol&gt;
&lt;li&gt;将两个容器解耦，保证功能单一性&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;缺点:
&lt;ol&gt;
&lt;li&gt;通过共享外部 &lt;code&gt;volume&lt;&#x2F;code&gt; 的方式无法保证数据安全性，其他容器，或宿主机也能直接访问 &lt;code&gt;volume&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;在上一个方法的基础上，通过 &lt;code&gt;--volume-from&lt;&#x2F;code&gt; 指定从其他的 &lt;code&gt;container&lt;&#x2F;code&gt; 挂载 &lt;code&gt;volume&lt;&#x2F;code&gt;。
&lt;ul&gt;
&lt;li&gt;优点:
&lt;ol&gt;
&lt;li&gt;避免对外直接暴露 &lt;code&gt;volume&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;到此为止，一切似乎很顺利，没有在创建 &lt;code&gt;Pod&lt;&#x2F;code&gt; 这样一个新的概念。&lt;&#x2F;p&gt;
&lt;p&gt;但上述方案有一个局限性，&lt;code&gt;--volume-from&lt;&#x2F;code&gt; 的目标容器只能是本地的其他 &lt;code&gt;container&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;假设，使用 &lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 部署服务。为了便于叙述，做出如下定义:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;集群中存在两个节点。&lt;strong&gt;&lt;code&gt;node-0&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; 剩余 &lt;code&gt;2G&lt;&#x2F;code&gt; 内存，&lt;strong&gt;&lt;code&gt;node-1&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; 剩余 &lt;code&gt;1.5G&lt;&#x2F;code&gt; 内存&lt;&#x2F;li&gt;
&lt;li&gt;两个容器 &lt;code&gt;container-0&lt;&#x2F;code&gt; 与 &lt;code&gt;container-1&lt;&#x2F;code&gt; 各需要 &lt;code&gt;1G&lt;&#x2F;code&gt; 内存&lt;&#x2F;li&gt;
&lt;li&gt;部署过程，先启动 &lt;code&gt;container-0&lt;&#x2F;code&gt;，后启动 &lt;code&gt;container-1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;因此，为了让两个容器能够运行在同一个 &lt;code&gt;Node&lt;&#x2F;code&gt; 上，需要在启动 &lt;code&gt;container-1&lt;&#x2F;code&gt; 时增加限制 &lt;code&gt;affinity=container-0&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;此时，如果 &lt;code&gt;container-0&lt;&#x2F;code&gt; 被调度到了 &lt;code&gt;node-1&lt;&#x2F;code&gt; 上，&lt;code&gt;node-1&lt;&#x2F;code&gt; 将剩余 &lt;code&gt;0.5G&lt;&#x2F;code&gt; 内存。接下来，调度 &lt;code&gt;container-1&lt;&#x2F;code&gt; 时，&lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 就会发现无法找到一个合适的 &lt;code&gt;Node&lt;&#x2F;code&gt; 来启动 &lt;code&gt;container-1&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;以上问题被称作 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Gang_scheduling&quot;&gt;Gang Scheduling&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;Kuberntes&lt;&#x2F;code&gt; 则通过 &lt;code&gt;Pod&lt;&#x2F;code&gt; 解决了这个问题。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Pod&lt;&#x2F;code&gt; 是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 中最小的可调度计算单元。在处理上述问题中，如果将 &lt;code&gt;container-0&lt;&#x2F;code&gt; 与 &lt;code&gt;container-1&lt;&#x2F;code&gt; 同时包含在一个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 中，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 在调度这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 时就只会考虑剩余内存不小于 &lt;code&gt;2G&lt;&#x2F;code&gt; 的 &lt;code&gt;node-0&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;对于上面这种，相互之间直接访问文件系统、使用 &lt;code&gt;localhost&lt;&#x2F;code&gt; 或 &lt;code&gt;socket&lt;&#x2F;code&gt; 文件进行本地通信，共享某些 &lt;code&gt;Namespace&lt;&#x2F;code&gt; 的一组容器，称之为 &lt;strong&gt;超亲密关系&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pod-shi-xian-yuan-li&quot;&gt;Pod 实现原理&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Pod&lt;&#x2F;code&gt; 是一个逻辑概念。其本质是一组共享了 &lt;code&gt;Network Namespace&lt;&#x2F;code&gt;，并且可以声明共享同一个 &lt;code&gt;Volume&lt;&#x2F;code&gt; 的容器。&lt;&#x2F;p&gt;
&lt;p&gt;比如，一个包含了 &lt;code&gt;A&lt;&#x2F;code&gt; 与 &lt;code&gt;B&lt;&#x2F;code&gt; 两个容器的 &lt;code&gt;Pod&lt;&#x2F;code&gt;，按照 &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;#what-is-a-pod&quot;&gt;定义&lt;&#x2F;a&gt; 的描述，可以使用如下 &lt;code&gt;Docker&lt;&#x2F;code&gt; 命令模拟:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# start container A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --net&lt;&#x2F;span&gt;&lt;span&gt;=B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --volumes-from&lt;&#x2F;span&gt;&lt;span&gt;=B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --name&lt;&#x2F;span&gt;&lt;span&gt;=A image-A ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但此时会发现，&lt;code&gt;Pod&lt;&#x2F;code&gt; 内的一组容器要遵循某个特定的顺序启动，容器与容器之间不再是对等关系，而是拓扑关系。&lt;&#x2F;p&gt;
&lt;p&gt;所以，在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目里，通过增加一个被称作 &lt;code&gt;Infra&lt;&#x2F;code&gt; 的容器作为 &lt;code&gt;Pod&lt;&#x2F;code&gt; 里第一个启动的容器。用户定义的其他容器通过 &lt;code&gt;Join Network Namespace&lt;&#x2F;code&gt; 的方式，关联到 &lt;code&gt;Infra&lt;&#x2F;code&gt; 容器。这样的组织关系，可以用下面这样一个示意图来表达:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;why-do-we-need-pods&#x2F;01.png&quot; alt=&quot;pause container&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如上图所示，这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 里有两个用户容器 &lt;code&gt;A&lt;&#x2F;code&gt; 和 &lt;code&gt;B&lt;&#x2F;code&gt;，还有一个 &lt;code&gt;Infra&lt;&#x2F;code&gt; 容器。这个特殊容器的镜像地址为 &lt;code&gt;k8s.gcr.io&#x2F;pause&lt;&#x2F;code&gt;，源代码位于 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes&#x2F;blob&#x2F;master&#x2F;build&#x2F;pause&#x2F;pause.c&quot;&gt;github&lt;&#x2F;a&gt;。同时，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 提供参数 &lt;code&gt;--pod-infra-container-image&lt;&#x2F;code&gt; 支持自定义镜像。&lt;&#x2F;p&gt;
&lt;p&gt;所以，当容器 &lt;code&gt;A&lt;&#x2F;code&gt;、&lt;code&gt;B&lt;&#x2F;code&gt; 加入到 &lt;code&gt;Infra&lt;&#x2F;code&gt; 容器的 &lt;code&gt;Network Namespace&lt;&#x2F;code&gt; 后，对于容器 &lt;code&gt;A&lt;&#x2F;code&gt;、&lt;code&gt;B&lt;&#x2F;code&gt; 而言:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;可以直接使用 &lt;code&gt;localhost&lt;&#x2F;code&gt; 进行通信&lt;&#x2F;li&gt;
&lt;li&gt;看到的网络设备跟 &lt;code&gt;Infra&lt;&#x2F;code&gt; 容器看到的完全一样&lt;&#x2F;li&gt;
&lt;li&gt;一个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 只有一个 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址，也就是这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;Network Namespace&lt;&#x2F;code&gt; 对应的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址&lt;&#x2F;li&gt;
&lt;li&gt;其他的所有网络资源，都是一个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 一份，并且被该 &lt;code&gt;Pod&lt;&#x2F;code&gt; 中的所有容器共享&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Pod&lt;&#x2F;code&gt; 的生命周期只跟 &lt;code&gt;Infra&lt;&#x2F;code&gt; 容器一致，而与容器 &lt;code&gt;A&lt;&#x2F;code&gt;、&lt;code&gt;B&lt;&#x2F;code&gt; 无关。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;而对于同一个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 里面的所有用户容器来说，它们的进出流量，也可以认为都是通过 &lt;code&gt;Infra&lt;&#x2F;code&gt; 容器完成的。这一点很重要，因此为 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 开发网络插件时，应该重点考虑的是如何配置这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;Network Namespace&lt;&#x2F;code&gt;，而不是每一个用户容器如何使用网络配置。&lt;&#x2F;p&gt;
&lt;p&gt;而且，在这这个设计模型之下，可以方便的共享 &lt;code&gt;volume&lt;&#x2F;code&gt;: &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目只要把所有 &lt;code&gt;volume&lt;&#x2F;code&gt; 的定义都设计在 &lt;code&gt;Pod&lt;&#x2F;code&gt; 层级即可。之后，&lt;code&gt;Pod&lt;&#x2F;code&gt; 内的容器再声明挂载这个 &lt;code&gt;volume&lt;&#x2F;code&gt; 从而达到共享 &lt;code&gt;volume&lt;&#x2F;code&gt; 的目的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;two-containers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restartPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Never
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shared-data
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hostPath&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;data
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-container
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shared-data
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;debian-container
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;debian
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shared-data
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pod-data
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo Hello from the debian container &amp;gt; &#x2F;pod-data&#x2F;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rong-qi-she-ji-mo-shi&quot;&gt;容器设计模式&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Pod&lt;&#x2F;code&gt; 这种 &lt;strong&gt;超亲密关系&lt;&#x2F;strong&gt; 容器的设计思想，实际上就是希望，当用户想在一个容器里运行多个功能并不相关的应用时，应该优先考虑它们是不是更应该被描述成一个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 里的多个容器。&lt;&#x2F;p&gt;
&lt;p&gt;要理解这个概念，也很容易。只需要将 &lt;code&gt;Pod&lt;&#x2F;code&gt; 理解为原来的虚拟机即可。&lt;&#x2F;p&gt;
&lt;p&gt;在虚拟机时代，服务之间也存在一定的关系。有上述那样需要共享本地文件系统的关系，也有 &lt;code&gt;API Service&lt;&#x2F;code&gt; 与 &lt;code&gt;DB&lt;&#x2F;code&gt; 之间的关系。&lt;&#x2F;p&gt;
&lt;p&gt;当需要考虑是否需要将多个容器描述成一个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 时，可以想象一下: 如果使用虚拟机部署，是否应该将这些服务部署在同一台虚拟机上。如果需要部署在一台虚拟机才能工作，那么就需要描述为一个 &lt;code&gt;Pod&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-wen-dang&quot;&gt;参考文档&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;&quot;&gt;Kuberntes Documentation: Pod&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1513369&quot;&gt;为什么说容器是单进程模型&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;forums.docker.com&#x2F;t&#x2F;use-affinity-filter-in-docker-service-create&#x2F;78402&quot;&gt;Use “affinity filter” in “docker service create”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ianlewis.org&#x2F;en&#x2F;almighty-pause-container&quot;&gt;The Almighty Pause Container&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developers.redhat.com&#x2F;blog&#x2F;2019&#x2F;01&#x2F;15&#x2F;podman-managing-containers-pods&#x2F;&quot;&gt;Podman: Managing pods and containers in a local container runtime&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.usenix.org&#x2F;system&#x2F;files&#x2F;conference&#x2F;hotcloud16&#x2F;hotcloud16_burns.pdf&quot;&gt;Design patterns for container-based distributed systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>容器编排与 Kubernetes</title>
		<published>2020-08-24T20:58:07+00:00</published>
		<updated>2020-08-24T20:58:07+00:00</updated>
		<link href="https://blog.kiyoko.io/container-orchestration-and-kubernetes/" type="text/html"/>
		<id>https://blog.kiyoko.io/container-orchestration-and-kubernetes/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt; 容器依托于 &lt;code&gt;Linux Namespace&lt;&#x2F;code&gt;、&lt;code&gt;Cgroup&lt;&#x2F;code&gt;、&lt;code&gt;rootfs&lt;&#x2F;code&gt; 三方面，在宿主机之上为用户构建出互相隔离的进程运行环境。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rootfs&lt;&#x2F;code&gt; 作为容器镜像，是静态视图；&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Namespace&lt;&#x2F;code&gt; + &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 提供运行时隔离环境，是动态视图。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;显而易见，对于开发者而言，他们更关注于容器镜像。容器镜像，可以看做是以前的应用程序，它由开发者负责构建，并在开发、测试、发布等各个环节之间作为最核心的组件。&lt;&#x2F;p&gt;
&lt;p&gt;在这种前提之下，云服务提供商的职责就从原来的 &lt;strong&gt;将用户提交的应用在虚拟机上运行起来&lt;&#x2F;strong&gt;，转变为 &lt;strong&gt;将用户提交的镜像以容器的方式运行起来&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;因此，整个生态必将以容器镜像为核心连接点，在生态链路的各个节点，如 &lt;code&gt;CI&#x2F;CD&lt;&#x2F;code&gt;、监控、安全、网络、存储等，都需要转变为以容器镜像为根本。这将是一次云服务平台的结构化升级。&lt;&#x2F;p&gt;
&lt;p&gt;容器从一个开发者手里的小工具，一跃成为了云计算领域的绝对主角；而能够定义容器组织和管理规范的 &lt;strong&gt;容器编排&lt;&#x2F;strong&gt; 技术，则当仁不让地坐上了容器技术领域的 &lt;strong&gt;头把交椅&lt;&#x2F;strong&gt;。这其中，其中翘楚当属 &lt;code&gt;Docker&lt;&#x2F;code&gt; 公司的 &lt;code&gt;Compose+Swarm&lt;&#x2F;code&gt; 组合，以及 &lt;code&gt;Google&lt;&#x2F;code&gt; 与 &lt;code&gt;RedHat&lt;&#x2F;code&gt; 公司共同主导的 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目脱胎于 &lt;code&gt;Google&lt;&#x2F;code&gt; 的核心系统 &lt;code&gt;Borg&lt;&#x2F;code&gt;，在项目初期有有着很强的技术理论指导。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Borg&lt;&#x2F;code&gt; 系统，一直以来都被誉为 &lt;code&gt;Google&lt;&#x2F;code&gt; 公司内部最强大的 &lt;strong&gt;秘密武器&lt;&#x2F;strong&gt;。虽然略显夸张，但这个说法倒不算是吹牛。因为，相比于 &lt;code&gt;Spanner&lt;&#x2F;code&gt;、&lt;code&gt;BigTable&lt;&#x2F;code&gt; 等相对上层的项目，&lt;code&gt;Borg&lt;&#x2F;code&gt; 要承担的责任，是承载 &lt;code&gt;Google&lt;&#x2F;code&gt; 公司整个基础设施的核心依赖。在 &lt;code&gt;Google&lt;&#x2F;code&gt; 公司已经公开发表的基础设施体系论文中，&lt;code&gt;Borg&lt;&#x2F;code&gt; 项目当仁不让地位居整个基础设施技术栈的最底层。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;container-orchestration-and-kubernetes&#x2F;google-stack.png&quot; alt=&quot;google-stack&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上图，来自于 &lt;code&gt;Google Omega&lt;&#x2F;code&gt; 论文的第一作者的博士毕业论文。它描绘了当时 &lt;code&gt;Google&lt;&#x2F;code&gt; 已经公开发表的整个基础设施栈。在这个图里，你既可以找到 &lt;code&gt;MapReduce&lt;&#x2F;code&gt;、&lt;code&gt;BigTable&lt;&#x2F;code&gt; 等知名项目，也能看到 &lt;code&gt;Borg&lt;&#x2F;code&gt; 和它的继任者 &lt;code&gt;Omega&lt;&#x2F;code&gt; 位于整个技术栈的最底层。&lt;&#x2F;p&gt;
&lt;p&gt;正是由于这样的定位，&lt;code&gt;Borg&lt;&#x2F;code&gt; 可以说是 &lt;code&gt;Google&lt;&#x2F;code&gt; 最不可能开源的一个项目。而幸运的是，得益于 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目和容器技术的风靡，它终于得以以另一种方式与开源社区见面，这个方式就是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目。&lt;&#x2F;p&gt;
&lt;p&gt;所以，相比于 &lt;strong&gt;小打小闹&lt;&#x2F;strong&gt; 的 &lt;code&gt;Docker&lt;&#x2F;code&gt; 公司、&lt;strong&gt;旧瓶装新酒&lt;&#x2F;strong&gt; 的 &lt;code&gt;Mesos&lt;&#x2F;code&gt; 社区，&lt;strong&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目从一开始就比较幸运地站上了一个他人难以企及的高度&lt;&#x2F;strong&gt;: 在它的成长阶段，这个项目每一个核心特性的提出，几乎都脱胎于 &lt;code&gt;Borg&#x2F;Omega&lt;&#x2F;code&gt; 系统的设计与经验。更重要的是，这些特性在开源社区落地的过程中，又在整个社区的合力之下得到了极大的改进，修复了很多当年遗留在 &lt;code&gt;Borg&lt;&#x2F;code&gt; 体系中的缺陷和问题。&lt;&#x2F;p&gt;
&lt;p&gt;所以，尽管在发布之初被批评是 &lt;strong&gt;曲高和寡&lt;&#x2F;strong&gt;，但是在逐渐觉察到 &lt;code&gt;Docker&lt;&#x2F;code&gt; 技术栈的 &lt;strong&gt;稚嫩&lt;&#x2F;strong&gt; 和 &lt;code&gt;Mesos&lt;&#x2F;code&gt; 社区的 &lt;strong&gt;老迈&lt;&#x2F;strong&gt; 之后，这个社区很快就明白了: &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目在 &lt;code&gt;Borg&lt;&#x2F;code&gt; 体系的指导下，体现出了一种独有的 &lt;strong&gt;先进性&lt;&#x2F;strong&gt; 与 &lt;strong&gt;完备性&lt;&#x2F;strong&gt;，而这些特质才是一个基础设施领域开源项目赖以生存的核心价值。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kubernetes-jie-jue-liao-shi-yao-wen-ti&quot;&gt;Kubernetes 解决了什么问题&lt;&#x2F;h2&gt;
&lt;p&gt;在说明 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 解决了什么问题之前，先来讨论一下，用户期望 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 有什么样的功能。&lt;&#x2F;p&gt;
&lt;p&gt;对于大多数用户来说，他们希望 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目带来的体验是确定的: 现在我有了应用的容器镜像，请帮我在一个给定的集群上把这个应用运行起来。&lt;&#x2F;p&gt;
&lt;p&gt;更进一步地说，还希望 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 能给我提供路由 &lt;strong&gt;网关&lt;&#x2F;strong&gt;、&lt;strong&gt;水平扩展&lt;&#x2F;strong&gt;、&lt;strong&gt;监控&lt;&#x2F;strong&gt;、&lt;strong&gt;备份&lt;&#x2F;strong&gt;、&lt;strong&gt;灾难恢复&lt;&#x2F;strong&gt; 等一系列运维能力。&lt;&#x2F;p&gt;
&lt;p&gt;解决发现，这就是对于 &lt;code&gt;PaaS(Cloud Foundry)&lt;&#x2F;code&gt; 同等的诉求。&lt;&#x2F;p&gt;
&lt;p&gt;但是，这些功能完全可以通过 &lt;code&gt;Docker&lt;&#x2F;code&gt; 及其生态圈 &lt;code&gt;Docker Compose&lt;&#x2F;code&gt; + &lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 自行实现，完全不知道实现一个 &lt;strong&gt;百万行代码量级&lt;&#x2F;strong&gt; 的 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所以说，如果 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目只是停留在拉取用户镜像、运行容器，以及提供常见的运维功能的话，那么别说跟 &lt;strong&gt;原生&lt;&#x2F;strong&gt; 的 &lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 项目竞争了，哪怕跟经典的 &lt;code&gt;PaaS&lt;&#x2F;code&gt; 项目相比也难有什么优势可言。&lt;&#x2F;p&gt;
&lt;p&gt;而实际上，在定义核心功能的过程中，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目是站在巨人 &lt;code&gt;Borg&lt;&#x2F;code&gt; 项目的肩膀之上，凭借 &lt;code&gt;Borg&lt;&#x2F;code&gt; 超前的理论优势，在短短几个月内迅速站稳了脚跟，进而确定了一个如下图所示的全局架构:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;container-orchestration-and-kubernetes&#x2F;k8s-architecture.png&quot; alt=&quot;k8s-architecture&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目的架构与原型项目 &lt;code&gt;Borg&lt;&#x2F;code&gt; 非常类似，都由 &lt;code&gt;Master&lt;&#x2F;code&gt; 和 &lt;code&gt;Node&lt;&#x2F;code&gt; 两种节点组成，分别用作控制节点和计算节点。&lt;&#x2F;p&gt;
&lt;p&gt;其中，控制节点，即 &lt;code&gt;Master&lt;&#x2F;code&gt; 节点，由 &lt;strong&gt;三个&lt;&#x2F;strong&gt; 紧密协作的独立组件组合而成，它们分别是&lt;strong&gt;负责 &lt;code&gt;API&lt;&#x2F;code&gt; 服务的 &lt;code&gt;kube-apiserver&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;、&lt;strong&gt;负责调度的 &lt;code&gt;kube-scheduler&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;，以及 &lt;strong&gt;负责容器编排的 &lt;code&gt;kube-controller-manager&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;。整个集群的持久化数据，由 &lt;code&gt;kube-apiserver&lt;&#x2F;code&gt; 处理后保存在 &lt;code&gt;ETCD&lt;&#x2F;code&gt; 中。&lt;&#x2F;p&gt;
&lt;p&gt;而计算节点上最核心的部分，则是一个叫作 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 的组件。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 主要负责同容器运行时(比如 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目)打交道。而这个交互所依赖的，是一个称作 &lt;code&gt;CRI(Container Runtime Interface)&lt;&#x2F;code&gt; 的远程调用接口，这个接口定义了容器运行时的各项核心操作，比如: 启动一个容器需要的所有参数。&lt;&#x2F;p&gt;
&lt;p&gt;这也是为何，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目并不关心你部署的是什么容器运行时、使用的什么技术实现，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 &lt;code&gt;CRI&lt;&#x2F;code&gt; 接入到 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目当中。&lt;&#x2F;p&gt;
&lt;p&gt;而具体的容器运行时，比如 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目，则一般通过 &lt;code&gt;OCI&lt;&#x2F;code&gt; 这个容器运行时规范同底层的 &lt;code&gt;Linux&lt;&#x2F;code&gt; 操作系统进行交互，即: 把 &lt;code&gt;CRI&lt;&#x2F;code&gt; 请求翻译成对 &lt;code&gt;Linux&lt;&#x2F;code&gt; 操作系统的调用(操作 &lt;code&gt;Linux Namespace&lt;&#x2F;code&gt; 和 &lt;code&gt;Cgroups&lt;&#x2F;code&gt; 等)。&lt;&#x2F;p&gt;
&lt;p&gt;此外，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 还通过 &lt;code&gt;gRPC&lt;&#x2F;code&gt; 协议同一个叫作 &lt;code&gt;Device Plugin&lt;&#x2F;code&gt; 的插件进行交互。这个插件，是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目用来管理 &lt;code&gt;GPU&lt;&#x2F;code&gt; 等宿主机物理设备的主要组件，也是基于 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目进行机器学习训练、高性能作业支持等工作必须关注的功能。&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。这两个插件与 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 进行交互的接口，分别是 &lt;code&gt;CNI(Container Networking Interface)&lt;&#x2F;code&gt;和 &lt;code&gt;CSI(Container Storage Interface)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;实际上，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 这个奇怪的名字，来自于 &lt;code&gt;Borg&lt;&#x2F;code&gt; 项目里的同源组件 &lt;code&gt;Borglet&lt;&#x2F;code&gt;。不过，如果你浏览过 &lt;code&gt;Borg&lt;&#x2F;code&gt; 论文的话，就会发现，这个命名方式可能是 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 组件与 &lt;code&gt;Borglet&lt;&#x2F;code&gt; 组件的唯一相似之处。因为 &lt;code&gt;Borg&lt;&#x2F;code&gt; 项目，并不支持我们这里所讲的容器技术，而只是简单地使用了 &lt;code&gt;Linux Cgroups&lt;&#x2F;code&gt; 对进程进行限制。&lt;&#x2F;p&gt;
&lt;p&gt;这就意味着，像 &lt;code&gt;Docker&lt;&#x2F;code&gt; 这样的“容器镜像”在 &lt;code&gt;Borg&lt;&#x2F;code&gt; 中是不存在的，&lt;code&gt;Borglet&lt;&#x2F;code&gt; 组件也自然不需要像 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 这样考虑如何同 &lt;code&gt;Docker&lt;&#x2F;code&gt; 进行交互、如何对容器镜像进行管理的问题，也不需要支持 &lt;code&gt;CRI&lt;&#x2F;code&gt;、&lt;code&gt;CNI&lt;&#x2F;code&gt;、&lt;code&gt;CSI&lt;&#x2F;code&gt; 等诸多容器技术接口。&lt;&#x2F;p&gt;
&lt;p&gt;可以说，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 完全就是为了实现 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目对容器的管理能力而重新实现的一个组件，与 &lt;code&gt;Borg&lt;&#x2F;code&gt; 之间并没有直接的传承关系。&lt;&#x2F;p&gt;
&lt;p&gt;那么，&lt;code&gt;Borg&lt;&#x2F;code&gt; 对于 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目的指导作用又体现在哪里呢？&lt;&#x2F;p&gt;
&lt;p&gt;答案是，&lt;code&gt;Master&lt;&#x2F;code&gt; 节点。&lt;&#x2F;p&gt;
&lt;p&gt;虽然在 &lt;code&gt;Master&lt;&#x2F;code&gt; 节点的实现细节上 &lt;code&gt;Borg&lt;&#x2F;code&gt; 项目与 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目不尽相同，但它们的出发点却高度一致，即: &lt;strong&gt;如何编排、管理、调度用户提交的作业&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;所以，&lt;code&gt;Borg&lt;&#x2F;code&gt; 项目完全可以把 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像看作一种新的应用打包方式。这样，&lt;code&gt;Borg&lt;&#x2F;code&gt; 团队过去在大规模作业管理与编排上的经验就可以直接 &lt;strong&gt;套&lt;&#x2F;strong&gt; 在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目上了。&lt;&#x2F;p&gt;
&lt;p&gt;这些经验最主要的表现就是，从一开始，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目就没有像同时期的各种 &lt;strong&gt;容器云&lt;&#x2F;strong&gt; 项目那样，把 &lt;code&gt;Docker&lt;&#x2F;code&gt; 作为整个架构的核心，而仅仅把它作为最底层的一个容器运行时实现。&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目要着重解决的问题，则来自于 &lt;code&gt;Borg&lt;&#x2F;code&gt; 的研究人员在论文中提到的一个非常重要的观点:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;运行在大规模集群中的各种任务之间，实际上存在着各种各样的关系。这些关系的处理，才是作业编排和管理系统最困难的地方。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;事实也正是如此。&lt;&#x2F;p&gt;
&lt;p&gt;其实，这种任务与任务之间的关系，在我们平常的各种技术场景中随处可见。比如，一个 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用与数据库之间的访问关系，一个负载均衡器和它的后端服务之间的代理关系，一个门户应用与授权组件之间的调用关系。&lt;&#x2F;p&gt;
&lt;p&gt;更进一步地说，同属于一个服务单位的不同功能之间，也完全可能存在这样的关系。比如，一个 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用与日志搜集组件之间的文件交换关系。&lt;&#x2F;p&gt;
&lt;p&gt;而在容器技术普及之前，传统虚拟机环境对这种关系的处理方法都是比较“粗粒度”的。你会经常发现很多功能并不相关的应用被一股脑儿地部署在同一台虚拟机中，只是因为它们之间偶尔会互相发起几个 &lt;code&gt;HTTP&lt;&#x2F;code&gt; 请求。&lt;&#x2F;p&gt;
&lt;p&gt;更常见的情况则是，一个应用被部署在虚拟机里之后，你还得手动维护很多跟它协作的守护进程 &lt;code&gt;(Daemon)&lt;&#x2F;code&gt;，用来处理它的日志搜集、灾难恢复、数据备份等辅助工作。&lt;&#x2F;p&gt;
&lt;p&gt;但容器技术出现以后，你就不难发现，在 &lt;strong&gt;功能单位&lt;&#x2F;strong&gt; 的划分上，容器有着独一无二的 &lt;strong&gt;细粒度&lt;&#x2F;strong&gt; 优势: 毕竟容器的本质，只是一个进程而已。&lt;&#x2F;p&gt;
&lt;p&gt;也就是说，只要你愿意，那些原先拥挤在同一个虚拟机里的各个应用、组件、守护进程，都可以被分别做成镜像，然后运行在一个个专属的容器中。它们之间互不干涉，拥有各自的资源配额，可以被调度在整个集群里的任何一台机器上。而这，正是一个 &lt;code&gt;PaaS&lt;&#x2F;code&gt; 系统最理想的工作状态，也是所谓“微服务”思想得以落地的先决条件。&lt;&#x2F;p&gt;
&lt;p&gt;当然，如果只做到 &lt;strong&gt;封装微服务、调度单容器&lt;&#x2F;strong&gt; 这一层次，&lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 项目就已经绰绰有余了。如果再加上 &lt;code&gt;Compose&lt;&#x2F;code&gt; 项目，你甚至还具备了处理一些简单依赖关系的能力，比如：一个 &lt;strong&gt;Web 容器&lt;&#x2F;strong&gt; 和它要访问的数据库 &lt;strong&gt;DB 容器&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;Compose&lt;&#x2F;code&gt; 项目中，你可以为这样的两个容器定义一个 &lt;code&gt;link&lt;&#x2F;code&gt;，而 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目则会负责维护这个 &lt;strong&gt;link&lt;&#x2F;strong&gt; 关系，其具体做法是: &lt;code&gt;Docker&lt;&#x2F;code&gt; 会在 &lt;code&gt;Web&lt;&#x2F;code&gt; 容器中，将 &lt;code&gt;DB&lt;&#x2F;code&gt; 容器的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址、端口等信息以环境变量的方式注入进去，供应用进程使用，比如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;conf&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-conf &quot;&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span&gt;DB_NAME=&#x2F;web&#x2F;db
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tcp:&#x2F;&#x2F;172.17.0.5:5432
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT_5432_TCP=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tcp:&#x2F;&#x2F;172.17.0.5:5432
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT_5432_TCP_PROTO=tcp
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT_5432_TCP_PORT=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5432
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT_5432_TCP_ADDR=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;172.17.0.5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而当 DB 容器发生变化时(比如，镜像更新，被迁移到其他宿主机上等等)，这些环境变量的值会由 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目自动更新。这就是平台项目自动地处理容器间关系的典型例子。&lt;&#x2F;p&gt;
&lt;p&gt;可是，如果我们现在的需求是，要求这个项目能够处理前面提到的所有类型的关系，甚至还要能够支持未来可能出现的更多种类的关系呢？&lt;&#x2F;p&gt;
&lt;p&gt;这时，&lt;code&gt;link&lt;&#x2F;code&gt; 这种单独针对一种案例设计的解决方案就太过简单了。如果你做过架构方面的工作，就会深有感触：一旦要追求项目的普适性，那就一定要从顶层开始做好设计。&lt;&#x2F;p&gt;
&lt;p&gt;所以，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目最主要的设计思想是，从更宏观的角度，以统一的方式来定义任务之间的各种关系，并且为将来支持更多种类的关系留有余地。&lt;&#x2F;p&gt;
&lt;p&gt;比如，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目对容器间的 &lt;strong&gt;访问&lt;&#x2F;strong&gt; 进行了分类，首先总结出了一类非常常见的“紧密交互”的关系，即：这些应用之间需要非常频繁的交互和访问；又或者，它们会直接通过本地文件进行信息交换。&lt;&#x2F;p&gt;
&lt;p&gt;在常规环境下，这些应用往往会被直接部署在同一台机器上，通过 &lt;code&gt;Localhost&lt;&#x2F;code&gt; 通信，通过本地磁盘目录交换文件。而在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中，这些容器则会被划分为一个 &lt;strong&gt;Pod&lt;&#x2F;strong&gt;，&lt;code&gt;Pod&lt;&#x2F;code&gt; 里的容器共享同一个 &lt;code&gt;Network Namespace&lt;&#x2F;code&gt;、同一组数据卷，从而达到高效率交换信息的目的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Pod&lt;&#x2F;code&gt; 是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中最基础的一个对象，源自于 &lt;code&gt;Google Borg&lt;&#x2F;code&gt; 论文中一个名叫 &lt;code&gt;Alloc&lt;&#x2F;code&gt; 的设计。在后续的章节中，我们会对 &lt;code&gt;Pod&lt;&#x2F;code&gt; 做更进一步地阐述。&lt;&#x2F;p&gt;
&lt;p&gt;而对于另外一种更为常见的需求，比如 &lt;strong&gt;Web 应用&lt;&#x2F;strong&gt; 与 &lt;strong&gt;数据库&lt;&#x2F;strong&gt; 之间的访问关系，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目则提供了一种叫作“Service”的服务。像这样的两个应用，往往故意不部署在同一台机器上，这样即使 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用所在的机器宕机了，数据库也完全不受影响。可是，我们知道，对于一个容器来说，它的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址等信息不是固定的，那么 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用又怎么找到数据库容器的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 呢？&lt;&#x2F;p&gt;
&lt;p&gt;所以，Kubernetes 项目的做法是给 &lt;code&gt;Pod&lt;&#x2F;code&gt; 绑定一个 &lt;code&gt;Service&lt;&#x2F;code&gt; 服务，而 &lt;code&gt;Service&lt;&#x2F;code&gt; 服务声明的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址等信息是 &lt;strong&gt;终生不变&lt;&#x2F;strong&gt; 的。这个 &lt;code&gt;Service&lt;&#x2F;code&gt; 服务的主要作用，就是作为 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的代理入口 &lt;code&gt;(Portal)&lt;&#x2F;code&gt;，从而代替 &lt;code&gt;Pod&lt;&#x2F;code&gt; 对外暴露一个固定的网络地址。&lt;&#x2F;p&gt;
&lt;p&gt;这样，对于 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 来说，它需要关心的就是数据库 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;Service&lt;&#x2F;code&gt; &lt;code&gt;信息。不难想象，Service&lt;&#x2F;code&gt; 后端真正代理的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址、端口等信息的自动更新、维护，则是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目的职责。&lt;&#x2F;p&gt;
&lt;p&gt;像这样，围绕着容器和 &lt;code&gt;Pod&lt;&#x2F;code&gt; 不断向真实的技术场景扩展，我们就能够摸索出一幅如下所示的 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目核心功能的“全景图”。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;container-orchestration-and-kubernetes&#x2F;k8s-overview.png&quot; alt=&quot;k8s-overview&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;按照这幅图的线索，我们从容器这个最基础的概念出发，首先遇到了容器间“紧密协作”关系的难题，于是就扩展到了 &lt;code&gt;Pod&lt;&#x2F;code&gt;: 有了 &lt;code&gt;Pod&lt;&#x2F;code&gt; 之后，我们希望能一次启动多个应用的实例，这样就需要 &lt;code&gt;Deployment&lt;&#x2F;code&gt; 这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的多实例管理器；而有了这样一组相同的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 后，我们又需要通过一个固定的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址和端口以负载均衡的方式访问它，于是就有了 &lt;code&gt;Service&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;可是，如果现在两个不同 &lt;code&gt;Pod&lt;&#x2F;code&gt; 之间不仅有“访问关系”，还要求在发起时加上授权信息。最典型的例子就是 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用对数据库访问时需要 &lt;code&gt;Credential&lt;&#x2F;code&gt;(数据库的用户名和密码)信息。那么，在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 中这样的关系又如何处理呢？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目提供了一种叫作 &lt;code&gt;Secret&lt;&#x2F;code&gt; 的对象，它其实是一个保存在 &lt;code&gt;Etcd&lt;&#x2F;code&gt; 里的键值对数据。这样，你把 &lt;code&gt;Credential&lt;&#x2F;code&gt; 信息以 &lt;code&gt;Secret&lt;&#x2F;code&gt; 的方式存在 &lt;code&gt;Etcd&lt;&#x2F;code&gt; &lt;code&gt;里，Kubernetes&lt;&#x2F;code&gt; 就会在你指定的 &lt;code&gt;Pod&lt;&#x2F;code&gt;(比如，&lt;code&gt;Web&lt;&#x2F;code&gt; 应用的 &lt;code&gt;Pod&lt;&#x2F;code&gt;)启动时，自动把 &lt;code&gt;Secret&lt;&#x2F;code&gt; 里的数据以 &lt;code&gt;Volume&lt;&#x2F;code&gt; 的方式挂载到容器里。这样，这个 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用就可以访问数据库了。&lt;&#x2F;p&gt;
&lt;p&gt;除了应用与应用之间的关系外，应用运行的形态是影响 &lt;strong&gt;如何容器化这个应用&lt;&#x2F;strong&gt; 的第二个重要因素。&lt;&#x2F;p&gt;
&lt;p&gt;为此，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 定义了新的、基于 &lt;code&gt;Pod&lt;&#x2F;code&gt; 改进后的对象。比如 &lt;code&gt;Job&lt;&#x2F;code&gt;，用来描述一次性运行的 &lt;code&gt;Pod&lt;&#x2F;code&gt;(比如，大数据任务): 再比如 &lt;code&gt;DaemonSet&lt;&#x2F;code&gt;，用来描述每个宿主机上必须且只能运行一个副本的守护进程服务: 又比如 &lt;code&gt;CronJob&lt;&#x2F;code&gt;，则用于描述定时任务等等。&lt;&#x2F;p&gt;
&lt;p&gt;如此种种，正是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目定义容器间关系和形态的主要方法。&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目并没有像其他项目那样，为每一个管理功能创建一个指令，然后在项目中实现其中的逻辑。这种做法，的确可以解决当前的问题，但是在更多的问题来临之后，往往会力不从心。&lt;&#x2F;p&gt;
&lt;p&gt;相比之下，在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中，我们所推崇的使用方法是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;首先，通过一个 &lt;strong&gt;编排对象&lt;&#x2F;strong&gt;，比如 &lt;code&gt;Pod&lt;&#x2F;code&gt;、&lt;code&gt;Job&lt;&#x2F;code&gt;、&lt;code&gt;CronJob&lt;&#x2F;code&gt; 等，来描述你试图管理的应用；&lt;&#x2F;li&gt;
&lt;li&gt;然后，再为它定义一些“服务对象”，比如 &lt;code&gt;Service&lt;&#x2F;code&gt;、&lt;code&gt;Secret&lt;&#x2F;code&gt;、&lt;code&gt;Horizontal Pod Autoscaler&lt;&#x2F;code&gt;(自动水平扩展器)等。这些对象，会负责具体的平台级功能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这种使用方法，就是所谓的 &lt;strong&gt;声明式 API&lt;&#x2F;strong&gt; 。这种 &lt;code&gt;API&lt;&#x2F;code&gt; 对应的 &lt;strong&gt;编排对象&lt;&#x2F;strong&gt; 和 &lt;strong&gt;服务对象&lt;&#x2F;strong&gt;，都是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中的 &lt;code&gt;API&lt;&#x2F;code&gt; 对象&lt;code&gt;(API Object)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;这就是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 最核心的设计理念，也是接下来我会重点剖析的关键技术点。&lt;&#x2F;p&gt;
&lt;p&gt;最后，我来回答一个更直接的问题: &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目如何启动一个容器化任务呢？&lt;&#x2F;p&gt;
&lt;p&gt;比如，我现在已经制作好了一个 &lt;code&gt;Nginx&lt;&#x2F;code&gt; 容器镜像，希望让平台帮我启动这个镜像。并且，我要求平台帮我运行两个完全相同的 &lt;code&gt;Nginx&lt;&#x2F;code&gt; 副本，以负载均衡的方式共同对外提供服务。&lt;&#x2F;p&gt;
&lt;p&gt;如果是自己 &lt;code&gt;DIY&lt;&#x2F;code&gt; 的话，可能需要启动两台虚拟机，分别安装两个 &lt;code&gt;Nginx&lt;&#x2F;code&gt;，然后使用 &lt;code&gt;keepalived&lt;&#x2F;code&gt; 为这两个虚拟机做一个虚拟 &lt;code&gt;IP&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;而如果使用 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目呢？你需要做的则是编写如下这样一个 &lt;code&gt;YAML&lt;&#x2F;code&gt; 文件(比如名叫 nginx-deployment.yaml):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx:1.7.9
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上面这个 &lt;code&gt;YAML&lt;&#x2F;code&gt; 文件中，我们定义了一个 &lt;code&gt;Deployment&lt;&#x2F;code&gt; 对象，它的主体部分 &lt;code&gt;(spec.template 部分)&lt;&#x2F;code&gt; 是一个使用 &lt;code&gt;Nginx&lt;&#x2F;code&gt; 镜像的 &lt;code&gt;Pod&lt;&#x2F;code&gt;，而这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的副本数是 2(replicas=2)。&lt;&#x2F;p&gt;
&lt;p&gt;然后执行:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; nginx-deployment.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样，两个完全相同的 &lt;code&gt;Nginx&lt;&#x2F;code&gt; 容器副本就被启动了。&lt;&#x2F;p&gt;
&lt;p&gt;不过，这么看来，做同样一件事情，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 用户要做的工作也不少嘛。&lt;&#x2F;p&gt;
&lt;p&gt;别急，在后续的讲解中，我会陆续介绍 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目这种 &lt;strong&gt;声明式 API&lt;&#x2F;strong&gt; 的种种好处，以及基于它实现的强大的编排能力。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目的本质，是为用户提供一个具有普遍意义的容器编排工具。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-yue-du&quot;&gt;参考阅读&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;malteschwarzkopf.de&#x2F;research&#x2F;assets&#x2F;google-stack.pdf&quot;&gt;The Google Stack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
