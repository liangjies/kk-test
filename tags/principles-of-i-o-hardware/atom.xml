<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>不是在改BUG，就是在改BUG的路上 - principles of i&#x2F;o hardware</title>
	<link href="https://blog.kiyoko.io/tags/principles-of-i-o-hardware/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.kiyoko.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-08-12T17:50:29+00:00</updated>
	<id>https://blog.kiyoko.io/tags/principles-of-i-o-hardware/atom.xml</id>
	<entry xml:lang="en">
		<title>设备控制器</title>
		<published>2020-08-12T17:50:29+00:00</published>
		<updated>2020-08-12T17:50:29+00:00</updated>
		<link href="https://blog.kiyoko.io/device-controllers/" type="text/html"/>
		<id>https://blog.kiyoko.io/device-controllers/</id>
		<content type="html">&lt;p&gt;从功能角度方面，一个 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 单元由机械组件和电子组件两部分组合而成。而从设计的角度出发，将二者分开，则可以提供一种更具模块化，且更具通用性的设计模式。&lt;&#x2F;p&gt;
&lt;p&gt;电子组件，可被称作设备控制器(&lt;code&gt;device controller&lt;&#x2F;code&gt;)，也可被称作适配器 &lt;code&gt;(adapter)&lt;&#x2F;code&gt;。在个人计算机上，常见的设备控制器要么是直接在母板上的芯片，要么是可插入扩展插槽的印刷电路板。&lt;&#x2F;p&gt;
&lt;p&gt;机械组件其实就是设备本身。&lt;&#x2F;p&gt;
&lt;p&gt;下图为这种模块化的设计的简易示意图。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;device-controllers&#x2F;01-devices-arrangement.PNG&quot; alt=&quot;arrangement&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;控制器卡上有一些连接器，用途是允许通过线缆连接到设备上，大部分控制器卡支持两个，四个甚至八个设备。控制器和设备之间的接口可以是标准接口，比如 &lt;code&gt;ANSI&lt;&#x2F;code&gt;，&lt;code&gt;IEEE&lt;&#x2F;code&gt; 或 &lt;code&gt;ISO&lt;&#x2F;code&gt; 标准，也可以是事实上的标准，例如，&lt;code&gt;SATA&lt;&#x2F;code&gt;，&lt;code&gt;SCSI&lt;&#x2F;code&gt;，&lt;code&gt;USB&lt;&#x2F;code&gt;，&lt;code&gt;Thunderbolt&lt;&#x2F;code&gt; 或 &lt;code&gt;FireWire(IEEE 1394)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;控制器和设备之间的接口属于非常底层的接口。例如，磁盘可能被格式化为&lt;code&gt;2,000,000&lt;&#x2F;code&gt; 个扇区，每个磁道 &lt;code&gt;512&lt;&#x2F;code&gt; 字节。但是，实际上从驱动器中出来的是一个串行位流，始于前导码 &lt;code&gt;(preamble)&lt;&#x2F;code&gt;，然后是一个扇区中的 &lt;code&gt;4096&lt;&#x2F;code&gt; 位，最后是一个校验和或纠错码 &lt;code&gt;(ECC)&lt;&#x2F;code&gt;。格式化磁盘后，将写入包含柱面号和扇区号，扇区大小，类似数据以及同步信息的前导码。&lt;&#x2F;p&gt;
&lt;p&gt;控制器的职责是将串行位流转换为字节块，并执行必要的纠错。首先，控制器在其内部缓冲区中，逐位组装成字节块。在确认校验和无误，且该块无错误后，可以将数据块复制到主存储器中。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;LCD&lt;&#x2F;code&gt; 显示器的控制器在低电平时，可以用作位串行设备。它从存储器中读取包含要显示的字符的字节后，生成修改相应像素背光偏振的信号，实现将字符写入到屏幕上。试想，如果没有显示控制器，则需要操作系统开发者通过显式编程的方式，控制所有像素的电场，这将是一件多么可怕的事情。正是因为使用了控制器，操作系统只需通过少量参数来初始化控制器，例如每行的字符数，像素数以及每屏的行数，之后就可以让控制器来负责实际驱动电场。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>I&#x2F;O 设备</title>
		<published>2020-08-11T12:33:35+00:00</published>
		<updated>2020-08-11T12:33:35+00:00</updated>
		<link href="https://blog.kiyoko.io/io-devices/" type="text/html"/>
		<id>https://blog.kiyoko.io/io-devices/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 设备大致可分为两类：块设备和字符设备。&lt;&#x2F;p&gt;
&lt;p&gt;块设备将信息存储在固定大小的块中。通常情况，数据块的大小在 &lt;code&gt;512 Bytes&lt;&#x2F;code&gt; 到 &lt;code&gt;32768 Bytes&lt;&#x2F;code&gt; 之间。所有传输过程均以&lt;strong&gt;块&lt;&#x2F;strong&gt;为单位，每次传输一个或多个完整且连续的块。对每个块的读或写操作是互相独立的，这是块设备的基本属性。常见的块设备有硬盘、蓝光光盘等。每个设备块都有各自的地址，因此块设备支持寻址操作，可以使用 &lt;code&gt;seek&lt;&#x2F;code&gt; 指令任意指定偏移位置。比如，磁盘接收到该指令后，通过旋转机械臂及磁头的方式完成寻址操作。&lt;&#x2F;p&gt;
&lt;p&gt;字符设备在传输数据时使用流式传输的方式，为不可寻址设备，因此也不支持 &lt;code&gt;seek&lt;&#x2F;code&gt; 操作。常见的字符设备有鼠标，网卡等。&lt;&#x2F;p&gt;
&lt;p&gt;但事实上，这种分类方案并不是完美无缺的。因为，还有一些设备无法适用于这个分类方案。&lt;&#x2F;p&gt;
&lt;p&gt;比如，时钟是一种按照预定义时间间隔产生中断信息的一种设备，它既不是可寻址的块设备，也不是字符流设备。除此之外，还有内存映射、屏幕、触摸屏等各类设备。但换一个角度分析，由于计算机使用到的大部分 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 设备，要么是块设备，要么是字符设备，这个分类模型足够通用。因此，可以用来作为独立于设备的基础操作系统基础模块。例如，文件系统就是用于处理经过抽象处理之后的块设备，而具体到设备层面的交互则交给更底层的软件处理，比如设备驱动程序。&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
