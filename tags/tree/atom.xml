<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>不是在改BUG，就是在改BUG的路上 - tree</title>
	<link href="https://blog.kiyoko.io/tags/tree/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.kiyoko.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-09-10T19:29:43+00:00</updated>
	<id>https://blog.kiyoko.io/tags/tree/atom.xml</id>
	<entry xml:lang="en">
		<title>B 树</title>
		<published>2020-09-10T19:29:43+00:00</published>
		<updated>2020-09-10T19:29:43+00:00</updated>
		<link href="https://blog.kiyoko.io/b-tree/" type="text/html"/>
		<id>https://blog.kiyoko.io/b-tree/</id>
		<content type="html">&lt;h2 id=&quot;gai-shu&quot;&gt;概述&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;B-Tree&lt;&#x2F;strong&gt; 属于&lt;strong&gt;自平衡树&lt;&#x2F;strong&gt;的一种。其他种类的自平衡树，比如，&lt;strong&gt;AVL&lt;&#x2F;strong&gt;、&lt;strong&gt;Red-Black Tree&lt;&#x2F;strong&gt; 等，都是假设所有数据均保存在内存中。而 &lt;strong&gt;B-Tree&lt;&#x2F;strong&gt; 是用于内存无法保存所有数据的超大数据量场景。&lt;&#x2F;p&gt;
&lt;p&gt;当 &lt;strong&gt;key&lt;&#x2F;strong&gt; 的数量庞大，需要以 &lt;strong&gt;block&lt;&#x2F;strong&gt; 的形式从磁盘中读取数据时，相较于从内存中读取数据而言，访问磁盘需要很长的时间。&lt;strong&gt;B-Tree&lt;&#x2F;strong&gt; 的主要目标，或者说核心思想就是为了减少访问磁盘的次数。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-jian-fu-za-du&quot;&gt;时间复杂度&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;ALGORITHM&lt;&#x2F;th&gt;&lt;th align=&quot;left&quot;&gt;TIME COMPLEXITY&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Search&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;O(log n)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Insert&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;O(log n)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Delete&lt;&#x2F;td&gt;&lt;td align=&quot;left&quot;&gt;O(log n)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;n&lt;&#x2F;strong&gt;: &lt;strong&gt;B-Tree&lt;&#x2F;strong&gt; 的节点总数。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;xing-zhi&quot;&gt;性质&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;所有的叶子节点在同一级。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;B-Tree&lt;&#x2F;strong&gt; 的 &lt;strong&gt;度(degree)&lt;&#x2F;strong&gt; 取决于磁盘块大小。&lt;&#x2F;li&gt;
&lt;li&gt;除根节点之外，其余节点必须至少包含 &lt;strong&gt;t-1&lt;&#x2F;strong&gt; 个 &lt;strong&gt;key&lt;&#x2F;strong&gt;；跟节点至少包含 &lt;strong&gt;1&lt;&#x2F;strong&gt; 个 &lt;strong&gt;key&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;包括根节点在内，所有节点至多包含 &lt;strong&gt;2t-1&lt;&#x2F;strong&gt; 个 &lt;strong&gt;key&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;节点的子节点数量等于节点中 &lt;strong&gt;key&lt;&#x2F;strong&gt; 的数量 &lt;strong&gt;+1&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;节点的所有 &lt;strong&gt;key&lt;&#x2F;strong&gt; 按照升序排列，在 &lt;strong&gt;key: k1, k2&lt;&#x2F;strong&gt; 之间的所有子节点包含 &lt;strong&gt;[k1, k2]&lt;&#x2F;strong&gt; 范围内的所有 &lt;strong&gt;key&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;不同于 &lt;strong&gt;BST&lt;&#x2F;strong&gt; 向下生长，向下收缩。&lt;strong&gt;B-Tree&lt;&#x2F;strong&gt; 从根节点开始生长和收缩。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;yi-ge-jian-dan-de-li-zi&quot;&gt;一个简单的例子&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;b-tree&#x2F;01.PNG&quot; alt=&quot;01.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在上面的例子中，可以观察到:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;所有的叶子结点均处于同一级别&lt;&#x2F;li&gt;
&lt;li&gt;所有非叶子节点都没有空的子树&lt;&#x2F;li&gt;
&lt;li&gt;所有非叶子节点 &lt;strong&gt;key&lt;&#x2F;strong&gt; 的数量比其自带数 &lt;strong&gt;少 1&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;can-kao-yue-du&quot;&gt;参考阅读&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.geeksforgeeks.org&#x2F;introduction-of-b-tree-2&quot;&gt;Introduction of B-Tree&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
