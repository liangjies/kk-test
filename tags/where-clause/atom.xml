<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>不是在改BUG，就是在改BUG的路上 - where clause</title>
	<link href="https://blog.kiyoko.io/tags/where-clause/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.kiyoko.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-08-01T15:26:44+00:00</updated>
	<id>https://blog.kiyoko.io/tags/where-clause/atom.xml</id>
	<entry xml:lang="en">
		<title>优化 WHERE 子句</title>
		<published>2020-08-01T15:26:44+00:00</published>
		<updated>2020-08-01T15:26:44+00:00</updated>
		<link href="https://blog.kiyoko.io/where-clause-optimization/" type="text/html"/>
		<id>https://blog.kiyoko.io/where-clause-optimization/</id>
		<content type="html">&lt;p&gt;以 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句为例，介绍如何优化 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句。这些优化方法同样适用于 &lt;code&gt;DELETE&lt;&#x2F;code&gt; 和 &lt;code&gt;UPDATE&lt;&#x2F;code&gt; 语句中的 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句。&lt;&#x2F;p&gt;
&lt;p&gt;在编写 &lt;code&gt;SQL&lt;&#x2F;code&gt; 时，开发者在主观上为了使语句执行的更快而去做一些所谓的“优化”。但实际上，这些“优化”要么会使 &lt;code&gt;SQL&lt;&#x2F;code&gt; 失去了可读性，要么是在重复 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 做的事情。&lt;&#x2F;p&gt;
&lt;p&gt;下面列举一些 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 会做的优化:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;删除不必要的括号&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span&gt;((a AND b) AND c OR (((a AND b) AND (c AND d))))
&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; (a AND b AND c) OR (a AND b AND c AND d)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;常量替换(Constant folding)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;(a&amp;lt;b AND b=c) AND a=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; b&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;AND b=c AND a=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;删除恒定条件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;(b&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;AND b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) OR (b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) OR (b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;OR b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 &lt;code&gt;MySQL 8.0.14&lt;&#x2F;code&gt; 和更高版本中，这是在准备过程中发生的，而不是在优化阶段发生的，这有助于简化联接。 有关更多信息和示例，请参见 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;outer-join-optimization.html&quot;&gt;Section 8.2.1.9, “Outer Join Optimization”&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;索引使用的常量表达式仅计算一次。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;从 &lt;code&gt;MySQL 8.0.16&lt;&#x2F;code&gt; 开始，数值类型的列与常数比较时，折叠(folded)或删除无效或越界的值：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- CREATE TABLE t (c TINYINT UNSIGNED NOT NULL);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; c ≪ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;256&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;-≫ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;对于使用&lt;code&gt;MyISAM&lt;&#x2F;code&gt; 和 &lt;code&gt;MEMORY&lt;&#x2F;code&gt;存储引擎的表，在单一表上执行 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;aggregate-functions.html#function_count&quot;&gt;&lt;code&gt;COUNT(*)&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; 操作时，如果没有 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句，或者 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句的表达式 &lt;code&gt;NOT NULL&lt;&#x2F;code&gt;，都将直接从表信息中读取。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;COUNT(*) on a single table without a WHERE is retrieved directly from the table information for MyISAM and MEMORY tables. This is also done for any NOT NULL expression when used with only one table.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;尽早检测无效的常量表达式。&lt;code&gt;MySQL&lt;&#x2F;code&gt; 检测到无效 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句时，直接返回无结果。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;不使用 &lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 或聚合函数(&lt;code&gt;COUNT()，MIN()&lt;&#x2F;code&gt;)时，会把 &lt;code&gt;HAVING&lt;&#x2F;code&gt; 与 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 合并。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;对于联接查询中的每个表，构造一个简单的 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 实现快速 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 评估，尽快跳过行的目的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;优先读取常量表。满足以下任意一个即为常量表：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;空表或具有一行的表。&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 语句构建得到的表，且 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句中的所有列只能是 &lt;code&gt;PRIMARY KEY&lt;&#x2F;code&gt; 或 &lt;code&gt;NOT NULL UNIQUE&lt;&#x2F;code&gt; 索引与常量表达式比较。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;以下所有表均用作常量表：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; primary_key=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;primary_key&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;primary_key&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- PRIMARY KEY (column1,column2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; column1=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;AND column2=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- unique_not_null_column INT NOT NULL UNIQUE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; unique_not_null_column=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;参考 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;internals&#x2F;en&#x2F;optimizer-constants-constant-tables.html&quot;&gt;7.2.1.4 Constants and Constant Tables&lt;&#x2F;a&gt; 了解更多有关常量与常量表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;通过尝试所有可能的方法，找到用于联接表的最佳联接组合。如果 &lt;code&gt;ORDER BY&lt;&#x2F;code&gt; 和 &lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 子句中的所有列都来自同一表，则在连接时优先使用该表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;ORDER BY&lt;&#x2F;code&gt; 子句和 &lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 子句使用不同的列，或者 &lt;code&gt;ORDER BY&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 使用的列不属于联接队列中第一个表，则会创建一个临时表。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If there is an ORDER BY clause and a different GROUP BY clause, or if the ORDER BY or GROUP BY contains columns from tables other than the first table in the join queue, a temporary table is created.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果使用 &lt;code&gt;SQL_SMALL_RESULT&lt;&#x2F;code&gt; 修饰符，&lt;code&gt;MySQL&lt;&#x2F;code&gt; 将使用内存临时表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;从表的所有索引中选择一个最佳索引使用。或者，优化器认为全表扫描更有效时，会选择全表扫描。曾经，当使用最佳索引仍然会跨越表的 &lt;code&gt;30%&lt;&#x2F;code&gt;(&lt;code&gt;spanned more than 30% of the table&lt;&#x2F;code&gt;)时，就会选择使用全表扫描。但现在，使用索引还是全表扫描不再只取决于固定百分比，同时还要考虑其他因素，例如表大小，行数和 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 块大小。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在某些情况下，&lt;code&gt;MySQL&lt;&#x2F;code&gt; 可以从索引中读取数据行，而无需查询数据文件。如果索引中使用的所有列都是数字列，则仅使用索引树解析查询。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在输出每一行之前，将跳过与 &lt;code&gt;HAVING&lt;&#x2F;code&gt; 子句不匹配的行。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
