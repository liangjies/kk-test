<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>不是在改BUG，就是在改BUG的路上 - container orchestration</title>
	<link href="https://blog.kiyoko.io/tags/container-orchestration/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.kiyoko.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-08-24T20:58:07+00:00</updated>
	<id>https://blog.kiyoko.io/tags/container-orchestration/atom.xml</id>
	<entry xml:lang="en">
		<title>容器编排与 Kubernetes</title>
		<published>2020-08-24T20:58:07+00:00</published>
		<updated>2020-08-24T20:58:07+00:00</updated>
		<link href="https://blog.kiyoko.io/container-orchestration-and-kubernetes/" type="text/html"/>
		<id>https://blog.kiyoko.io/container-orchestration-and-kubernetes/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt; 容器依托于 &lt;code&gt;Linux Namespace&lt;&#x2F;code&gt;、&lt;code&gt;Cgroup&lt;&#x2F;code&gt;、&lt;code&gt;rootfs&lt;&#x2F;code&gt; 三方面，在宿主机之上为用户构建出互相隔离的进程运行环境。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rootfs&lt;&#x2F;code&gt; 作为容器镜像，是静态视图；&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Namespace&lt;&#x2F;code&gt; + &lt;code&gt;Cgroup&lt;&#x2F;code&gt; 提供运行时隔离环境，是动态视图。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;显而易见，对于开发者而言，他们更关注于容器镜像。容器镜像，可以看做是以前的应用程序，它由开发者负责构建，并在开发、测试、发布等各个环节之间作为最核心的组件。&lt;&#x2F;p&gt;
&lt;p&gt;在这种前提之下，云服务提供商的职责就从原来的 &lt;strong&gt;将用户提交的应用在虚拟机上运行起来&lt;&#x2F;strong&gt;，转变为 &lt;strong&gt;将用户提交的镜像以容器的方式运行起来&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;因此，整个生态必将以容器镜像为核心连接点，在生态链路的各个节点，如 &lt;code&gt;CI&#x2F;CD&lt;&#x2F;code&gt;、监控、安全、网络、存储等，都需要转变为以容器镜像为根本。这将是一次云服务平台的结构化升级。&lt;&#x2F;p&gt;
&lt;p&gt;容器从一个开发者手里的小工具，一跃成为了云计算领域的绝对主角；而能够定义容器组织和管理规范的 &lt;strong&gt;容器编排&lt;&#x2F;strong&gt; 技术，则当仁不让地坐上了容器技术领域的 &lt;strong&gt;头把交椅&lt;&#x2F;strong&gt;。这其中，其中翘楚当属 &lt;code&gt;Docker&lt;&#x2F;code&gt; 公司的 &lt;code&gt;Compose+Swarm&lt;&#x2F;code&gt; 组合，以及 &lt;code&gt;Google&lt;&#x2F;code&gt; 与 &lt;code&gt;RedHat&lt;&#x2F;code&gt; 公司共同主导的 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目脱胎于 &lt;code&gt;Google&lt;&#x2F;code&gt; 的核心系统 &lt;code&gt;Borg&lt;&#x2F;code&gt;，在项目初期有有着很强的技术理论指导。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Borg&lt;&#x2F;code&gt; 系统，一直以来都被誉为 &lt;code&gt;Google&lt;&#x2F;code&gt; 公司内部最强大的 &lt;strong&gt;秘密武器&lt;&#x2F;strong&gt;。虽然略显夸张，但这个说法倒不算是吹牛。因为，相比于 &lt;code&gt;Spanner&lt;&#x2F;code&gt;、&lt;code&gt;BigTable&lt;&#x2F;code&gt; 等相对上层的项目，&lt;code&gt;Borg&lt;&#x2F;code&gt; 要承担的责任，是承载 &lt;code&gt;Google&lt;&#x2F;code&gt; 公司整个基础设施的核心依赖。在 &lt;code&gt;Google&lt;&#x2F;code&gt; 公司已经公开发表的基础设施体系论文中，&lt;code&gt;Borg&lt;&#x2F;code&gt; 项目当仁不让地位居整个基础设施技术栈的最底层。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;container-orchestration-and-kubernetes&#x2F;google-stack.png&quot; alt=&quot;google-stack&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上图，来自于 &lt;code&gt;Google Omega&lt;&#x2F;code&gt; 论文的第一作者的博士毕业论文。它描绘了当时 &lt;code&gt;Google&lt;&#x2F;code&gt; 已经公开发表的整个基础设施栈。在这个图里，你既可以找到 &lt;code&gt;MapReduce&lt;&#x2F;code&gt;、&lt;code&gt;BigTable&lt;&#x2F;code&gt; 等知名项目，也能看到 &lt;code&gt;Borg&lt;&#x2F;code&gt; 和它的继任者 &lt;code&gt;Omega&lt;&#x2F;code&gt; 位于整个技术栈的最底层。&lt;&#x2F;p&gt;
&lt;p&gt;正是由于这样的定位，&lt;code&gt;Borg&lt;&#x2F;code&gt; 可以说是 &lt;code&gt;Google&lt;&#x2F;code&gt; 最不可能开源的一个项目。而幸运的是，得益于 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目和容器技术的风靡，它终于得以以另一种方式与开源社区见面，这个方式就是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目。&lt;&#x2F;p&gt;
&lt;p&gt;所以，相比于 &lt;strong&gt;小打小闹&lt;&#x2F;strong&gt; 的 &lt;code&gt;Docker&lt;&#x2F;code&gt; 公司、&lt;strong&gt;旧瓶装新酒&lt;&#x2F;strong&gt; 的 &lt;code&gt;Mesos&lt;&#x2F;code&gt; 社区，&lt;strong&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目从一开始就比较幸运地站上了一个他人难以企及的高度&lt;&#x2F;strong&gt;: 在它的成长阶段，这个项目每一个核心特性的提出，几乎都脱胎于 &lt;code&gt;Borg&#x2F;Omega&lt;&#x2F;code&gt; 系统的设计与经验。更重要的是，这些特性在开源社区落地的过程中，又在整个社区的合力之下得到了极大的改进，修复了很多当年遗留在 &lt;code&gt;Borg&lt;&#x2F;code&gt; 体系中的缺陷和问题。&lt;&#x2F;p&gt;
&lt;p&gt;所以，尽管在发布之初被批评是 &lt;strong&gt;曲高和寡&lt;&#x2F;strong&gt;，但是在逐渐觉察到 &lt;code&gt;Docker&lt;&#x2F;code&gt; 技术栈的 &lt;strong&gt;稚嫩&lt;&#x2F;strong&gt; 和 &lt;code&gt;Mesos&lt;&#x2F;code&gt; 社区的 &lt;strong&gt;老迈&lt;&#x2F;strong&gt; 之后，这个社区很快就明白了: &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目在 &lt;code&gt;Borg&lt;&#x2F;code&gt; 体系的指导下，体现出了一种独有的 &lt;strong&gt;先进性&lt;&#x2F;strong&gt; 与 &lt;strong&gt;完备性&lt;&#x2F;strong&gt;，而这些特质才是一个基础设施领域开源项目赖以生存的核心价值。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kubernetes-jie-jue-liao-shi-yao-wen-ti&quot;&gt;Kubernetes 解决了什么问题&lt;&#x2F;h2&gt;
&lt;p&gt;在说明 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 解决了什么问题之前，先来讨论一下，用户期望 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 有什么样的功能。&lt;&#x2F;p&gt;
&lt;p&gt;对于大多数用户来说，他们希望 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目带来的体验是确定的: 现在我有了应用的容器镜像，请帮我在一个给定的集群上把这个应用运行起来。&lt;&#x2F;p&gt;
&lt;p&gt;更进一步地说，还希望 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 能给我提供路由 &lt;strong&gt;网关&lt;&#x2F;strong&gt;、&lt;strong&gt;水平扩展&lt;&#x2F;strong&gt;、&lt;strong&gt;监控&lt;&#x2F;strong&gt;、&lt;strong&gt;备份&lt;&#x2F;strong&gt;、&lt;strong&gt;灾难恢复&lt;&#x2F;strong&gt; 等一系列运维能力。&lt;&#x2F;p&gt;
&lt;p&gt;解决发现，这就是对于 &lt;code&gt;PaaS(Cloud Foundry)&lt;&#x2F;code&gt; 同等的诉求。&lt;&#x2F;p&gt;
&lt;p&gt;但是，这些功能完全可以通过 &lt;code&gt;Docker&lt;&#x2F;code&gt; 及其生态圈 &lt;code&gt;Docker Compose&lt;&#x2F;code&gt; + &lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 自行实现，完全不知道实现一个 &lt;strong&gt;百万行代码量级&lt;&#x2F;strong&gt; 的 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所以说，如果 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目只是停留在拉取用户镜像、运行容器，以及提供常见的运维功能的话，那么别说跟 &lt;strong&gt;原生&lt;&#x2F;strong&gt; 的 &lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 项目竞争了，哪怕跟经典的 &lt;code&gt;PaaS&lt;&#x2F;code&gt; 项目相比也难有什么优势可言。&lt;&#x2F;p&gt;
&lt;p&gt;而实际上，在定义核心功能的过程中，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目是站在巨人 &lt;code&gt;Borg&lt;&#x2F;code&gt; 项目的肩膀之上，凭借 &lt;code&gt;Borg&lt;&#x2F;code&gt; 超前的理论优势，在短短几个月内迅速站稳了脚跟，进而确定了一个如下图所示的全局架构:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;container-orchestration-and-kubernetes&#x2F;k8s-architecture.png&quot; alt=&quot;k8s-architecture&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目的架构与原型项目 &lt;code&gt;Borg&lt;&#x2F;code&gt; 非常类似，都由 &lt;code&gt;Master&lt;&#x2F;code&gt; 和 &lt;code&gt;Node&lt;&#x2F;code&gt; 两种节点组成，分别用作控制节点和计算节点。&lt;&#x2F;p&gt;
&lt;p&gt;其中，控制节点，即 &lt;code&gt;Master&lt;&#x2F;code&gt; 节点，由 &lt;strong&gt;三个&lt;&#x2F;strong&gt; 紧密协作的独立组件组合而成，它们分别是&lt;strong&gt;负责 &lt;code&gt;API&lt;&#x2F;code&gt; 服务的 &lt;code&gt;kube-apiserver&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;、&lt;strong&gt;负责调度的 &lt;code&gt;kube-scheduler&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;，以及 &lt;strong&gt;负责容器编排的 &lt;code&gt;kube-controller-manager&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;。整个集群的持久化数据，由 &lt;code&gt;kube-apiserver&lt;&#x2F;code&gt; 处理后保存在 &lt;code&gt;ETCD&lt;&#x2F;code&gt; 中。&lt;&#x2F;p&gt;
&lt;p&gt;而计算节点上最核心的部分，则是一个叫作 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 的组件。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 主要负责同容器运行时(比如 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目)打交道。而这个交互所依赖的，是一个称作 &lt;code&gt;CRI(Container Runtime Interface)&lt;&#x2F;code&gt; 的远程调用接口，这个接口定义了容器运行时的各项核心操作，比如: 启动一个容器需要的所有参数。&lt;&#x2F;p&gt;
&lt;p&gt;这也是为何，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目并不关心你部署的是什么容器运行时、使用的什么技术实现，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 &lt;code&gt;CRI&lt;&#x2F;code&gt; 接入到 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目当中。&lt;&#x2F;p&gt;
&lt;p&gt;而具体的容器运行时，比如 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目，则一般通过 &lt;code&gt;OCI&lt;&#x2F;code&gt; 这个容器运行时规范同底层的 &lt;code&gt;Linux&lt;&#x2F;code&gt; 操作系统进行交互，即: 把 &lt;code&gt;CRI&lt;&#x2F;code&gt; 请求翻译成对 &lt;code&gt;Linux&lt;&#x2F;code&gt; 操作系统的调用(操作 &lt;code&gt;Linux Namespace&lt;&#x2F;code&gt; 和 &lt;code&gt;Cgroups&lt;&#x2F;code&gt; 等)。&lt;&#x2F;p&gt;
&lt;p&gt;此外，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 还通过 &lt;code&gt;gRPC&lt;&#x2F;code&gt; 协议同一个叫作 &lt;code&gt;Device Plugin&lt;&#x2F;code&gt; 的插件进行交互。这个插件，是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目用来管理 &lt;code&gt;GPU&lt;&#x2F;code&gt; 等宿主机物理设备的主要组件，也是基于 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目进行机器学习训练、高性能作业支持等工作必须关注的功能。&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。这两个插件与 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 进行交互的接口，分别是 &lt;code&gt;CNI(Container Networking Interface)&lt;&#x2F;code&gt;和 &lt;code&gt;CSI(Container Storage Interface)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;实际上，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 这个奇怪的名字，来自于 &lt;code&gt;Borg&lt;&#x2F;code&gt; 项目里的同源组件 &lt;code&gt;Borglet&lt;&#x2F;code&gt;。不过，如果你浏览过 &lt;code&gt;Borg&lt;&#x2F;code&gt; 论文的话，就会发现，这个命名方式可能是 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 组件与 &lt;code&gt;Borglet&lt;&#x2F;code&gt; 组件的唯一相似之处。因为 &lt;code&gt;Borg&lt;&#x2F;code&gt; 项目，并不支持我们这里所讲的容器技术，而只是简单地使用了 &lt;code&gt;Linux Cgroups&lt;&#x2F;code&gt; 对进程进行限制。&lt;&#x2F;p&gt;
&lt;p&gt;这就意味着，像 &lt;code&gt;Docker&lt;&#x2F;code&gt; 这样的“容器镜像”在 &lt;code&gt;Borg&lt;&#x2F;code&gt; 中是不存在的，&lt;code&gt;Borglet&lt;&#x2F;code&gt; 组件也自然不需要像 &lt;code&gt;kubelet&lt;&#x2F;code&gt; 这样考虑如何同 &lt;code&gt;Docker&lt;&#x2F;code&gt; 进行交互、如何对容器镜像进行管理的问题，也不需要支持 &lt;code&gt;CRI&lt;&#x2F;code&gt;、&lt;code&gt;CNI&lt;&#x2F;code&gt;、&lt;code&gt;CSI&lt;&#x2F;code&gt; 等诸多容器技术接口。&lt;&#x2F;p&gt;
&lt;p&gt;可以说，&lt;code&gt;kubelet&lt;&#x2F;code&gt; 完全就是为了实现 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目对容器的管理能力而重新实现的一个组件，与 &lt;code&gt;Borg&lt;&#x2F;code&gt; 之间并没有直接的传承关系。&lt;&#x2F;p&gt;
&lt;p&gt;那么，&lt;code&gt;Borg&lt;&#x2F;code&gt; 对于 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目的指导作用又体现在哪里呢？&lt;&#x2F;p&gt;
&lt;p&gt;答案是，&lt;code&gt;Master&lt;&#x2F;code&gt; 节点。&lt;&#x2F;p&gt;
&lt;p&gt;虽然在 &lt;code&gt;Master&lt;&#x2F;code&gt; 节点的实现细节上 &lt;code&gt;Borg&lt;&#x2F;code&gt; 项目与 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目不尽相同，但它们的出发点却高度一致，即: &lt;strong&gt;如何编排、管理、调度用户提交的作业&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;所以，&lt;code&gt;Borg&lt;&#x2F;code&gt; 项目完全可以把 &lt;code&gt;Docker&lt;&#x2F;code&gt; 镜像看作一种新的应用打包方式。这样，&lt;code&gt;Borg&lt;&#x2F;code&gt; 团队过去在大规模作业管理与编排上的经验就可以直接 &lt;strong&gt;套&lt;&#x2F;strong&gt; 在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目上了。&lt;&#x2F;p&gt;
&lt;p&gt;这些经验最主要的表现就是，从一开始，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目就没有像同时期的各种 &lt;strong&gt;容器云&lt;&#x2F;strong&gt; 项目那样，把 &lt;code&gt;Docker&lt;&#x2F;code&gt; 作为整个架构的核心，而仅仅把它作为最底层的一个容器运行时实现。&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目要着重解决的问题，则来自于 &lt;code&gt;Borg&lt;&#x2F;code&gt; 的研究人员在论文中提到的一个非常重要的观点:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;运行在大规模集群中的各种任务之间，实际上存在着各种各样的关系。这些关系的处理，才是作业编排和管理系统最困难的地方。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;事实也正是如此。&lt;&#x2F;p&gt;
&lt;p&gt;其实，这种任务与任务之间的关系，在我们平常的各种技术场景中随处可见。比如，一个 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用与数据库之间的访问关系，一个负载均衡器和它的后端服务之间的代理关系，一个门户应用与授权组件之间的调用关系。&lt;&#x2F;p&gt;
&lt;p&gt;更进一步地说，同属于一个服务单位的不同功能之间，也完全可能存在这样的关系。比如，一个 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用与日志搜集组件之间的文件交换关系。&lt;&#x2F;p&gt;
&lt;p&gt;而在容器技术普及之前，传统虚拟机环境对这种关系的处理方法都是比较“粗粒度”的。你会经常发现很多功能并不相关的应用被一股脑儿地部署在同一台虚拟机中，只是因为它们之间偶尔会互相发起几个 &lt;code&gt;HTTP&lt;&#x2F;code&gt; 请求。&lt;&#x2F;p&gt;
&lt;p&gt;更常见的情况则是，一个应用被部署在虚拟机里之后，你还得手动维护很多跟它协作的守护进程 &lt;code&gt;(Daemon)&lt;&#x2F;code&gt;，用来处理它的日志搜集、灾难恢复、数据备份等辅助工作。&lt;&#x2F;p&gt;
&lt;p&gt;但容器技术出现以后，你就不难发现，在 &lt;strong&gt;功能单位&lt;&#x2F;strong&gt; 的划分上，容器有着独一无二的 &lt;strong&gt;细粒度&lt;&#x2F;strong&gt; 优势: 毕竟容器的本质，只是一个进程而已。&lt;&#x2F;p&gt;
&lt;p&gt;也就是说，只要你愿意，那些原先拥挤在同一个虚拟机里的各个应用、组件、守护进程，都可以被分别做成镜像，然后运行在一个个专属的容器中。它们之间互不干涉，拥有各自的资源配额，可以被调度在整个集群里的任何一台机器上。而这，正是一个 &lt;code&gt;PaaS&lt;&#x2F;code&gt; 系统最理想的工作状态，也是所谓“微服务”思想得以落地的先决条件。&lt;&#x2F;p&gt;
&lt;p&gt;当然，如果只做到 &lt;strong&gt;封装微服务、调度单容器&lt;&#x2F;strong&gt; 这一层次，&lt;code&gt;Docker Swarm&lt;&#x2F;code&gt; 项目就已经绰绰有余了。如果再加上 &lt;code&gt;Compose&lt;&#x2F;code&gt; 项目，你甚至还具备了处理一些简单依赖关系的能力，比如：一个 &lt;strong&gt;Web 容器&lt;&#x2F;strong&gt; 和它要访问的数据库 &lt;strong&gt;DB 容器&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;Compose&lt;&#x2F;code&gt; 项目中，你可以为这样的两个容器定义一个 &lt;code&gt;link&lt;&#x2F;code&gt;，而 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目则会负责维护这个 &lt;strong&gt;link&lt;&#x2F;strong&gt; 关系，其具体做法是: &lt;code&gt;Docker&lt;&#x2F;code&gt; 会在 &lt;code&gt;Web&lt;&#x2F;code&gt; 容器中，将 &lt;code&gt;DB&lt;&#x2F;code&gt; 容器的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址、端口等信息以环境变量的方式注入进去，供应用进程使用，比如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;conf&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-conf &quot;&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span&gt;DB_NAME=&#x2F;web&#x2F;db
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tcp:&#x2F;&#x2F;172.17.0.5:5432
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT_5432_TCP=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;tcp:&#x2F;&#x2F;172.17.0.5:5432
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT_5432_TCP_PROTO=tcp
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT_5432_TCP_PORT=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5432
&lt;&#x2F;span&gt;&lt;span&gt;DB_PORT_5432_TCP_ADDR=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;172.17.0.5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而当 DB 容器发生变化时(比如，镜像更新，被迁移到其他宿主机上等等)，这些环境变量的值会由 &lt;code&gt;Docker&lt;&#x2F;code&gt; 项目自动更新。这就是平台项目自动地处理容器间关系的典型例子。&lt;&#x2F;p&gt;
&lt;p&gt;可是，如果我们现在的需求是，要求这个项目能够处理前面提到的所有类型的关系，甚至还要能够支持未来可能出现的更多种类的关系呢？&lt;&#x2F;p&gt;
&lt;p&gt;这时，&lt;code&gt;link&lt;&#x2F;code&gt; 这种单独针对一种案例设计的解决方案就太过简单了。如果你做过架构方面的工作，就会深有感触：一旦要追求项目的普适性，那就一定要从顶层开始做好设计。&lt;&#x2F;p&gt;
&lt;p&gt;所以，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目最主要的设计思想是，从更宏观的角度，以统一的方式来定义任务之间的各种关系，并且为将来支持更多种类的关系留有余地。&lt;&#x2F;p&gt;
&lt;p&gt;比如，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目对容器间的 &lt;strong&gt;访问&lt;&#x2F;strong&gt; 进行了分类，首先总结出了一类非常常见的“紧密交互”的关系，即：这些应用之间需要非常频繁的交互和访问；又或者，它们会直接通过本地文件进行信息交换。&lt;&#x2F;p&gt;
&lt;p&gt;在常规环境下，这些应用往往会被直接部署在同一台机器上，通过 &lt;code&gt;Localhost&lt;&#x2F;code&gt; 通信，通过本地磁盘目录交换文件。而在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中，这些容器则会被划分为一个 &lt;strong&gt;Pod&lt;&#x2F;strong&gt;，&lt;code&gt;Pod&lt;&#x2F;code&gt; 里的容器共享同一个 &lt;code&gt;Network Namespace&lt;&#x2F;code&gt;、同一组数据卷，从而达到高效率交换信息的目的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Pod&lt;&#x2F;code&gt; 是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中最基础的一个对象，源自于 &lt;code&gt;Google Borg&lt;&#x2F;code&gt; 论文中一个名叫 &lt;code&gt;Alloc&lt;&#x2F;code&gt; 的设计。在后续的章节中，我们会对 &lt;code&gt;Pod&lt;&#x2F;code&gt; 做更进一步地阐述。&lt;&#x2F;p&gt;
&lt;p&gt;而对于另外一种更为常见的需求，比如 &lt;strong&gt;Web 应用&lt;&#x2F;strong&gt; 与 &lt;strong&gt;数据库&lt;&#x2F;strong&gt; 之间的访问关系，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目则提供了一种叫作“Service”的服务。像这样的两个应用，往往故意不部署在同一台机器上，这样即使 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用所在的机器宕机了，数据库也完全不受影响。可是，我们知道，对于一个容器来说，它的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址等信息不是固定的，那么 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用又怎么找到数据库容器的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 呢？&lt;&#x2F;p&gt;
&lt;p&gt;所以，Kubernetes 项目的做法是给 &lt;code&gt;Pod&lt;&#x2F;code&gt; 绑定一个 &lt;code&gt;Service&lt;&#x2F;code&gt; 服务，而 &lt;code&gt;Service&lt;&#x2F;code&gt; 服务声明的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址等信息是 &lt;strong&gt;终生不变&lt;&#x2F;strong&gt; 的。这个 &lt;code&gt;Service&lt;&#x2F;code&gt; 服务的主要作用，就是作为 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的代理入口 &lt;code&gt;(Portal)&lt;&#x2F;code&gt;，从而代替 &lt;code&gt;Pod&lt;&#x2F;code&gt; 对外暴露一个固定的网络地址。&lt;&#x2F;p&gt;
&lt;p&gt;这样，对于 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 来说，它需要关心的就是数据库 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;Service&lt;&#x2F;code&gt; &lt;code&gt;信息。不难想象，Service&lt;&#x2F;code&gt; 后端真正代理的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址、端口等信息的自动更新、维护，则是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目的职责。&lt;&#x2F;p&gt;
&lt;p&gt;像这样，围绕着容器和 &lt;code&gt;Pod&lt;&#x2F;code&gt; 不断向真实的技术场景扩展，我们就能够摸索出一幅如下所示的 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目核心功能的“全景图”。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;container-orchestration-and-kubernetes&#x2F;k8s-overview.png&quot; alt=&quot;k8s-overview&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;按照这幅图的线索，我们从容器这个最基础的概念出发，首先遇到了容器间“紧密协作”关系的难题，于是就扩展到了 &lt;code&gt;Pod&lt;&#x2F;code&gt;: 有了 &lt;code&gt;Pod&lt;&#x2F;code&gt; 之后，我们希望能一次启动多个应用的实例，这样就需要 &lt;code&gt;Deployment&lt;&#x2F;code&gt; 这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的多实例管理器；而有了这样一组相同的 &lt;code&gt;Pod&lt;&#x2F;code&gt; 后，我们又需要通过一个固定的 &lt;code&gt;IP&lt;&#x2F;code&gt; 地址和端口以负载均衡的方式访问它，于是就有了 &lt;code&gt;Service&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;可是，如果现在两个不同 &lt;code&gt;Pod&lt;&#x2F;code&gt; 之间不仅有“访问关系”，还要求在发起时加上授权信息。最典型的例子就是 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用对数据库访问时需要 &lt;code&gt;Credential&lt;&#x2F;code&gt;(数据库的用户名和密码)信息。那么，在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 中这样的关系又如何处理呢？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目提供了一种叫作 &lt;code&gt;Secret&lt;&#x2F;code&gt; 的对象，它其实是一个保存在 &lt;code&gt;Etcd&lt;&#x2F;code&gt; 里的键值对数据。这样，你把 &lt;code&gt;Credential&lt;&#x2F;code&gt; 信息以 &lt;code&gt;Secret&lt;&#x2F;code&gt; 的方式存在 &lt;code&gt;Etcd&lt;&#x2F;code&gt; &lt;code&gt;里，Kubernetes&lt;&#x2F;code&gt; 就会在你指定的 &lt;code&gt;Pod&lt;&#x2F;code&gt;(比如，&lt;code&gt;Web&lt;&#x2F;code&gt; 应用的 &lt;code&gt;Pod&lt;&#x2F;code&gt;)启动时，自动把 &lt;code&gt;Secret&lt;&#x2F;code&gt; 里的数据以 &lt;code&gt;Volume&lt;&#x2F;code&gt; 的方式挂载到容器里。这样，这个 &lt;code&gt;Web&lt;&#x2F;code&gt; 应用就可以访问数据库了。&lt;&#x2F;p&gt;
&lt;p&gt;除了应用与应用之间的关系外，应用运行的形态是影响 &lt;strong&gt;如何容器化这个应用&lt;&#x2F;strong&gt; 的第二个重要因素。&lt;&#x2F;p&gt;
&lt;p&gt;为此，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 定义了新的、基于 &lt;code&gt;Pod&lt;&#x2F;code&gt; 改进后的对象。比如 &lt;code&gt;Job&lt;&#x2F;code&gt;，用来描述一次性运行的 &lt;code&gt;Pod&lt;&#x2F;code&gt;(比如，大数据任务): 再比如 &lt;code&gt;DaemonSet&lt;&#x2F;code&gt;，用来描述每个宿主机上必须且只能运行一个副本的守护进程服务: 又比如 &lt;code&gt;CronJob&lt;&#x2F;code&gt;，则用于描述定时任务等等。&lt;&#x2F;p&gt;
&lt;p&gt;如此种种，正是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目定义容器间关系和形态的主要方法。&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目并没有像其他项目那样，为每一个管理功能创建一个指令，然后在项目中实现其中的逻辑。这种做法，的确可以解决当前的问题，但是在更多的问题来临之后，往往会力不从心。&lt;&#x2F;p&gt;
&lt;p&gt;相比之下，在 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中，我们所推崇的使用方法是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;首先，通过一个 &lt;strong&gt;编排对象&lt;&#x2F;strong&gt;，比如 &lt;code&gt;Pod&lt;&#x2F;code&gt;、&lt;code&gt;Job&lt;&#x2F;code&gt;、&lt;code&gt;CronJob&lt;&#x2F;code&gt; 等，来描述你试图管理的应用；&lt;&#x2F;li&gt;
&lt;li&gt;然后，再为它定义一些“服务对象”，比如 &lt;code&gt;Service&lt;&#x2F;code&gt;、&lt;code&gt;Secret&lt;&#x2F;code&gt;、&lt;code&gt;Horizontal Pod Autoscaler&lt;&#x2F;code&gt;(自动水平扩展器)等。这些对象，会负责具体的平台级功能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这种使用方法，就是所谓的 &lt;strong&gt;声明式 API&lt;&#x2F;strong&gt; 。这种 &lt;code&gt;API&lt;&#x2F;code&gt; 对应的 &lt;strong&gt;编排对象&lt;&#x2F;strong&gt; 和 &lt;strong&gt;服务对象&lt;&#x2F;strong&gt;，都是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目中的 &lt;code&gt;API&lt;&#x2F;code&gt; 对象&lt;code&gt;(API Object)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;这就是 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 最核心的设计理念，也是接下来我会重点剖析的关键技术点。&lt;&#x2F;p&gt;
&lt;p&gt;最后，我来回答一个更直接的问题: &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目如何启动一个容器化任务呢？&lt;&#x2F;p&gt;
&lt;p&gt;比如，我现在已经制作好了一个 &lt;code&gt;Nginx&lt;&#x2F;code&gt; 容器镜像，希望让平台帮我启动这个镜像。并且，我要求平台帮我运行两个完全相同的 &lt;code&gt;Nginx&lt;&#x2F;code&gt; 副本，以负载均衡的方式共同对外提供服务。&lt;&#x2F;p&gt;
&lt;p&gt;如果是自己 &lt;code&gt;DIY&lt;&#x2F;code&gt; 的话，可能需要启动两台虚拟机，分别安装两个 &lt;code&gt;Nginx&lt;&#x2F;code&gt;，然后使用 &lt;code&gt;keepalived&lt;&#x2F;code&gt; 为这两个虚拟机做一个虚拟 &lt;code&gt;IP&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;而如果使用 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目呢？你需要做的则是编写如下这样一个 &lt;code&gt;YAML&lt;&#x2F;code&gt; 文件(比如名叫 nginx-deployment.yaml):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx-deployment
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx:1.7.9
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上面这个 &lt;code&gt;YAML&lt;&#x2F;code&gt; 文件中，我们定义了一个 &lt;code&gt;Deployment&lt;&#x2F;code&gt; 对象，它的主体部分 &lt;code&gt;(spec.template 部分)&lt;&#x2F;code&gt; 是一个使用 &lt;code&gt;Nginx&lt;&#x2F;code&gt; 镜像的 &lt;code&gt;Pod&lt;&#x2F;code&gt;，而这个 &lt;code&gt;Pod&lt;&#x2F;code&gt; 的副本数是 2(replicas=2)。&lt;&#x2F;p&gt;
&lt;p&gt;然后执行:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; nginx-deployment.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样，两个完全相同的 &lt;code&gt;Nginx&lt;&#x2F;code&gt; 容器副本就被启动了。&lt;&#x2F;p&gt;
&lt;p&gt;不过，这么看来，做同样一件事情，&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 用户要做的工作也不少嘛。&lt;&#x2F;p&gt;
&lt;p&gt;别急，在后续的讲解中，我会陆续介绍 &lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目这种 &lt;strong&gt;声明式 API&lt;&#x2F;strong&gt; 的种种好处，以及基于它实现的强大的编排能力。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;&#x2F;code&gt; 项目的本质，是为用户提供一个具有普遍意义的容器编排工具。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-yue-du&quot;&gt;参考阅读&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;malteschwarzkopf.de&#x2F;research&#x2F;assets&#x2F;google-stack.pdf&quot;&gt;The Google Stack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
