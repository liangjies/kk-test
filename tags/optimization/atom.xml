<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>不是在改BUG，就是在改BUG的路上 - optimization</title>
	<link href="https://blog.kiyoko.io/tags/optimization/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.kiyoko.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-08-01T15:26:44+00:00</updated>
	<id>https://blog.kiyoko.io/tags/optimization/atom.xml</id>
	<entry xml:lang="en">
		<title>优化 WHERE 子句</title>
		<published>2020-08-01T15:26:44+00:00</published>
		<updated>2020-08-01T15:26:44+00:00</updated>
		<link href="https://blog.kiyoko.io/where-clause-optimization/" type="text/html"/>
		<id>https://blog.kiyoko.io/where-clause-optimization/</id>
		<content type="html">&lt;p&gt;以 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句为例，介绍如何优化 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句。这些优化方法同样适用于 &lt;code&gt;DELETE&lt;&#x2F;code&gt; 和 &lt;code&gt;UPDATE&lt;&#x2F;code&gt; 语句中的 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句。&lt;&#x2F;p&gt;
&lt;p&gt;在编写 &lt;code&gt;SQL&lt;&#x2F;code&gt; 时，开发者在主观上为了使语句执行的更快而去做一些所谓的“优化”。但实际上，这些“优化”要么会使 &lt;code&gt;SQL&lt;&#x2F;code&gt; 失去了可读性，要么是在重复 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 做的事情。&lt;&#x2F;p&gt;
&lt;p&gt;下面列举一些 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 会做的优化:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;删除不必要的括号&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;SQL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-SQL &quot;&gt;&lt;code class=&quot;language-SQL&quot; data-lang=&quot;SQL&quot;&gt;&lt;span&gt;((a AND b) AND c OR (((a AND b) AND (c AND d))))
&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; (a AND b AND c) OR (a AND b AND c AND d)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;常量替换(Constant folding)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;(a&amp;lt;b AND b=c) AND a=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; b&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;AND b=c AND a=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;删除恒定条件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;(b&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;AND b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) OR (b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) OR (b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;OR b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 &lt;code&gt;MySQL 8.0.14&lt;&#x2F;code&gt; 和更高版本中，这是在准备过程中发生的，而不是在优化阶段发生的，这有助于简化联接。 有关更多信息和示例，请参见 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;outer-join-optimization.html&quot;&gt;Section 8.2.1.9, “Outer Join Optimization”&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;索引使用的常量表达式仅计算一次。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;从 &lt;code&gt;MySQL 8.0.16&lt;&#x2F;code&gt; 开始，数值类型的列与常数比较时，折叠(folded)或删除无效或越界的值：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- CREATE TABLE t (c TINYINT UNSIGNED NOT NULL);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; c ≪ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;256&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;-≫ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;对于使用&lt;code&gt;MyISAM&lt;&#x2F;code&gt; 和 &lt;code&gt;MEMORY&lt;&#x2F;code&gt;存储引擎的表，在单一表上执行 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;aggregate-functions.html#function_count&quot;&gt;&lt;code&gt;COUNT(*)&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; 操作时，如果没有 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句，或者 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句的表达式 &lt;code&gt;NOT NULL&lt;&#x2F;code&gt;，都将直接从表信息中读取。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;COUNT(*) on a single table without a WHERE is retrieved directly from the table information for MyISAM and MEMORY tables. This is also done for any NOT NULL expression when used with only one table.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;尽早检测无效的常量表达式。&lt;code&gt;MySQL&lt;&#x2F;code&gt; 检测到无效 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句时，直接返回无结果。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;不使用 &lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 或聚合函数(&lt;code&gt;COUNT()，MIN()&lt;&#x2F;code&gt;)时，会把 &lt;code&gt;HAVING&lt;&#x2F;code&gt; 与 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 合并。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;对于联接查询中的每个表，构造一个简单的 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 实现快速 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 评估，尽快跳过行的目的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;优先读取常量表。满足以下任意一个即为常量表：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;空表或具有一行的表。&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 语句构建得到的表，且 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句中的所有列只能是 &lt;code&gt;PRIMARY KEY&lt;&#x2F;code&gt; 或 &lt;code&gt;NOT NULL UNIQUE&lt;&#x2F;code&gt; 索引与常量表达式比较。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;以下所有表均用作常量表：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; primary_key=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;primary_key&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;primary_key&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- PRIMARY KEY (column1,column2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; column1=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;AND column2=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- unique_not_null_column INT NOT NULL UNIQUE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; unique_not_null_column=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;参考 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;internals&#x2F;en&#x2F;optimizer-constants-constant-tables.html&quot;&gt;7.2.1.4 Constants and Constant Tables&lt;&#x2F;a&gt; 了解更多有关常量与常量表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;通过尝试所有可能的方法，找到用于联接表的最佳联接组合。如果 &lt;code&gt;ORDER BY&lt;&#x2F;code&gt; 和 &lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 子句中的所有列都来自同一表，则在连接时优先使用该表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;ORDER BY&lt;&#x2F;code&gt; 子句和 &lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 子句使用不同的列，或者 &lt;code&gt;ORDER BY&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;GROUP BY&lt;&#x2F;code&gt; 使用的列不属于联接队列中第一个表，则会创建一个临时表。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If there is an ORDER BY clause and a different GROUP BY clause, or if the ORDER BY or GROUP BY contains columns from tables other than the first table in the join queue, a temporary table is created.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果使用 &lt;code&gt;SQL_SMALL_RESULT&lt;&#x2F;code&gt; 修饰符，&lt;code&gt;MySQL&lt;&#x2F;code&gt; 将使用内存临时表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;从表的所有索引中选择一个最佳索引使用。或者，优化器认为全表扫描更有效时，会选择全表扫描。曾经，当使用最佳索引仍然会跨越表的 &lt;code&gt;30%&lt;&#x2F;code&gt;(&lt;code&gt;spanned more than 30% of the table&lt;&#x2F;code&gt;)时，就会选择使用全表扫描。但现在，使用索引还是全表扫描不再只取决于固定百分比，同时还要考虑其他因素，例如表大小，行数和 &lt;code&gt;I&#x2F;O&lt;&#x2F;code&gt; 块大小。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在某些情况下，&lt;code&gt;MySQL&lt;&#x2F;code&gt; 可以从索引中读取数据行，而无需查询数据文件。如果索引中使用的所有列都是数字列，则仅使用索引树解析查询。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在输出每一行之前，将跳过与 &lt;code&gt;HAVING&lt;&#x2F;code&gt; 子句不匹配的行。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>优化 SELECT 语句</title>
		<published>2020-07-28T21:45:48+00:00</published>
		<updated>2020-07-28T21:45:48+00:00</updated>
		<link href="https://blog.kiyoko.io/optimizing-select-statements/" type="text/html"/>
		<id>https://blog.kiyoko.io/optimizing-select-statements/</id>
		<content type="html">&lt;p&gt;数据库中所有查找操作，均以 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句的形式执行。无论是实现网站秒级以内的响应时间，还是期望在生成大量的隔夜报告是缩短数小时的执行时间，调试这类语句都是重中之重。&lt;&#x2F;p&gt;
&lt;p&gt;除了 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句外，相同的技术还适用于诸如 &lt;code&gt;CREATE TABLE ... AS SELECT&lt;&#x2F;code&gt;，&lt;code&gt;INSERT INTO ... SELECT&lt;&#x2F;code&gt; 和 &lt;code&gt;DELETE&lt;&#x2F;code&gt; 语句中的 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句。但由于这些语句同时会涉及到读写两种操作，因此还需要考虑其他方面的性能问题。&lt;&#x2F;p&gt;
&lt;p&gt;多节点集群支持 &lt;strong&gt;&lt;code&gt;JOIN&lt;&#x2F;code&gt; 查询下推优化(&lt;code&gt;join pushdown optimization&lt;&#x2F;code&gt;)&lt;&#x2F;strong&gt;，能将符合条件的 &lt;code&gt;JOIN&lt;&#x2F;code&gt; 完整地发送到集群的数据节点，让这个查询请求被分发到这些节点上并行执行。有关此优化的更多信息，请参见&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;mysql-cluster-options-variables.html#ndb_join_pushdown-conditions&quot;&gt;Conditions for NDB pushdown joins&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;优化查询的核心因素：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何查询语句 &lt;code&gt;SELECT ... WHERE&lt;&#x2F;code&gt; 执行的非常之慢，首选提速方法就是检查是否可以添加&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;glossary.html#glos_index&quot;&gt;索引&lt;&#x2F;a&gt;。在 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句中使用的列上设置索引，以加快执行，过滤，检索结果等操作的速度。同时，索引信息需要占用一定的磁盘空间，请尽可能在有一定关联性的查询中复用索引。&lt;&#x2F;p&gt;
&lt;p&gt;在执行 &lt;code&gt;JOIN&lt;&#x2F;code&gt; 查询，外键关联等需要多个表参与的查询语句时，索引尤为重要。此时，可以通过 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;explain.html&quot;&gt;EXPLAIN&lt;&#x2F;a&gt; 语句来确定，执行 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句时，实际有哪些索引真正被使用了。参见 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;mysql-indexes.html&quot;&gt;Section 8.3.1, “How MySQL Uses Indexes”&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;using-explain.html&quot;&gt;Section 8.8.1, “Optimizing Queries with EXPLAIN”&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;隔离和调整查询中花费时间过多的任何部分，例如函数调用。 根据查询的结构方式，可以对结果集中的每一行调用一次函数，甚至可以对表中的每一行调用一次函数，从而极大地提高了效率。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;最小化查询中&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;glossary.html#glos_full_table_scan&quot;&gt;全表扫描&lt;&#x2F;a&gt;的次数，特别是对于大表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;通过定期使用 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;analyze-table.html&quot;&gt;&lt;code&gt;ANALYZE TABLE&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; 语句使表统计信息保持最新状态，让优化器具有充足的信息构造有效执行计划。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;了解每种存储引擎的调整技术，索引技术和配置参数。无论是 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 还是 &lt;code&gt;MyISAM&lt;&#x2F;code&gt;，都各自具有一套保持查询高性能的准则。参见 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimizing-innodb-queries.html&quot;&gt;Section 8.5.6, “Optimizing InnoDB Queries”&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimizing-queries-myisam.html&quot;&gt;Section 8.6.1, “Optimizing MyISAM Queries”&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;innodb-performance-ro-txn.html&quot;&gt;Section 8.5.3, “Optimizing InnoDB Read-Only Transactions”&lt;&#x2F;a&gt; 中的技术优化 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 表的单查询事务。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;避免以难以理解的方式转换查询，特别是在优化器自动执行某些相同转换的情况下。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当使用基本准则不能轻松解决性能问题时，可以通过阅读 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;explain.html&quot;&gt;EXPLAIN&lt;&#x2F;a&gt; 计划并调整索引，&lt;code&gt;WHERE&lt;&#x2F;code&gt;，&lt;code&gt;JOIN&lt;&#x2F;code&gt; 等子句来调查特定查询的内部详细信息。(有一定经验之后，阅读 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;explain.html&quot;&gt;EXPLAIN&lt;&#x2F;a&gt; 计划可能是每个查询的第一步。)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;调整 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 用于缓存的内存区域的大小和属性。合理使用 InnoDB 的&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;glossary.html#glos_buffer_pool&quot;&gt;buffer pool&lt;&#x2F;a&gt;，&lt;code&gt;MyISAM&lt;&#x2F;code&gt; 的 &lt;code&gt;key cache&lt;&#x2F;code&gt; 和 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 的 &lt;code&gt;query cache&lt;&#x2F;code&gt;，可以让重复查询的运行速度更快。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;即使查询已经使用了内存缓存，也依然可能对其进一步优化，使其需要更少的内存，从而使应用程序更具可伸缩性。比如，应用程序可以同时处理更多的用户，更大的请求量，而不会导致性能大幅下降。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;锁定问题，多个会话同时访问同一张表可能会影响查询速度。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;geng-duo-you-hua-ce-lue&quot;&gt;更多优化策略&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.divinerapier.cn&#x2F;2020&#x2F;08&#x2F;01&#x2F;where-clause-optimization&#x2F;&quot;&gt;WHERE Clause Optimization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Range Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Index Merge Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Hash Join Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Engine Condition Pushdown Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Index Condition Pushdown Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Nested-Loop Join Algorithms&lt;&#x2F;li&gt;
&lt;li&gt;Nested Join Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Outer Join Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Outer Join Simplification&lt;&#x2F;li&gt;
&lt;li&gt;Multi-Range Read Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Block Nested-Loop and Batched Key Access Joins&lt;&#x2F;li&gt;
&lt;li&gt;Condition Filtering&lt;&#x2F;li&gt;
&lt;li&gt;Constant-Folding Optimization&lt;&#x2F;li&gt;
&lt;li&gt;IS NULL Optimization&lt;&#x2F;li&gt;
&lt;li&gt;ORDER BY Optimization&lt;&#x2F;li&gt;
&lt;li&gt;GROUP BY Optimization&lt;&#x2F;li&gt;
&lt;li&gt;DISTINCT Optimization&lt;&#x2F;li&gt;
&lt;li&gt;LIMIT Query Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Function Call Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Window Function Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Row Constructor Expression Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Avoiding Full Table Scans&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>优化SQL语句</title>
		<published>2020-07-28T19:41:54+00:00</published>
		<updated>2020-07-28T19:41:54+00:00</updated>
		<link href="https://blog.kiyoko.io/optimizing-sql-statements/" type="text/html"/>
		<id>https://blog.kiyoko.io/optimizing-sql-statements/</id>
		<content type="html">&lt;ol&gt;
&lt;li&gt;Optimizing SELECT Statements&lt;&#x2F;li&gt;
&lt;li&gt;Optimizing Subqueries, Derived Tables, View References, and Common Table Expressions&lt;&#x2F;li&gt;
&lt;li&gt;Optimizing INFORMATION_SCHEMA Queries&lt;&#x2F;li&gt;
&lt;li&gt;Optimizing Performance Schema Queries&lt;&#x2F;li&gt;
&lt;li&gt;Optimizing Data Change Statements&lt;&#x2F;li&gt;
&lt;li&gt;Optimizing Database Privileges&lt;&#x2F;li&gt;
&lt;li&gt;Other Optimization Tips&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;数据库应用程序的核心逻辑是通过 &lt;code&gt;SQL&lt;&#x2F;code&gt; 语句执行的，无论这些 &lt;code&gt;SQL&lt;&#x2F;code&gt; 语句是通过解释程序直接发出还是通过调用 &lt;code&gt;API&lt;&#x2F;code&gt; 提交。之后提到的调整准则有助于加快各种使用到 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 应用程序的速度。指南涵盖了读写数据的 &lt;code&gt;SQL&lt;&#x2F;code&gt; 操作，通用 &lt;code&gt;SQL&lt;&#x2F;code&gt; 操作的底层开销以及在特定方案（例如数据库监视）中使用的操作。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>MySQL 性能优化概述</title>
		<published>2020-07-27T21:43:22+00:00</published>
		<updated>2020-07-27T21:43:22+00:00</updated>
		<link href="https://blog.kiyoko.io/mysql-optimization-overview/" type="text/html"/>
		<id>https://blog.kiyoko.io/mysql-optimization-overview/</id>
		<content type="html">&lt;p&gt;在软件层面，数据库的性能会受到表结构，查询语句和数据库系统配置等几个方面的影响。这些软件层面的因素会直接决定 CPU 和 I&#x2F;O 等硬件如何操作。我们要努力做到硬件操作的最小化。&lt;&#x2F;p&gt;
&lt;p&gt;对于研究数据库性能的初学者而言，可以从学习数据库的高级规则和准则开始，学会使用时钟时间来作为衡量性能的指标。而对于那些想要成为数据库性能优化领域的专家的人来说，则需要他们了解更多关于数据库底层的知识，能使用更具有一般性的指标，诸如 CPU 周期和 I&#x2F;O 操作等来衡量性能。&lt;&#x2F;p&gt;
&lt;p&gt;大部分的用户，希望从其现有的软件和硬件配置中获得最佳的数据库性能。进阶用户则专注于寻找机会改进 MySQL 软件本身，或者开发自己的存储引擎和硬件设备以扩展 MySQL 生态系统。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zai-shu-ju-ku-ji-bie-jin-xing-you-hua&quot;&gt;在数据库级别进行优化&lt;&#x2F;h2&gt;
&lt;p&gt;使数据库应用程序快速运行的最重要因素是其基本设计：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;表格的结构是否正确？ 特别是，这些列是否具有正确的数据类型，并且每个表都具有适合于该工作类型的列吗？ 例如，执行频繁更新的应用程序通常具有许多表而具有很少的列，而分析大量数据的应用程序通常具有很少的表而具有很多列。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;是否安装了正确的&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimization-indexes.html&quot;&gt;索引&lt;&#x2F;a&gt;以提高查询效率？&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;您是否为每个表使用了适当的存储引擎，并利用了所使用的每个存储引擎的优势和功能？ 特别是，对于性能和可伸缩性而言，选择事务存储引擎（例如 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimizing-innodb.html&quot;&gt;InnoDB&lt;&#x2F;a&gt;）或非事务存储引擎（例如 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimizing-myisam.html&quot;&gt;MyISAM&lt;&#x2F;a&gt;）可能非常重要。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意
&lt;code&gt;InnoDB&lt;&#x2F;code&gt; 是新表的默认存储引擎。 实际上，先进的 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 性能功能意味着 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 表通常优于简单的 &lt;code&gt;MyISAM&lt;&#x2F;code&gt; 表，尤其是对于繁忙的数据库。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;每个表都使用适当的行格式吗？ 该选择还取决于表使用的存储引擎。 特别是，压缩表使用较少的磁盘空间，因此需要较少的磁盘I &#x2F; O来读取和写入数据。 压缩可用于带有 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 表的所有类型的工作负载以及只读的 &lt;code&gt;MyISAM&lt;&#x2F;code&gt; 表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;应用程序是否使用适当的&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;locking-issues.html&quot;&gt;锁定策略&lt;&#x2F;a&gt;？ 例如，通过在可能的情况下允许共享访问，以便数据库操作可以同时运行，并在适当的时候请求独占访问，以使关键操作获得最高优先级。 同样，存储引擎的选择很重要。 InnoDB存储引擎无需您的参与即可处理大多数锁定问题，从而可以更好地并发数据库并减少代码的试验和调整量。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;用于&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;buffering-caching.html&quot;&gt;缓存&lt;&#x2F;a&gt;的所有内存区域大小是否正确？ 也就是说，足够大以容纳经常访问的数据，但又不能太大以至于它们会使物理内存过载并导致分页。 要配置的主要内存区域是 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 缓冲池和 &lt;code&gt;MyISAM&lt;&#x2F;code&gt; 密钥缓存。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zai-ying-jian-ji-bie-jin-xing-you-hua&quot;&gt;在硬件级别进行优化&lt;&#x2F;h2&gt;
&lt;p&gt;随着数据库变得越来越繁忙，任何数据库应用程序最终都会达到硬件极限。 DBA必须评估是否有可能调整应用程序或重新配置服务器以避免这些&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;glossary.html#glos_bottleneck&quot;&gt;瓶颈&lt;&#x2F;a&gt;，或者是否需要更多的硬件资源。 系统瓶颈通常来自以下来源：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;磁盘搜寻。 磁盘查找数据需要花费时间。 对于现代磁盘，此操作的平均时间通常小于10毫秒，因此理论上我们可以执行100次搜索。 这段时间随着新磁盘的使用而缓慢改善，并且很难为单个表进行优化。 优化寻道时间的方法是将数据分发到多个磁盘上。&lt;&#x2F;li&gt;
&lt;li&gt;磁盘读写。 当磁盘位于正确的位置时，我们需要读取或写入数据。 对于现代磁盘，一个磁盘至少可提供10–20MB &#x2F; s的吞吐量。 与查找相比，优化起来更容易，因为您可以从多个磁盘并行读取。&lt;&#x2F;li&gt;
&lt;li&gt;CPU周期。 当数据位于主存储器中时，我们必须对其进行处理以获得结果。 与内存量相比，拥有较大的表是最常见的限制因素。 但是对于小桌子，速度通常不是问题。&lt;&#x2F;li&gt;
&lt;li&gt;内存带宽。 当CPU需要的数据超出CPU缓存的容量时，主内存带宽将成为瓶颈。 对于大多数系统来说，这是一个不常见的瓶颈，但是要意识到这一点。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ping-heng-bian-xi-xing-he-xing-neng&quot;&gt;平衡便携性和性能&lt;&#x2F;h2&gt;
&lt;p&gt;MySQL 支持在 SQL 注释中（&lt;code&gt;&#x2F;*！*&#x2F;&lt;&#x2F;code&gt;）通过特定的关键字来指定优化策略。而且，因为是在注释中，会被其他的 SQL 服务忽略，因此，SQL 语句仍然是可移植的。有关编写注释的信息，请参见 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimizer-hints.html&quot;&gt;8.9.3 优化器提示&lt;&#x2F;a&gt;，&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;comments.html&quot;&gt;9.6 注释语法&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
