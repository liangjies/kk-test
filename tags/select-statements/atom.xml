<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>不是在改BUG，就是在改BUG的路上 - select statements</title>
	<link href="https://blog.kiyoko.io/tags/select-statements/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.kiyoko.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-07-28T21:45:48+00:00</updated>
	<id>https://blog.kiyoko.io/tags/select-statements/atom.xml</id>
	<entry xml:lang="en">
		<title>优化 SELECT 语句</title>
		<published>2020-07-28T21:45:48+00:00</published>
		<updated>2020-07-28T21:45:48+00:00</updated>
		<link href="https://blog.kiyoko.io/optimizing-select-statements/" type="text/html"/>
		<id>https://blog.kiyoko.io/optimizing-select-statements/</id>
		<content type="html">&lt;p&gt;数据库中所有查找操作，均以 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句的形式执行。无论是实现网站秒级以内的响应时间，还是期望在生成大量的隔夜报告是缩短数小时的执行时间，调试这类语句都是重中之重。&lt;&#x2F;p&gt;
&lt;p&gt;除了 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句外，相同的技术还适用于诸如 &lt;code&gt;CREATE TABLE ... AS SELECT&lt;&#x2F;code&gt;，&lt;code&gt;INSERT INTO ... SELECT&lt;&#x2F;code&gt; 和 &lt;code&gt;DELETE&lt;&#x2F;code&gt; 语句中的 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句。但由于这些语句同时会涉及到读写两种操作，因此还需要考虑其他方面的性能问题。&lt;&#x2F;p&gt;
&lt;p&gt;多节点集群支持 &lt;strong&gt;&lt;code&gt;JOIN&lt;&#x2F;code&gt; 查询下推优化(&lt;code&gt;join pushdown optimization&lt;&#x2F;code&gt;)&lt;&#x2F;strong&gt;，能将符合条件的 &lt;code&gt;JOIN&lt;&#x2F;code&gt; 完整地发送到集群的数据节点，让这个查询请求被分发到这些节点上并行执行。有关此优化的更多信息，请参见&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;mysql-cluster-options-variables.html#ndb_join_pushdown-conditions&quot;&gt;Conditions for NDB pushdown joins&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;优化查询的核心因素：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何查询语句 &lt;code&gt;SELECT ... WHERE&lt;&#x2F;code&gt; 执行的非常之慢，首选提速方法就是检查是否可以添加&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;glossary.html#glos_index&quot;&gt;索引&lt;&#x2F;a&gt;。在 &lt;code&gt;WHERE&lt;&#x2F;code&gt; 子句中使用的列上设置索引，以加快执行，过滤，检索结果等操作的速度。同时，索引信息需要占用一定的磁盘空间，请尽可能在有一定关联性的查询中复用索引。&lt;&#x2F;p&gt;
&lt;p&gt;在执行 &lt;code&gt;JOIN&lt;&#x2F;code&gt; 查询，外键关联等需要多个表参与的查询语句时，索引尤为重要。此时，可以通过 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;explain.html&quot;&gt;EXPLAIN&lt;&#x2F;a&gt; 语句来确定，执行 &lt;code&gt;SELECT&lt;&#x2F;code&gt; 语句时，实际有哪些索引真正被使用了。参见 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;mysql-indexes.html&quot;&gt;Section 8.3.1, “How MySQL Uses Indexes”&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;using-explain.html&quot;&gt;Section 8.8.1, “Optimizing Queries with EXPLAIN”&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;隔离和调整查询中花费时间过多的任何部分，例如函数调用。 根据查询的结构方式，可以对结果集中的每一行调用一次函数，甚至可以对表中的每一行调用一次函数，从而极大地提高了效率。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;最小化查询中&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;glossary.html#glos_full_table_scan&quot;&gt;全表扫描&lt;&#x2F;a&gt;的次数，特别是对于大表。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;通过定期使用 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;analyze-table.html&quot;&gt;&lt;code&gt;ANALYZE TABLE&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; 语句使表统计信息保持最新状态，让优化器具有充足的信息构造有效执行计划。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;了解每种存储引擎的调整技术，索引技术和配置参数。无论是 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 还是 &lt;code&gt;MyISAM&lt;&#x2F;code&gt;，都各自具有一套保持查询高性能的准则。参见 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimizing-innodb-queries.html&quot;&gt;Section 8.5.6, “Optimizing InnoDB Queries”&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;optimizing-queries-myisam.html&quot;&gt;Section 8.6.1, “Optimizing MyISAM Queries”&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;innodb-performance-ro-txn.html&quot;&gt;Section 8.5.3, “Optimizing InnoDB Read-Only Transactions”&lt;&#x2F;a&gt; 中的技术优化 &lt;code&gt;InnoDB&lt;&#x2F;code&gt; 表的单查询事务。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;避免以难以理解的方式转换查询，特别是在优化器自动执行某些相同转换的情况下。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当使用基本准则不能轻松解决性能问题时，可以通过阅读 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;explain.html&quot;&gt;EXPLAIN&lt;&#x2F;a&gt; 计划并调整索引，&lt;code&gt;WHERE&lt;&#x2F;code&gt;，&lt;code&gt;JOIN&lt;&#x2F;code&gt; 等子句来调查特定查询的内部详细信息。(有一定经验之后，阅读 &lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;explain.html&quot;&gt;EXPLAIN&lt;&#x2F;a&gt; 计划可能是每个查询的第一步。)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;调整 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 用于缓存的内存区域的大小和属性。合理使用 InnoDB 的&lt;a href=&quot;https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;glossary.html#glos_buffer_pool&quot;&gt;buffer pool&lt;&#x2F;a&gt;，&lt;code&gt;MyISAM&lt;&#x2F;code&gt; 的 &lt;code&gt;key cache&lt;&#x2F;code&gt; 和 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 的 &lt;code&gt;query cache&lt;&#x2F;code&gt;，可以让重复查询的运行速度更快。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;即使查询已经使用了内存缓存，也依然可能对其进一步优化，使其需要更少的内存，从而使应用程序更具可伸缩性。比如，应用程序可以同时处理更多的用户，更大的请求量，而不会导致性能大幅下降。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;锁定问题，多个会话同时访问同一张表可能会影响查询速度。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;geng-duo-you-hua-ce-lue&quot;&gt;更多优化策略&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.divinerapier.cn&#x2F;2020&#x2F;08&#x2F;01&#x2F;where-clause-optimization&#x2F;&quot;&gt;WHERE Clause Optimization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Range Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Index Merge Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Hash Join Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Engine Condition Pushdown Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Index Condition Pushdown Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Nested-Loop Join Algorithms&lt;&#x2F;li&gt;
&lt;li&gt;Nested Join Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Outer Join Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Outer Join Simplification&lt;&#x2F;li&gt;
&lt;li&gt;Multi-Range Read Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Block Nested-Loop and Batched Key Access Joins&lt;&#x2F;li&gt;
&lt;li&gt;Condition Filtering&lt;&#x2F;li&gt;
&lt;li&gt;Constant-Folding Optimization&lt;&#x2F;li&gt;
&lt;li&gt;IS NULL Optimization&lt;&#x2F;li&gt;
&lt;li&gt;ORDER BY Optimization&lt;&#x2F;li&gt;
&lt;li&gt;GROUP BY Optimization&lt;&#x2F;li&gt;
&lt;li&gt;DISTINCT Optimization&lt;&#x2F;li&gt;
&lt;li&gt;LIMIT Query Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Function Call Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Window Function Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Row Constructor Expression Optimization&lt;&#x2F;li&gt;
&lt;li&gt;Avoiding Full Table Scans&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
